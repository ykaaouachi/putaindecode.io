<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[putaindecode.io]]></title><description><![CDATA[putaindecode.io]]></description><link>http://putaindecode.io</link><generator>RSS for Node</generator><lastBuildDate>Thu, 02 Feb 2017 17:20:21 GMT</lastBuildDate><atom:link href="http://putaindecode.io/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Introduction √† styled-components]]></title><description><![CDATA[<p>Il existe de nombreuses approches et <a href="https://github.com/MicheleBertoli/css-in-js">solutions diff√©rentes</a> pour g√©rer le CSS en ReactJS, je vais parler ici de <a href="https://github.com/styled-components/styled-components">styled-components</a> qui permet de gagner en productivit√© et en qualit√© quand on veut cr√©er et distribuer des composants UI.</p>
<p>La force de <a href="https://github.com/styled-components/styled-components">styled-components</a> c'est de faciliter la cr√©ation de composants visuels ReactJS minimalistes et configurables, en combinant du <strong>CSS standard</strong> et <strong>un zeste de JavaScript</strong>. Ces composants deviendront litt√©ralement les pi√®ces de lego qui pourront √™tre utilis√©es et partag√©es entre les UIs de toutes vos applications, sites webs...</p>
<p>Si vous voulez jouer avec, je vous conseille d'utiliser <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> pour g√©n√©rer un projet vierge puis d'ajouter styled-components au projet : <code>npm i --save styled-components</code>.</p>
<p>Avec styled, on peut abstraire le CSS et le DOM de la vue, ce qui va grandement simplifier le code de la partie "m√©tier" de l'application, et am√©liorer la lisibilit√©.</p>
<h5 id="avant-"><a href="#avant-" class="phenomic-HeadingAnchor">#</a>Avant :</h5>
<pre><code class="hljs language-jsx"><span class="hljs-comment">// solution en pure CSS-in-JS</span>

<span class="hljs-keyword">const</span> styles = {
  <span class="hljs-attr">box</span>: {
    <span class="hljs-attr">width</span>: <span class="hljs-string">'60%'</span>,
    <span class="hljs-attr">border</span>: <span class="hljs-string">'1px solid silver'</span>
  },
  <span class="hljs-attr">title</span>: {
    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">'1.2em'</span>,
    <span class="hljs-attr">fontWeight</span>: <span class="hljs-string">'bold'</span>
  },
  <span class="hljs-attr">description</span>: {
    <span class="hljs-attr">fontSize</span>: <span class="hljs-string">'0.8em'</span>
  },
  <span class="hljs-attr">important</span>: {
    <span class="hljs-attr">fontWeight</span>: <span class="hljs-string">'bold'</span>
  }
}

<span class="hljs-comment">// nos composants int√®grent les styles dans le code</span>
&#x3C;div className={ styles.box }>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{</span> <span class="hljs-attr">styles.title</span> }></span>{ title }<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
  &#x3C;div className={ classnames(styles.description, styled.important) }>{ description }&#x3C;<span class="hljs-regexp">/div>
&#x3C;/</span>div></code></pre>
<h5 id="apr√®s-"><a href="#apr%C3%A8s-" class="phenomic-HeadingAnchor">#</a>Apr√®s :</h5>
<pre><code class="hljs language-jsx"><span class="hljs-comment">// avec styled-components</span>

<span class="hljs-keyword">const</span> Box = styled.div<span class="hljs-string">`
  width: 60%;
  border: 1px solid silver;
`</span>

<span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 1.2em;
  font-weight: bold;
`</span>

<span class="hljs-keyword">const</span> Description = styled.div<span class="hljs-string">`
  font-size: 0.8em;
  font-weight: <span class="hljs-subst">${ props => props.important ? <span class="hljs-string">'bold'</span> : <span class="hljs-string">'normal '</span>}</span>
`</span>

<span class="hljs-comment">// les composants sont pr√©-styl√©s, pas de bruit g√©n√©r√© par le styling</span>
&#x3C;Box>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Title</span>></span>{ title }<span class="hljs-tag">&#x3C;/<span class="hljs-name">Title</span>></span></span>
  &#x3C;Description important>{ description }&#x3C;<span class="hljs-regexp">/Description>
&#x3C;/</span>Box></code></pre>
<h3 id="avantages-"><a href="#avantages-" class="phenomic-HeadingAnchor">#</a>Avantages :</h3>
<ul>
<li><a href="https://github.com/styled-components/styled-components/graphs/contributors">community powered</a> - moving fast, <a href="https://github.com/styled-components/styled-components/tree/v2">v2 en cours</a></li>
<li>support des <a href="https://github.com/styled-components/styled-components/blob/master/docs/theming.md">th√®mes</a></li>
<li><a href="https://github.com/styled-components/styled-components/blob/master/docs/css-we-support.md">syntaxe CSS "classique"</a> mais scop√© automatiquement</li>
<li>Gestion des media queries, pseudo-selectors, nesting</li>
<li>Un <a href="https://github.com/rofrischmann/inline-style-prefixer/">autoprefixer-like int√©gr√©</a></li>
<li>Code "m√©tier" plus lisible</li>
<li>Compatible react-native</li>
<li>Compatible avec les <a href="https://facebook.github.io/jest/">snapshots Jest</a> out of the box</li>
<li>Ne n√©cessite pas de loader Webpack sp√©cifique ‚ù§Ô∏è</li>
</ul>
<h3 id="inconv√©nients-"><a href="#inconv%C3%A9nients-" class="phenomic-HeadingAnchor">#</a>Inconv√©nients :</h3>
<ul>
<li>pas encore id√©al pour¬†<a href="https://github.com/styled-components/styled-components/issues/134">des styles tr√®s dynamiques</a></li>
<li>pas encore id√©al pour¬†<a href="https://github.com/styled-components/styled-components/issues/124">le server-side</a></li>
<li>syntaxe pas forcement bien <a href="https://github.com/styled-components/styled-components#linting">surlign√©e ou lint√©e</a> mais <a href="https://github.com/styled-components/styled-components#syntax-highlighting">des plugins existent</a>.</li>
</ul>
<h3 id="fonctionnement"><a href="#fonctionnement" class="phenomic-HeadingAnchor">#</a>Fonctionnement</h3>
<p>Techniquement, <a href="https://github.com/styled-components/styled-components">styled-components</a> va pour chaque composant "styled" pr√©sent dans le DOM :</p>
<ul>
<li>injecter les classes CSS n√©cessaires pour ce composant dans le <code>&#x3C;head></code> de la page, au runtime.</li>
<li>fournir au composant une props <code>className</code> unique (ainsi que ses <code>ownProps</code>)</li>
</ul>
<p>La syntaxe est certes exotique, le CSS √©tant d√©fini dans un template-string ES2015, mais ceci rend le code tr√®s concis.</p>
<p>Pour en savoir plus sur les "Template Strings", ou "Litt√©raux de gabarits" en Fran√ßais üá´üá∑ vous pouvez lire <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits">l'excellente doc chez MDN</a>.</p>
<h3 id="usage-"><a href="#usage-" class="phenomic-HeadingAnchor">#</a>Usage :</h3>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> styled <span class="hljs-keyword">from</span> <span class="hljs-string">'styled-components'</span>

<span class="hljs-comment">// exemple ici avec une div</span>
<span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 3rem;
  color: #ff3333;
`</span>

<span class="hljs-comment">// utilisable comme ceci :</span>
&#x3C;Title>Hello, World&#x3C;<span class="hljs-regexp">/Title></span></code></pre>
<p>ceci qui g√©n√®rera automatiquement dans le DOM:</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dxhUOh"</span>></span>Hello, World<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></code></pre>
<p>et injectera dans le CSS de la page le style associ√© :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.dxhUOh</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3rem</span>;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff3333</span>;
}</code></pre>
<p><img src="./styled-1.png" width="200"/></p>
<h2 id="exemples"><a href="#exemples" class="phenomic-HeadingAnchor">#</a>Exemples</h2>
<h3 id="composition"><a href="#composition" class="phenomic-HeadingAnchor">#</a>Composition</h3>
<p>Les composants styled sont des composants ReactJS standards qui peuvent recevoir des <code>children</code> et se composer les uns avec les autres.</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Box = styled.div<span class="hljs-string">`
  border: 1px solid silver;
  width: 80%;
  padding: 1em;
  text-align: center;
  background: #e7f3ff;
`</span>

<span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 1.5em;
  color: #0080ff;
`</span>

&#x3C;Box>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Title</span>></span>Hello, World<span class="hljs-tag">&#x3C;/<span class="hljs-name">Title</span>></span></span>
&#x3C;<span class="hljs-regexp">/Box></span></code></pre>
<p><img src="./styled-2.png" width="300"/></p>
<h3 id="etendre-des-composants-en-css"><a href="#etendre-des-composants-en-css" class="phenomic-HeadingAnchor">#</a>Etendre des composants en CSS</h3>
<p>Surcharger un composant avec du CSS :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 3rem;
  color: #ff3333;
`</span>
<span class="hljs-keyword">const</span> BlueTitle = styled(Title)<span class="hljs-string">`
  color: #0080ff;
`</span>
&#x3C;Title>titre en rouge&#x3C;<span class="hljs-regexp">/Title>
&#x3C;BlueTitle>titre en bleu&#x3C;/</span>BlueTitle></code></pre>
<p><img src="./styled-3.png" width="200"/></p>
<h3 id="pseudo-classes"><a href="#pseudo-classes" class="phenomic-HeadingAnchor">#</a>Pseudo classes</h3>
<p>Les pseudo-classes, le nesting sont accept√©es</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Button = styled.button<span class="hljs-string">`
  font-size: 3rem;
  color: #ff3333;
  &#x26;:hover {
    color: #0080ff;
  }
`</span></code></pre>
<p><img src="./styled-hover.gif" width="100"/></p>
<h3 id="media-queries"><a href="#media-queries" class="phenomic-HeadingAnchor">#</a>Media queries</h3>
<p>Les medias queries sont possibles facilement :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Cover = styled.div<span class="hljs-string">`
  background-image: url(http://putaindecode.io/assets/npm.png);
  background-repeat: no-repeat;
  background-size: contain;
  background-position: center center;
  width: 800px;
  height:300px;

  @media (max-width: 800px) {
    width: 400px;
  }
`</span></code></pre>
<p>Usage avanc√© des media queries : <a href="https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates">https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates</a></p>
<h3 id="composants-configurables"><a href="#composants-configurables" class="phenomic-HeadingAnchor">#</a>Composants configurables</h3>
<p>Mieux : comme le composant √† directement acc√®s aux <code>props</code> (attributs du composant), on peut le configurer depuis le JavaScript :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Title = styled.div<span class="hljs-string">`
  font-size: 3rem;
  color: <span class="hljs-subst">${props => props.blue ? <span class="hljs-string">'#0080ff'</span> : <span class="hljs-string">'#ff3333'</span>}</span>;
`</span>
&#x3C;Title>titre en rouge&#x3C;<span class="hljs-regexp">/Title>
&#x3C;Title blue>titre en bleu&#x3C;/</span>Title></code></pre>
<p><img src="./styled-3.png" width="200"/></p>
<h3 id="dans-un-composant-react-classique"><a href="#dans-un-composant-react-classique" class="phenomic-HeadingAnchor">#</a>Dans un composant React "classique"</h3>
<p>Avec la methode <code>styled.css</code>, une <code>className</code> unique est g√©n√©r√©e et peut √™tre utilis√©e pour vos composants :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">import</span> Notification <span class="hljs-keyword">from</span> <span class="hljs-string">'./Notification'</span>

<span class="hljs-keyword">const</span> warning = styled.css<span class="hljs-string">`
  color: #ff3333;
`</span>

<span class="hljs-keyword">const</span> WarningNotification = <span class="hljs-function"><span class="hljs-params">()</span> =></span> &#x3C;Notification className={ warning } /></code></pre>
<h3 id="r√©utiliser-des-styles"><a href="#r%C3%A9utiliser-des-styles" class="phenomic-HeadingAnchor">#</a>R√©utiliser des styles</h3>
<p>Comme styled utilise des <a href="https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits">templates literals</a> vous pouvez utiliser n'importe quelle variable dans votre CSS :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> textStyle = <span class="hljs-string">`
  font-size: 2em;
  letter-spacing: 5px;
`</span>
<span class="hljs-keyword">const</span> TextRed = styled.div<span class="hljs-string">`
  <span class="hljs-subst">${textStyle}</span>
  color: #ff3333;
`</span>
<span class="hljs-keyword">const</span> TextBlue = styled.div<span class="hljs-string">`
  <span class="hljs-subst">${textStyle}</span>
  color: #0080ff;
`</span>
&#x3C;TextRed>texte en rouge&#x3C;<span class="hljs-regexp">/TextRed>
&#x3C;TextBlue>texte en bleu&#x3C;/</span>TextBlue></code></pre>
<p><img src="./styled-4.png" width="200"/></p>
<h3 id="attributs-html"><a href="#attributs-html" class="phenomic-HeadingAnchor">#</a>Attributs HTML</h3>
<p>Par d√©faut les composants styled passent toutes leur <code>props</code> au DOM, par exemple ici, <code>placeholder</code>.</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> SuperInput = styled.input<span class="hljs-string">`
  border: 2px solid silver;
  border-radius: 2px;
  text-align: center;
  font-size: 1.5em;
`</span>

&#x3C;SuperInput placeholder=<span class="hljs-string">"Your name"</span>/></code></pre>
<p><img src="./styled-5.png" width="200"/></p>
<h3 id="utiliser-le-theming"><a href="#utiliser-le-theming" class="phenomic-HeadingAnchor">#</a>Utiliser le theming</h3>
<p>Pour rendre son UI themable, il suffit d'encapsuler son App dans un composant <code>ThemeProvider</code>; Chaque composant styled se verra alors fournir une props <code>theme</code> avec toutes les variables du th√®me :</p>
<pre><code class="hljs language-jsx"><span class="hljs-keyword">const</span> Button = styled.button<span class="hljs-string">`
  background: <span class="hljs-subst">${props => props.theme.main || <span class="hljs-string">'silver'</span>}</span>;
`</span>

<span class="hljs-comment">// Create a green theme</span>
<span class="hljs-keyword">const</span> greenTheme = {
  <span class="hljs-attr">main</span>: <span class="hljs-string">'mediumseagreen'</span>,
}

<span class="hljs-comment">// Create a blue theme</span>
<span class="hljs-keyword">const</span> blueTheme = {
  <span class="hljs-attr">main</span>: <span class="hljs-string">'#0080ff'</span>,
}

&#x3C;ThemeProvider theme={greenTheme}>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Button</span>></span>I'm green!<span class="hljs-tag">&#x3C;/<span class="hljs-name">Button</span>></span></span>
&#x3C;<span class="hljs-regexp">/ThemeProvider></span></code></pre>
<p>Et pour aller loin, consultez la <a href="https://github.com/styled-components/styled-components/blob/master/docs/theming.md#using-theming">documentation officielle</a></p>
<h3 id="injecter-des-css-globaux"><a href="#injecter-des-css-globaux" class="phenomic-HeadingAnchor">#</a>Injecter des CSS globaux</h3>
<p>Parfois on a besoin d'int√©grer aussi du CSS "global". Par exemple pour les fontes, ou lorsque l'on migre une grosse application.</p>
<p>Voici une fa√ßon de le faire avec styled :</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { injectGlobal } <span class="hljs-keyword">from</span> <span class="hljs-string">'styled-components'</span>

injectGlobal<span class="hljs-string">`
  @import url('https://fonts.googleapis.com/css?family=Roboto');
  * {
    font-family: 'Roboto', sans-serif;
  }
`</span></code></pre>
<p>Plus d'infos sur <a href="https://github.com/styled-components/styled-components/blob/master/docs/api.md#injectglobal">la doc d'injectGlobal</a></p>
<h3 id="react-storybook"><a href="#react-storybook" class="phenomic-HeadingAnchor">#</a>React Storybook</h3>
<p>En ajoutant <a href="https://github.com/storybooks/react-storybook">react-storybook</a> dans votre projet, vous pourrez facilement vous constituter une biblioth√®que visuelle avec vos propres composants, hors-contexte, dans tous leurs √©tats possibles, et avec du Hot-Reload ce qui est <strong>tr√®s tr√®s pratique dans la phase de conception</strong>.</p>
<h3 id="autres-liens-"><a href="#autres-liens-" class="phenomic-HeadingAnchor">#</a>Autres liens :</h3>
<ul>
<li><a href="https://github.com/styled-components/styled-components/blob/master/docs">Documentation officielle</a></li>
<li><a href="https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/">Enforcing Best Practices In Component-Based Systems</a></li>
<li><a href="http://mxstbr.blog/2016/11/styled-components-magic-explained/">The magic behind üíÖ styled-components</a></li>
<li><a href="https://github.com/MicheleBertoli/css-in-js">React CSS-in-JS techniques comparison</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/js/react/styled-components/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/react/styled-components/</guid><pubDate>Wed, 01 Feb 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Quelques petits hÕîÃûÃûÃ≠ÕôÕ†aÃò√ßÃ´ÃØÕìkÃµÕñÃòÃ¨Ã≥Ã±ÃØÃ§sÃ¥ÕéÃªÃØ typographiques]]></title><description><![CDATA[<p>On ne va pas se mentir, la typo c'est quand m√™me super important sur le web, et
il va falloir admettre que ce bon vieux Gutenberg avait eu un sacr√© flair √†
l'√©poque.</p>
<p>Ah, qu'il est bon de parcourir un web parfaitement typesett√©, avec de jolies
polices bien kern√©es et- NOPE. Au mieux une bonne grosse Arial bien crasse dans
ta face quand c'est pas de la Comic Sans MS rendue avec un cr√©nelage moisi sous
Windows XP, #geocities.</p>
<p>Heureusement, le web a progress√© depuis, et en tant que cr√©ateurs, nous pouvons
tous apporter notre petit morceau de plomb √† l'√©difice typographique avec
quelques petites astuces. Ce sont quelques unes de ces astuces que je vais vous
fournir ici, alors ouvrez bien les mirettes.</p>
<h3 id="ampersand-hacking-je-suis-s√ªr-que-√ßa-ne-sappelle-pas-comme-√ßa"><a href="#ampersand-hacking-je-suis-s%C3%BBr-que-%C3%A7a-ne-sappelle-pas-comme-%C3%A7a" class="phenomic-HeadingAnchor">#</a>Ampersand hacking (je suis s√ªr que √ßa ne s'appelle pas comme √ßa)</h3>
<p>Pas loin d'√™tre l'un des plus connus, il est √©galement l'un des plus simples.</p>
<p>Il consiste simplement √† remplacer un glyphe de votre texte par le glyphe
correspondant √† ce caract√®re depuis une autre typo. Je m'explique.</p>
<p><img src="./csslickbait.png" alt="cliquez pas, s√©rieux"></p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>></span>
  Until the
  <span class="hljs-tag">&#x3C;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"amp"</span>></span>&#x26;amp;<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span>
  of time
<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span></code></pre>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.amp</span> {
  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"Baskerville"</span>;
  <span class="hljs-attribute">font-style</span>: italic
}</code></pre>
<p>Voil√†, c'est pas bien folichon mais √ßa fonctionne : vous pouvez d√®s √† pr√©sent
enrouler toutes vos esperluettes (si vous √™tes chef de projet, une esperluette
c'est un "et commercial") dans des <code>span</code> pour leur donner une bien chouette
gueule.</p>
<p>Mais √ßa c'est pour les quelques d'entre vous qui ont la main sur le contenu
textuel du projet, beaucoup d'autres n'ont pas ce luxe et se font fournir de
pauvres textes mal traduits servis par un vieux CMS miteux.</p>
<p>Ce serait chouette d'avoir un moyen pour sp√©cifier une typo pour certains
caract√®res au cas par cas, non ?</p>
<p>Bonne nouvelle.</p>
<h3 id="go-go-unicode-range-"><a href="#go-go-unicode-range-" class="phenomic-HeadingAnchor">#</a>Go Go Unicode-Range !</h3>
<p>Reprenons notre exemple pr√©c√©dent, que nous allons impl√©menter avec la feature
<code>unicode-range</code> de CSS.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>></span>Until the &#x26;amp; of time<span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span></code></pre>
<pre><code class="hljs language-css">@<span class="hljs-keyword">font-face</span> {
  <span class="hljs-attribute">font-family</span>: BaskervilleAmpersand;
  <span class="hljs-attribute">font-style</span>: italic;
  <span class="hljs-attribute">font-weight</span>: normal;
  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">"path/to/your/font/i'm/not/your/mother/Baskerville.eot"</span>);
  <span class="hljs-attribute">unicode-range</span>: U+<span class="hljs-number">0026</span>; <span class="hljs-comment">/* unicode codepoint for &#x26;amp; */</span>
}

<span class="hljs-selector-tag">html</span> {
  <span class="hljs-attribute">font-family</span>: BaskervilleAmpersand, Helvetica, Arial, Serif;
}</code></pre>
<p>Ainsi, en tirant parti d'<code>unicode-range</code> et du stacking des polices, toutes les
esperluettes dans le corps de texte seront rendues en Baskerville et les autres
caract√®res tomberont en d√©faut sur Helvetica puis Arial, puis Serif en g√©n√©ral.
Bon, ne me faites pas dire ce que je n'ai pas dit, cette propri√©t√© CSS n'est pas
parfaite non plus, rien que le fait de devoir aller chercher les codepoints
unicode pour retrouver le caract√®re √† remplacer est assez lourd et fastidieux
(sauf si vous connaissez unicode par c≈ìur mais l√† vous me faites peur).
L'autre possibilit√© si vous utilisez PostCSS, c'est le plugin
<a href="https://github.com/ben-eb/postcss-unicode-characters"><code>postcss-unicode-characters</code></a>
par <a href="https://github.com/ben-eb">@beneb</a> qui simplifie grandement l'API d'unicode-range
et que je vous invite √† aller voir.
Enfin, la bonne nouvelle c'est que c'est une propri√©t√© relativement bien
support√©e, √† partir d'IE9 vous devriez vous en tirer.</p>
<h3 id="je-suis-sur-ie8"><a href="#je-suis-sur-ie8" class="phenomic-HeadingAnchor">#</a>Je suis sur IE8</h3>
<p>(mes condol√©ances)
Une autre solution existe pour vous ! Il faut juste cr√©er sa propre police et-
non s√©rieux revenez c'est pas si horrible, promis.
Bon, reprenons. Pour ce genre de manipulations vous aurez besoin d'un √©diteur de
police, j'aime personnellement beaucoup BirdFont, qui a l'avantage d'√™tre gratuit
et disponible sur macOS, Windows, pas mal de versions de Linux et m√™me OpenBSD.
On entre ici dans la partie tr√®s proc√©duri√®re de cet article mais mieux vaut √ßa
que de vous laisser seuls dans l'interface spartiate de BirdFont.</p>
<p><img src="./birdfont.png"></p>
<p>Spartiate. Bref, le bouton tout en haut √† gauche, c'est le bouton "Nouvelle
police", vous pouvez cliquer dessus pour arriver √† l'√©cran suivant.</p>
<p><img src="./birdfont1.png"></p>
<p>√Ä partir de l√† vous allez devoir choisir un caract√®re √† remplacer. √áa peut √™tre
la lettre E comme √ßa peut √™tre l'emoji Pizza, personnellement j'ai d√©cid√© de
remplacer le symbole dit "paragraphe" ou "Simflouz" si vous avez jou√© aux Sims
(et "Sporeflouz" si vous avez jou√© √† Spore mais passons).
Si votre caract√®re est un peu dur √† trouver dans la liste, l'option de recherche
est faite pour √ßa.
Double-cliquer sur un caract√®re vous emm√®nera √† l'interface d'√©dition.</p>
<p><img src="./birdfont3.png"></p>
<p>Nous voici dans l'interface d'√©dition de glyphe proprement dite. Elle ne vous
d√©paysera pas trop si vous avez d√©j√† utilis√© un outil de cr√©ation de SVG.
N'h√©sitez pas √† vous en donner √† c≈ìur joie si vous avez la fibre cr√©atrice,
personnellement comme vous pouvez le voir sur la capture, je suis d√©j√† un artiste
accompli.
Le menu hamburger en haut √† droite vous permettra √©galement d'importer directement
un SVG en tant que glyphe si vous n'avez pas la chance de dessiner aussi bien
que moi et que vous pr√©f√©rez d√©l√©guer ce genre de t√¢ches √† votre designer.
Ensuite, depuis le m√™me menu hamburger, vous pourrez exporter votre typo dans
tous les formats que vous voudrez si tant est que vous vouliez les exporter en
TTF, EOT ou SVG.</p>
<p>De l√†, vous n'aurez plus qu'√† importer cette font comme dans le chapitre 2 et
vous pourrez enfin rajouter "typesetter" dans vos comp√©tences sur LinkedIn.</p>
<p>Vous n'avez plus qu'√† trouver les utilisations les plus int√©ressantes de ce
genre de pratiques (il y en a plein).</p>
<p>La bise.</p>
]]></description><link>http://putaindecode.io/fr/articles/css/remplacer-glyphes-font/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/remplacer-glyphes-font/</guid><pubDate>Tue, 10 Jan 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Petit tour d'horizon de l'animation sur le web (et ailleurs)]]></title><description><![CDATA[<p>Les animations prennent une grande place dans les interfaces utilisateur. Loin de n'apporter qu'un c√¥t√© esth√©tique, elles augmentent la performance per√ßue, am√©liorent notre exp√©rience en nous aidant √† nous rep√©rer et en guidant notre attention. Sur les applications natives, ces animations sont souvent plus naturelles que sur le web, et pour cause, beaucoup de leurs animations sont des <em>springs</em>.</p>
<p>Qu'est-ce qu'une animation <em>spring</em> ? Pour arriver √† le d√©finir, voyons comment on a l'habitude de cr√©er des animations avec les technologies web.</p>
<p>CSS poss√®de deux propri√©t√©s permettant d'animer des valeurs: les <code>animation</code> et les <code>transition</code>. Au del√† de la diff√©rence entre leurs capacit√©s au sein de CSS (propri√©t√© VS ensemble de propri√©t√©s avec des √©tapes), les deux reposent sur le m√™me m√©canisme. On va donc √©tudier le plus simple: <code>transition</code>.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.block</span> {
  <span class="hljs-attribute">transition</span>: <span class="hljs-number">300ms</span> linear transform;
}

<span class="hljs-selector-class">.block</span><span class="hljs-selector-pseudo">:hover</span> {
  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(1.05);
}</code></pre>
<p>Cette transition est d√©finie sur un mod√®le simple : on fixe une dur√©e d'animation (ici <code>300ms</code>) et un easing ‚Äî<em>ou </em>zizine<em> si vous √©coutez <a href="http://putaindecode.io/fr/articles/podcast/1/">le podcast</a></em>‚Äî qui est une fonction d'interpolation (ici <code>linear</code>).</p>
<p>L'easing est une fonction toute b√™te comme vous avez pu en voir au coll√®ge et les avez dessin√©es sur votre calculatrice Casio ou Texas (si comme moi vous √©tiez le seul p√©quin de la classe √† avoir l'autre mod√®le, √† devoir toujours se d√©merder parce que les profs savaient pas comment la v√¥tre marchait).</p>
<p>Bref, une fonction d'easing est assez simple. Par exemple, la <code>linear</code> √ßa revient √† :</p>
<p><img src="./Linear.png"></p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> linear = <span class="hljs-function"><span class="hljs-params">x</span> =></span> x <span class="hljs-comment">// such complicated</span>
    <span class="hljs-comment">// didn't even import `lodash.identity` from npm</span></code></pre>
<p>Le param√®tre <code>x</code> varie entre <code>0</code> et <code>1</code>, c'est la progression de l'animation. Ce param√®tre vaut <code>0</code> quand vous √™tes au d√©but de l'animation et <code>1</code> √† la fin.</p>
<p>En faisant √† la main une version du syst√®me g√©rant l'animation, √ßa donne quelque chose dans ce style :</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> transition = <span class="hljs-function">(<span class="hljs-params">{ duration, easing, onUpdate, startValue, endValue }</span>) =></span> {
  <span class="hljs-keyword">const</span> startDate = <span class="hljs-built_in">Date</span>.now() <span class="hljs-comment">// le moment o√π commence l'animation</span>
  <span class="hljs-comment">// la fonction tick sera execut√©e p√©riodiquement</span>
  <span class="hljs-keyword">const</span> tick = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
    <span class="hljs-keyword">const</span> absoluteProgress = (<span class="hljs-built_in">Date</span>.now() - startDate) / duration <span class="hljs-comment">// on calcule `x`</span>
    <span class="hljs-keyword">const</span> progress = <span class="hljs-built_in">Math</span>.min(absoluteProgress, <span class="hljs-number">1</span>) <span class="hljs-comment">// on fait gaffe de pas d√©border</span>
    <span class="hljs-keyword">const</span> progressWithEasing = easing(progress) <span class="hljs-comment">// on applique la fonction d'easing</span>
    <span class="hljs-comment">// pour calculer la valeur, on diminue progressivement la valeur initiale et l'on accroit la valeur finale</span>
    onUpdate((<span class="hljs-number">1</span> - progressWithEasing) * startValue + progressWithEasing * endValue)
    <span class="hljs-keyword">if</span>(progress &#x3C; <span class="hljs-number">1</span>) {
      <span class="hljs-comment">// si c'est pas fini, on repart pour un tour</span>
      requestAnimationFrame(tick)
    }
  }
  tick()
}


myElement.onclick = <span class="hljs-function"><span class="hljs-params">()</span> =></span> transition({
  <span class="hljs-attr">duration</span>: <span class="hljs-number">500</span>,
  <span class="hljs-attr">easing</span>: <span class="hljs-function"><span class="hljs-params">x</span> =></span> x,
  <span class="hljs-attr">onUpdate</span>: <span class="hljs-function">(<span class="hljs-params">value</span>) =></span> myElement.style.transform = <span class="hljs-string">`translateY(<span class="hljs-subst">${ value + <span class="hljs-string">"px"</span> }</span>)`</span>,
  <span class="hljs-attr">startValue</span>: <span class="hljs-number">0</span>,
  <span class="hljs-attr">endValue</span>: <span class="hljs-number">200</span>,
})</code></pre>
<p>Pour d√©finir cette fonction d'easing, CSS vous permet √©galement de configurer des courbes de B√©zier cubiques.</p>
<p>Une courbe de B√©zier cubique se d√©finit avec 4 points : <code>P0</code>, <code>P1</code>, <code>P2</code> et <code>P3</code>. Il en est ensuite d√©riv√© une courbe √† partir de ces quatre points. C'est avec ce m√©canisme que fonctionne la plume de la plupart des logiciels d'√©dition d'image.  </p>
<p><img src="./Bezier.png"></p>
<p>Vu que votre animation commence et finit √† des valeurs d√©finies √† l'avance, deux points sont fix√©s √† l'avance : <code>P0</code> sera toujours <code>(0, 0)</code> et <code>P3</code> <code>(1, 1)</code>.</p>
<p>Vous avez avec CSS la libert√© de d√©finir <code>P1</code> et <code>P2</code> sous la forme <code>cubic-bezier(P1x, P1y, P2x, P2y)</code>. Pour visualiser le fonctionnement, je vous conseille de faire un tour sur <a href="http://cubic-bezier.com">cubic-bezier</a> de <a href="https://twitter.com/leaverou">Lea Verou</a>.</p>
<p>Tout ce que nous avons vu jusque-l√† sont des animations <em>tim√©es</em> (vive les anglicismes). Leur dur√©e est connue √† l'avance et est immuable, les variations possibles se feront dans les limites de ces contraintes.</p>
<p>Ces animations sont tr√®s pratiques pour certaines animations basiques et rempliront tr√®s bien leur mission, mais elles peuvent rapidement avoir des limites¬†:</p>
<p>Avec CSS :</p>
<ul>
<li>On n'a aucun contr√¥le sur l'ex√©cution de l'animation</li>
<li>Configurer des animations complexes complique la maintenance</li>
</ul>
<p>Avec un easing basique en g√©n√©ral :</p>
<ul>
<li><code>cubic-bezier</code> limite √©norm√©ment les possibilit√©s d'√©volution de la valeur anim√©e (e.g. on souhaite que l'animation ait de l'√©lasticit√©, les timing-functions ne permettent de faire qu'un seul d√©bord qui ne parait pas "naturel").</li>
<li>Avoir des animations coh√©rentes dans toute notre UI est extr√™mement contraignant avec CSS</li>
</ul>
<p>Pour l'√©lasticit√©, vous pouvez vous d√©brouiller avec <code>@keyframes</code>, hardcoder toutes les valeurs, les <em>timer</em> √† la main, y passer des heures pour vous retrouver avec 60 √©tapes dans votre animation et au final de ne pas √™tre satisfait du r√©sultat, claquer la porte de votre boulot et partir √©lever des brebis dans les Pyr√©n√©es.</p>
<p>C'est l√† qu'interviennent les <em>springs</em>.</p>
<p>Une animation spring vous expose en g√©n√©ral deux param√®tres : <code>tension</code> et <code>friction</code> (ou <code>stiffness</code>, pour rigidit√© &#x26; <code>damping</code>, pour amortissement, selon les syst√®mes). Ce sont des valeurs logiques dans ce contexte, puisqu'elles viennent des lois de la physique (big up Newton).</p>
<p>Quelques exemples sur les <a href="http://facebook.github.io/rebound-js/examples/">demos de Rebound.js</a> peuvent vous aider √† visualiser ce que repr√©sentent ces param√®tres au sein de l'animation.</p>
<p>Afin d'ob√©ir √† des lois "logiques" de la physique, l'animation spring doit prendre en compte √† chaque <code>tick</code> non seulement la valeur actuelle et celle d'arriv√©e mais aussi sa rapidit√© actuelle : c'est ce qui lui permet d'encha√Æner naturellement les animations.</p>
<p>√Ä chaque frame, il va ex√©cuter la fonction suivante pour d√©terminer la <code>value</code> et <code>velocity</code> √† venir (note : ce c√¥t√© est une simplification du code utilis√© par <a href="https://github.com/chenglou/react-motion">react-motion</a>).</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> unitOfTime = <span class="hljs-number">1</span> / <span class="hljs-number">60</span> <span class="hljs-comment">// the number of seconds in a frame</span>
<span class="hljs-keyword">const</span> precision = <span class="hljs-number">0.01</span>

<span class="hljs-keyword">const</span> step = (
  lastValue,
  lastVelocity,
  toValue,
  stiffness,
  damping
) => {
  <span class="hljs-keyword">const</span> spring = -stiffness * (lastValue - toValue)
  <span class="hljs-keyword">const</span> damper = -damping * lastVelocity

  <span class="hljs-keyword">const</span> all = spring + damper
  <span class="hljs-keyword">const</span> nextVelocity = lastVelocity + all * unitOfTime
  <span class="hljs-keyword">const</span> nextValue = lastValue + nextVelocity * unitOfTime

  <span class="hljs-keyword">const</span> shouldRest = <span class="hljs-built_in">Math</span>.abs(nextVelocity) &#x3C; precision &#x26;&#x26; <span class="hljs-built_in">Math</span>.abs(nextValue - toValue) &#x3C; precision

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">velocity</span>: shouldRest ? <span class="hljs-number">0</span> : nextVelocity,
    <span class="hljs-attr">value</span>: shouldRest ? toValue : nextValue,
  }
}</code></pre>
<p>Ensuite, une simple fonction <code>spring</code> qui reproduit √† peu de choses pr√®s la m√©canique de notre <code>createTransition</code> vu plus haut :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> spring = <span class="hljs-function">(<span class="hljs-params">{ stiffness = <span class="hljs-number">180</span>, damping = <span class="hljs-number">12</span>, onRest = ((</span>) =></span> {}), toValue }) => <span class="hljs-function"><span class="hljs-params">onUpdate</span> =></span> {
  <span class="hljs-keyword">let</span> frame
  <span class="hljs-keyword">const</span> tick = <span class="hljs-function">(<span class="hljs-params">curr</span>) =></span> {
    <span class="hljs-comment">// on calcule l'√©tat</span>
    <span class="hljs-keyword">const</span> { velocity, value } = step(curr.value, curr.velocity, toValue, stiffness, damping)
    onUpdate({ velocity, value })
    <span class="hljs-comment">// si l'animation n'est pas termin√©e</span>
    <span class="hljs-keyword">if</span>(velocity !== <span class="hljs-number">0</span> || value !== toValue) {
      <span class="hljs-comment">// on programme la prochaine frame</span>
      frame = requestAnimationFrame(<span class="hljs-function"><span class="hljs-params">()</span> =></span> tick({ value, velocity }))
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-comment">// sinon on pr√©vient que l'animation est au repos</span>
      onRest()
    }
  }
  <span class="hljs-keyword">return</span> {
    <span class="hljs-comment">// afin de permettre aux animations de s'encha√Æner, la fonction `start` prend l'√©tat actuel de la valeur</span>
    start: <span class="hljs-function">(<span class="hljs-params">value</span>) =></span> {
      frame = requestAnimationFrame(<span class="hljs-function"><span class="hljs-params">()</span> =></span> tick(value))
    },
    <span class="hljs-attr">stop</span>: <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
      cancelAnimationFrame(frame)
    },
  }
}</code></pre>
<p>Il nous reste √† cr√©er une classe "observable" <code>Value</code> qui conserve l'√©tat et l'animation active. Cela permet de stopper l'animation en cours avant de lancer la suivante lorsque cela arrive.</p>
<pre><code class="hljs language-js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Value</span> </span>{
  <span class="hljs-keyword">constructor</span>(initialValue) {
    <span class="hljs-keyword">this</span>.value = {
      <span class="hljs-attr">value</span>: initialValue,
      <span class="hljs-attr">velocity</span>: <span class="hljs-number">0</span>,
    }
    <span class="hljs-keyword">this</span>.listeners = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()
    <span class="hljs-keyword">this</span>.animation = <span class="hljs-literal">null</span>
  }
  addListener(listener) {
    <span class="hljs-keyword">this</span>.listeners.add(listener)
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
      <span class="hljs-keyword">this</span>.listeners.delete(listener)
    }
  }
  updateValue(nextValue) {
    <span class="hljs-keyword">this</span>.value = nextValue
    <span class="hljs-keyword">this</span>.listeners.forEach(<span class="hljs-function"><span class="hljs-params">listener</span> =></span> listener(<span class="hljs-keyword">this</span>.value.value))
  }
  animate(animation) {
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.animation) {
      <span class="hljs-keyword">this</span>.animation.stop()
    }
    <span class="hljs-keyword">this</span>.animation = animation(<span class="hljs-function">(<span class="hljs-params">v</span>) =></span> <span class="hljs-keyword">this</span>.updateValue(v))
    <span class="hljs-keyword">this</span>.animation.start(<span class="hljs-keyword">this</span>.value)
  }
}</code></pre>
<p>Et voil√†, vous avez une animation :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> scale = <span class="hljs-keyword">new</span> Value(<span class="hljs-number">1</span>)

scale.addListener(<span class="hljs-function"><span class="hljs-params">value</span> =></span> myElement.style.transform = <span class="hljs-string">`scale(<span class="hljs-subst">${ value }</span>)`</span>)

myElement.onmousedown = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
  scale.animate(spring({ <span class="hljs-attr">toValue</span>: <span class="hljs-number">2</span> }))
}

myElement.onmouseup = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
  scale.animate(spring({ <span class="hljs-attr">toValue</span>: <span class="hljs-number">1</span> }))
}</code></pre>
<iframe width="100%" height="300" src="//jsfiddle.net/bloodyowl/36d0nc7r/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<p>Les animations spring ont de nombreux avantages. Elles vous permettent d'utiliser un vocabulaire coh√©rent avec celui du mouvement. Elles vous permettent aussi de g√©rer de mani√®re intelligente le timing de vos animations : plus besoin de <em>hardcoder</em> le temps qu'elles doivent mettre ; seule la description du mouvement compte. Aussi, vous n'avez plus √† vous soucier des changements de valeurs et de ses cons√©quences sur la coh√©rence globale d'une animation : le syst√®me les g√®re et s'adapte.</p>
<p>Il existe plusieurs solutions pour les g√©rer :</p>
<ul>
<li>JS: <a href="http://facebook.github.io/rebound-js/examples/">Rebound.js</a></li>
<li>JS sp√©cifique React: <a href="https://github.com/chenglou/react-motion">react-motion</a></li>
<li>JS sp√©cifique React, utilis√© par react-native: <a href="https://github.com/animatedjs/animated">Animated</a></li>
<li>Java (Android): <a href="http://facebook.github.io/rebound/">Rebound</a></li>
<li>Objective-C/Swift (iOS): <a href="https://github.com/facebook/pop">Pop</a></li>
</ul>
<p>La team WebKit <a href="https://twitter.com/webkit/status/748573524734812161">a √©galement propos√©</a> l'ajout d'une fonction <code>spring</code> √† CSS mais la discussion stagne (√† tester dans Safari Technology Preview).</p>
<p>En esp√©rant que √ßa vous donne des id√©es d'animations cool √† faire.</p>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/css/animations/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/animations/</guid><pubDate>Tue, 20 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[On lance un podcast]]></title><description><![CDATA[<p>√áa fait quelques mois qu'on en parle au sein de l'√©quipe de contributeurs, et c'est un projet qui a mis du temps √† se d√©velopper mais le voil√† enfin.</p>
<p>On a pass√© pas mal de temps √† pr√©parer le format, √† se motiver √† le faire et √† acheter le mat√©riel.</p>
<p>Ce premier √©pisode est encore un peu maladroit (on apprend sur le tas) mais on a bon espoir de l'am√©liorer avec le temps.</p>
<p>Cet √©pisode 1 est intitul√© ‚Ä¶</p>
<h2 id="en-beta-emb√™tant"><a href="#en-beta-emb%C3%AAtant" class="phenomic-HeadingAnchor">#</a><em>En beta, emb√™tant</em></h2>
<p>Y participent :</p>
<ul>
<li>Maxime alias <a href="https://twitter.com/MoOx">MoOx</a></li>
<li>Mathieu alias <a href="https://twitter.com/Zoontek">Zoontek</a></li>
<li>Georges alias <a href="https://twitter.com/skinnyfoetusboy">skinnyfoetusboy</a></li>
<li>Matthias alias <a href="https://twitter.com/bloodyowl">bloodyowl</a></li>
</ul>
<p>et on vous y parle de :</p>
<ul>
<li>Yarn, le client NPM</li>
<li>Webpack 2</li>
<li>dotCSS, un retour sur chaque conf√©rence</li>
<li>Sketch 41</li>
<li>Origami Studio</li>
</ul>
<p>√âvidemment on digresse SANS ARR√äT, √ßa manque de structure et le son a quelques soucis, on vous demande d'√™tre indulgents l√†-dessus : faut bien commencer quelque part üò∂</p>
<p>Faites-nous part de vos retours pour qu'on puisse am√©liorer ce podcast √† chaque √©pisode.</p>
<p>On esp√®re que √ßa vous plaira !</p>
<p>Bisous.</p>
<iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/297382854&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
<h3 id="edit"><a href="#edit" class="phenomic-HeadingAnchor">#</a>Edit:</h3>
<ul>
<li>Le <a href="http://feeds.soundcloud.com/users/soundcloud:users:273901232/sounds.rss">RSS</a></li>
<li>Sur iTunes : <a href="https://itunes.apple.com/fr/podcast/putain-de-code-!/id1185311825?l=en&#x26;mt=2">Putain de Code</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/podcast/1/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/podcast/1/</guid><pubDate>Mon, 12 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[2 ans avec React, Babel, Webpack et cie]]></title><description><![CDATA[<p>Depuis fin 2014, et un virage radical vers l'√©cosyst√®me React, j'ai eu
l'occasion de mener plusieurs projets (applis pros, mobiles/hybrides, sites
web...) sur cette stack : React, Webpack, Babel, npm...</p>
<p>Ces deux ann√©es ont √©t√© tr√®s prolifiques dans la communaut√© JavaScript et React,
le tooling est encore parfois exotique, mais il se stabilise et de gros progr√®s
ont √©t√© faits sur la documentation.</p>
<p><strong>Nous disposons maintenant d'un √©cosyst√®me incroyablement riche et dynamique,
et d'un paradigme "universel" pour construire les applications de demain, web ou
natives.</strong></p>
<p>React est la biblioth√®que de facto pour ce type d'applications, mais on peut le
remplacer assez facilement par une alternative comme
<a href="https://preactjs.com/">Preact</a> ou <a href="http://infernojs.org/">Inferno</a>, donc toutes
les connaissances acquises sur cette biblioth√®que <strong>et son √©cosyst√®me</strong> sont
exploitables ailleurs dans la communaut√© JavaScript.</p>
<p>Voici un petit recap de cette stack magique :)</p>
<h2 id="tldr"><a href="#tldr" class="phenomic-HeadingAnchor">#</a>TL;DR;</h2>
<p>React en lui-m√™me est le plus simple √† appr√©hender dans cette stack.</p>
<p>Son √©cosyst√®me, riche et √©volutif, l'est moins.</p>
<h2 id="babeles2015"><a href="#babeles2015" class="phenomic-HeadingAnchor">#</a>Babel/ES2015</h2>
<p><img src="/assets/babel.png"></p>
<h3 id="use-next-generation-javascript-today"><a href="#use-next-generation-javascript-today" class="phenomic-HeadingAnchor">#</a>Use next generation JavaScript, today.</h3>
<p>La communaut√© JavaScript a massivement adopt√© le transpileur Babel, qui permet
de coder en JavaScript version ES2015 ou sup√©rieure puis de convertir en code
compatible avec les navigateurs du march√©.</p>
<p>Pour apprendre ES2015 et plus :</p>
<ul>
<li><a href="http://putaindecode.io/fr/tag/ES6">articles sur putaindecode.io</a></li>
<li>exercices en ligne : <a href="http://es6katas.org">es6katas.org</a></li>
<li>tutorial Babel : <a href="http://babeljs.io/docs/learn-es2015">babeljs.io</a>  </li>
<li>comparaisons ES5/ES2015 :
<a href="http://es6-features.org/#BlockScopedVariables">es6-features.org</a></li>
</ul>
<p>Vous pouvez tr√®s bien faire de l'ES2015 sans Babel, puisque <a href="https://kangax.github.io/compat-table/es6/">les navigateurs
modernes en supportent une grande
partie</a>, mais le support est in√©gal,
d'o√π l'id√©e d'utiliser un transpileur comme Babel qui convertit en ES5.</p>
<p>Le format JSX, est devenu un standard qui peut simplifier le d√©veloppement :</p>
<ul>
<li>il permet de centraliser la pr√©sentation et la logique d'un composant au m√™me
endroit</li>
<li>d'utiliser une syntaxe XML-like plus rigoureuse, mais b√©n√©fique</li>
<li>d'utiliser du JavaScript pur au lieu d'un pseudo-langage comme on trouve dans
les moteurs de template habituels</li>
</ul>
<p>√áa peut para√Ætre d√©routant au d√©but mais √ßa rentre vite !</p>
<p>Plus d'infos sur JSX dans <a href="https://facebook.github.io/react/docs/introducing-jsx.html">Introducing
JSX</a> sur la doc
React.</p>
<h2 id="npm"><a href="#npm" class="phenomic-HeadingAnchor">#</a>npm</h2>
<p><img src="/assets/npm.png"></p>
<p>Quel que soit votre besoin, il y a s√ªrement d√©j√† un module npm pour √ßa :)</p>
<p>Pour bien choisir vos packages, regardez l'activit√© du projet sur GitHub
(commits, issues, tests, contributeurs...)</p>
<h3 id="moins-de-code-cest-moins-de-bugs"><a href="#moins-de-code-cest-moins-de-bugs" class="phenomic-HeadingAnchor">#</a>Moins de code c'est moins de bugs</h3>
<p>Votre appli doit utiliser un maximum de code externe, qui est d√©j√† valid√©,
test√©... s√©par√©ment. Publiez un maximum de modules ind√©pendants, en open source
si possible, et utilisables hors-contexte (<a href="https://addyosmani.com/first/">FIRST
principle</a>).</p>
<p>Ceci implique de suivre les corrections/√©volutions des dits modules et
d'utiliser le <a href="https://docs.npmjs.com/getting-started/semantic-versioning">semantic
versioning</a> √† bon
escient.</p>
<p>NB: Dans sa lanc√©e open-source, Facebook vient de publier une alternative au CLI
npm : <a href="http://yarnpkg.org">yarn</a> plus rapide, fiable et s√©curis√©.</p>
<h2 id="webpack"><a href="#webpack" class="phenomic-HeadingAnchor">#</a>Webpack</h2>
<p><img src="/assets/webpack.png"></p>
<h3 id="le-saviez-vous-"><a href="#le-saviez-vous-" class="phenomic-HeadingAnchor">#</a>Le saviez-vous ?</h3>
<p>Webpack a co√ªt√© aux devs <strong>2.312.533 heures</strong> en 2015. Par jour.</p>
<h3 id="un-grand-pouvoir-implique-de-grandes-responsabilit√©s"><a href="#un-grand-pouvoir-implique-de-grandes-responsabilit%C3%A9s" class="phenomic-HeadingAnchor">#</a>Un grand pouvoir implique de grandes responsabilit√©s</h3>
<p>Webpack est puissant, il remplace browserify ou vos multiples t√¢ches grunt,
gulp, blurp... qui g√©raient votre pipeline d'assets.</p>
<p>√Ä partir du point d'entr√©e de votre application uniquement, par exemple
<code>index.js</code>, il est capable de servir et bundler toutes les d√©pendances (code,
images, CSS...) de votre projet automatiquement, gr√¢ce aux nombreux
<a href="https://webpack.github.io/docs/loaders.html">loaders</a>.</p>
<p>Pour cela, les assets doivent √™tre correctement d√©clar√©s dans le code :</p>
<pre><code class="hljs language-js"><span class="hljs-comment">// require some CSS</span>
<span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./styles.css'</span>
<span class="hljs-keyword">const</span> ex1 = <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{</span> <span class="hljs-attr">styles.title</span> }></span>title<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>

<span class="hljs-comment">// require an image</span>
<span class="hljs-keyword">import</span> logo <span class="hljs-keyword">from</span> <span class="hljs-string">'./logo.png'</span>
<span class="hljs-keyword">const</span> img = <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{</span> <span class="hljs-attr">logo</span> } /></span></span></code></pre>
<p>Et la c√©l√®bre <a href="https://webpack.js.org/configuration/">config de webpack</a> permet
de tuner votre build √† tous les niveaux.</p>
<p>Plus de d√©tails sur Webpack sur <a href="http://putaindecode.io/fr/tag/webpack">les articles Putain de code !
d√©di√©s</a>.</p>
<h2 id="css"><a href="#css" class="phenomic-HeadingAnchor">#</a>CSS</h2>
<p><img src="/assets/css-modules.png"></p>
<h3 id="le-saviez-vous--1"><a href="#le-saviez-vous--1" class="phenomic-HeadingAnchor">#</a>Le saviez-vous ?</h3>
<p>Le CSS est un sport de haut niveau.</p>
<h3 id="css-in-2016"><a href="#css-in-2016" class="phenomic-HeadingAnchor">#</a>CSS in 2016</h3>
<p>Selon la complexit√© de vos designs, le CSS peut √™tre ce qui prend le plus de
temps, entre l'int√©gration, le responsive, et les animations.</p>
<p>Et la qualit√© et la modularit√© du CSS est essentielle pour la maintenabilit√© des
applications.</p>
<p>Pour cr√©er des composants r√©utilisables nous pouvons maintenant utiliser les
<a href="https://github.com/css-modules/css-modules">CSS modules</a>, qui ont l'avantage
d'√™tre du CSS classique, mais d'√™tre scop√©s aux composants, et, accessibles
depuis le JavaScript (plus de CSS global). Et le <a href="https://youtu.be/WyFGfMFjfH4?t=26m23s">CSS in
JS</a> peut compl√©ter/remplacer si besoin
pour les cas les plus dynamiques.</p>
<p>A d√©faut, vous pouvez toujours utiliser du CSS global si vous respectez
scrupuleusement les <a href="http://putaindecode.io/fr/articles/css/bem/">conventions
BEM</a>. D√©couvrez d'autres <a href="http://putaindecode.io/fr/tag/css">articles
d√©di√©s au CSS sur putaindecode.io</a>.</p>
<p>Il existe plusieurs biblioth√®ques de composants UI assez fournies pour React :</p>
<ul>
<li><a href="http://jxnblk.com/rebass/">rebass</a></li>
<li><a href="http://ant.design">ant.design</a></li>
<li><a href="http://semantic-ui.com">semantic-ui</a></li>
<li><a href="http://react-toolbox.com/">react-toolbox</a></li>
<li><a href="http://blueprintjs.com">blueprintjs</a></li>
</ul>
<p>Et voici un article recensant des <a href="http://davidwells.io/19-open-source-react-component-libraries-to-use-in-your-next-project/">librairies de composants React
open-source</a>.</p>
<h2 id="react--learn-once-run-everywhere"><a href="#react--learn-once-run-everywhere" class="phenomic-HeadingAnchor">#</a>React : Learn once, run everywhere</h2>
<p><img src="/assets/react.png"></p>
<p>Plus qu'une biblioth√®que ou un framework, React est un paradigme de
programmation d'interfaces utilisateurs, qui permet d'adresser de nombreuses
plateformes, avec toujours du code React "standard".</p>
<p>Th√©oriquement, une application cod√©e en React est capable de produire n'importe
quel output, par exemple du HTML pour le web, du natif avec
<a href="https://facebook.github.io/react-native/">react-native</a>, du
<a href="https://github.com/ProjectSeptemberInc/gl-react">WebGL</a>, du
<a href="https://github.com/Yomguithereal/react-blessed">terminal</a>, de la
<a href="https://github.com/FormidableLabs/react-music">musique</a>...</p>
<p>Et pour toutes ces targets, une convention g√©n√©rale s'applique :</p>
<pre><code style="font-size:2em">ui = f(state)</pre></code>
<p>√Ä tout moment, √† partir un <code>state</code> donn√©, une application ou un composant React
est capable de se "render" correctement dans l'√©tat d√©sir√©.</p>
<p>Le fonctionnement interne est donc plut√¥t straightforward, les composants se
passent simplement des <code>props</code> (valeurs et callbacks) de parent √† enfant, et
certains composants peuvent avoir un <code>state</code> local qui, une fois modifi√©,
d√©clenchera un re-render du composant et de ses descendants.</p>
<p>Les composants doivent √™tre simples, focus, composables.</p>
<pre><code class="hljs language-js">&#x3C;Toolbar>
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">Icon</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"success"</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{</span> <span class="hljs-attr">onClickSuccess</span> } /></span>
  </span>&#x3C;Menu>
    &#x3C;Icon name="warning" onClick={ onClickWarning } />
    &#x3C;Icon name="error" onClick={ onClickError } />
  &#x3C;/Menu>
&#x3C;/Toolbar></code></pre>
<p>Au niveau performances, React ne fait pas de miracles malgr√© le
<a href="http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/">virtual-dom</a>;</p>
<p>√Ä chaque fois qu'un composant re√ßoit de nouvelles props ou modifie son state,
React appelle la m√©thode <code>render</code> de ce dernier ainsi que de ces descendants.
M√™me s'il ne modifie pas le DOM, le fait de comparer les deux arbres retourn√©s
par render peut s'av√©rer co√ªteux si votre composant pr√©sente beaucoup de
contenu. Heureusement, React permet aux d√©veloppeurs d'intervenir avant le
render et l'annuler s'il n'est pas n√©cessaire avec <code>shouldComponentUpdate</code>.</p>
<p>Plus d'<a href="http://putaindecode.io/fr/tag/react">articles sur React sur putain de
code</a></p>
<h2 id="redux"><a href="#redux" class="phenomic-HeadingAnchor">#</a>Redux</h2>
<p><a href="https://css-tricks.com/learning-react-redux/"><img src="react-redux-csstricks.png" alt="React standard VS redux architecture (from
css-tricks.com)"></a></p>
<p>Pour les applications plus complexes, <a href="http://reduxjs.org">redux</a> va g√®rer
l'√©tat de l'application de mani√®re globale et externe aux composants,
standardiser les √©v√®nements (actions), g√©rer les re-renders, et permettre
d'aller vers des <a href="https://github.com/markerikson/redux-ecosystem-links">interactions plus
avanc√©es</a>.</p>
<p>Id√©alement, <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.j9rp2pr98">tous vos composants sont
dumbs</a>
et votre gestionnaire de state (par exemple redux) va g√©rer l'intelligence de
l'application et les re-renders de mani√®re d√©coupl√©e et optimis√©e.</p>
<p>Plus d'articles sur redux sur Putain de code ! :
<a href="http://putaindecode.io/fr/tag/redux/">http://putaindecode.io/fr/tag/redux/</a></p>
<h2 id="tips"><a href="#tips" class="phenomic-HeadingAnchor">#</a>Tips</h2>
<h3 id="storybook"><a href="#storybook" class="phenomic-HeadingAnchor">#</a>Storybook</h3>
<p>Utiliser un outil comme
<a href="https://github.com/storybooks/react-storybook">storybook</a> permet de travailler
sur les composants hors-contexte, de pouvoir les visualiser dans diff√©rents
√©tats pendant que vous travaillez... et ainsi d'avoir une base saine de
composants r√©utilisables.</p>
<p>Votre biblioth√®que de composants peut m√™me √™tre un projet √† part, que vous
importerez dans vos diff√©rentes applications. Par exemple, Cloudflare publie
s√©par√©ment <a href="https://github.com/cloudflare/cf-ui">tous ses composants UI r√©utilisables</a>.</p>
<h3 id="composition"><a href="#composition" class="phenomic-HeadingAnchor">#</a>Composition</h3>
<p>Utilisez au maximum la composition de composants React pour garder des
composants simples et r√©utilisables.</p>
<p>Plus de d√©tails sur le <a href="http://putaindecode.io/fr/articles/js/react/higher-order-component">pattern "higher order
components"</a></p>
<h3 id="nvm"><a href="#nvm" class="phenomic-HeadingAnchor">#</a>nvm</h3>
<p>Utilisez <a href="https://github.com/creationix/nvm">Node Version Manager</a> aka nvm qui
permet de g√©rer plusieurs environnements Node.js sur une m√™me machine.
Indispensable pour travailler sur plusieurs projets.</p>
<h3 id="learning-curve"><a href="#learning-curve" class="phenomic-HeadingAnchor">#</a>Learning curve</h3>
<p>Concentrez-vous sur une techno/outil √† la fois et n'utilisez pas ce dont vous
n'avez pas encore besoin.</p>
<blockquote>
<p>Make it work, make it right, make it fast.</p>
</blockquote>
<h2 id="comment-d√©marrer-"><a href="#comment-d%C3%A9marrer-" class="phenomic-HeadingAnchor">#</a>Comment d√©marrer ?</h2>
<p>Pour cr√©er une application, le plus simple est d'utiliser
<a href="https://github.com/facebookincubator/create-react-app">create-react-app</a>.</p>
<p>Si c'est pour cr√©er un composant React que vous allez publier, alors
<a href="https://github.com/insin/nwb">nwb</a> est plus adapt√©.</p>
<p>Pour cr√©er un site web comme <a href="http://putaindecode.io">putaindecode.io</a> vous
pouvez utiliser un g√©n√©rateur de site statique comme
<a href="http://phenomic.io">phenomic.io</a>.</p>
<h2 id="pourquoi-cest-si-complexe-"><a href="#pourquoi-cest-si-complexe-" class="phenomic-HeadingAnchor">#</a>Pourquoi c'est si complexe ?</h2>
<p>Cette stack, qui peut para√Ætre lourde en outillage, permet de cr√©er des apps
riches, performantes, testables, √©volutives, multi-plateformes.</p>
<p>Une fois l'outillage en place et assimil√©, la productivit√© est excellente
(ES2015, npm, tests, developer experience, dev/build/deploy...).</p>
<p>Dans la plupart des cas, les boilerplates cit√©s ci-dessus vous fournissent tout
le n√©cessaire.</p>
<h2 id="must-read-and-watch"><a href="#must-read-and-watch" class="phenomic-HeadingAnchor">#</a>Must read and watch</h2>
<ul>
<li><a href="https://facebook.github.io/react/tutorial/tutorial.html">Intro to React</a></li>
<li>Free videos
<a href="https://egghead.io/courses/react-fundamentals">egghead.io/react-fundamentals</a></li>
<li>Free videos
<a href="https://egghead.io/courses/getting-started-with-redux">egghead.io/getting-started-with-redux</a></li>
<li><a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367#.8swndjba2">You might not need
redux</a></li>
<li><a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.v583rvea1">Smart VS dumb
components</a></li>
<li><a href="http://putaindecode.io/fr/articles/js/react/higher-order-component/">Les patterns Provider &#x26; Higher-Order Component avec
React</a></li>
<li><a href="https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.t74wxicu0">React higher components in
depth</a></li>
</ul>
<h2 id="liens"><a href="#liens" class="phenomic-HeadingAnchor">#</a>Liens</h2>
<blockquote>
<p>Quelques p√©pites</p>
</blockquote>
<ul>
<li><a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> :
CLI complet pour faire une application react</li>
<li><a href="https://github.com/insin/nwb">nwb</a> : CLI complet faire un composant react
(dev,build,demo,tests,npm...)</li>
<li><a href="https://github.com/andreypopp/react-css-components">react-css-components</a> :
cr√©er des composants React √† partir de CSS</li>
<li><a href="https://github.com/markerikson/redux-ecosystem-links">redux-ecosystem-links</a></li>
<li><a href="https://docs.npmjs.com/misc/scripts">npm scripts docs</a></li>
<li><a href="https://github.com/ngokevin/aframe-react">aframe-react</a> : Build VR
experiences with A-Frame and React</li>
<li><a href="http://reactpatterns.com">reactpatterns.com</a> : quelques patterns react</li>
<li><a href="http://phenomic.io">phenomic.io</a> : react-based static site generator</li>
<li><a href="http://jsbooks.revolunet.com">jsbooks.revolunet.com</a> : free JavaScript
ebooks</li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/frontend/2016-2-ans-avec-react-babel-webpack-et-cie/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/frontend/2016-2-ans-avec-react-babel-webpack-et-cie/</guid><pubDate>Thu, 01 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Votre premi√®re app React Native]]></title><description><![CDATA[<p>Cela fait d√©j√† plus d'un an que Facebook a publi√© la premi√®re version de React Native.
Longtemps consid√©r√© comme une exp√©rimentation sympathique (apr√®s tout, il est n√© lors d'un hackathon), un cycle de release soutenu d'une version majeure toutes les 2 semaines a fait qu'aujourd'hui l'√©cosyst√®me est suffisamment riche et stable pour d√©ployer une app iOS et Android en production.</p>
<h2 id="quels-probl√®mes-avec-les-solutions-hybrides-"><a href="#quels-probl%C3%A8mes-avec-les-solutions-hybrides-" class="phenomic-HeadingAnchor">#</a>Quels probl√®mes avec les solutions hybrides¬†?</h2>
<p>Des solutions pour d√©velopper une application mobile multiplateforme en JS existent d√©j√† : je pense notamment √† <a href="https://cordova.apache.org/">Cordova</a> ou √† son superset <a href="http://ionicframework.com/">Ionic</a>. Con√ßu autour d'une webview syst√®me (un navigateur embedded - Safari sur iOS, Chrome sur Android) affich√©e en plein √©cran, vous utilisez des technologies web classiques : HTML, CSS et JS. Il est possible d'installer des plugins afin d'enrichir le moteur JavaScript avec de nouvelles APIs en plus des APIs navigateur.
Ainsi, <code>cordova-plugin-contacts</code> permet d'acc√©der au carnet d'adresses du smartphone, <code>cordova-plugin-vibration</code> permet de faire vibrer celui-ci, etc.</p>
<p>Le probl√®me, c'est que si l'utilisation de plugins permet de faire le pont avec le code natif (un message est envoy√© de la partie JS √† la partie Objective-C / Java, qui l'ex√©cute de son c√¥t√© et renvoie le r√©sultat au JS), l'UI de l'application n'utilise elle pas du tout le layout natif des OS mobiles. Les performances et le look'n'feel de celle-ci seront donc √©quivalente √† une app web, et non une app mobile.</p>
<p>Avec React Native, point de navigateur embedded, de HTML ou de CSS : vous devez composer vos interfaces √† l'aide de composants React qui font appel au layout natif de la plateforme. Un exemple simple : <code>&#x3C;View></code> (qui est l'√©quivalent d'une <code>&#x3C;div></code> HTML) communique via un pont JS &#x3C;-> Objective-C / Java pour contr√¥ler une UIView (sur iOS) ou une android.view. Les performances de l'UI sont donc quasi similaires aux performances natives.</p>
<h2 id="d√©couverte-de-lenvironnement-de-dev"><a href="#d%C3%A9couverte-de-lenvironnement-de-dev" class="phenomic-HeadingAnchor">#</a>D√©couverte de l'environnement de dev</h2>
<p>Fatigu√©s par JavaScript et son tooling un peu trop fourni¬†? Rassurez-vous : vous n'avez strictement rien √† configurer pour commencer √† utiliser React Native. Vous disposez out-of-the-box d'un packager Babel et d'un <a href="https://github.com/facebook/react-native/tree/master/babel-preset">preset custom</a> qui int√®gre les fonctionnalit√©s de ES2015, mais √©galement le support de React / JSX (encore heureux), de <a href="https://flowtype.org/">Flow</a> et d'autres helpers bienvenus tels que <code>async / await</code>.</p>
<p>En bons passionn√©s de bi√®re, nous allons r√©aliser ensemble une app qui requ√™te la <a href="https://punkapi.com/">PunkAPI</a> (faites la demande d'une cl√© API via le formulaire pr√©vu √† cet effet).</p>
<p>Je vous renvoie √† la <a href="https://facebook.github.io/react-native/docs/getting-started.html">documentation officielle</a> pour ce qui est de l'installation des d√©pendances (celles-ci variant selon votre OS et l'OS cible).
Xcode / Android Studio, node et watchman √©tant install√©s, ouvrez un terminal et initiez le projet :</p>
<pre><code>npm install -g react-native-cli
react-native init PutainDeBiere
</code></pre>
<p>Une fois le projet initialis√©, le CLI vous informe de la fa√ßon dont lancer votre application : faites-le dans la foul√©e. En ce qui me concerne, je d√©veloppe pour iOS.</p>
<pre><code class="hljs language-bash">react-native run-ios</code></pre>
<p>Selon votre plateforme cible, ouvrez <code>index.ios.js</code> ou <code>index.android.js</code> dans votre √©diteur pr√©f√©r√©. Modifiez quelque peu le texte et rafraichissez votre app via <code>Command‚åò + R</code>, deux pressions sur la touche <code>R</code> (√©mulateur Android).</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>

<span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">import</span> {
  AppRegistry,
  StyleSheet,
  Text,
  View
} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-native'</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">View</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{styles.container}</span>></span>
        </span>&#x3C;Text style={styles.welcome}>
          Welcome to PutainDeBiere!
        &#x3C;/Text><span class="xml">
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">View</span>></span></span>
    )
  }
}

<span class="hljs-keyword">const</span> styles = StyleSheet.create({
  <span class="hljs-attr">container</span>: {
    <span class="hljs-attr">flex</span>: <span class="hljs-number">1</span>,
    <span class="hljs-attr">justifyContent</span>: <span class="hljs-string">'center'</span>,
    <span class="hljs-attr">alignItems</span>: <span class="hljs-string">'center'</span>,
    <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">'#F5FCFF'</span>,
  },
  <span class="hljs-attr">welcome</span>: {
    <span class="hljs-attr">fontSize</span>: <span class="hljs-number">20</span>,
    <span class="hljs-attr">textAlign</span>: <span class="hljs-string">'center'</span>,
    <span class="hljs-attr">margin</span>: <span class="hljs-number">10</span>,
  },
})

AppRegistry.registerComponent(<span class="hljs-string">'PutainDeBiere'</span>, () => App)</code></pre>
<figure>
  <img src="welcome.png" alt="welcome PutainDeBiere preview" />
  <figcaption>Une bien jolie premi√®re √©tape</figcaption>
</figure>
<h2 id="r√©cup√©ration-des-donn√©es"><a href="#r%C3%A9cup%C3%A9ration-des-donn%C3%A9es" class="phenomic-HeadingAnchor">#</a>R√©cup√©ration des donn√©es</h2>
<p>Afin de requ√™ter notre API, React Native nous offre plusieurs plusieurs solutions: <code>fetch()</code> ou <code>XMLHttpRequest</code>. Tenez vous en <strong>uniquement</strong> √† l'utilisation de la premi√®re, la deuxi√®me n'√©tant pr√©sente que pour assurer une compatibilit√© avec des librairies tierces.</p>
<p><em>/!\ Notre cl√© API doit √™tre encod√©e en base64. La function <code>btoa()</code> n'√©tant pas disponible en React Native, il est n√©cessaire d'installer une d√©pendance.</em></p>
<pre><code class="hljs language-bash">npm install --save base-64</code></pre>
<p>Histoire de s√©parer notre logique API de nos composants React, nous allons cr√©er un fichier nomm√© <code>punkapi.js</code> √† la racine de notre projet.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> base64 <span class="hljs-keyword">from</span> <span class="hljs-string">'base-64'</span> <span class="hljs-comment">// importez la d√©pendance tout juste install√©e</span>

<span class="hljs-keyword">const</span> rootEndpoint = <span class="hljs-string">'https://punkapi.com/api/v1'</span>
<span class="hljs-comment">// pour simplifier la compr√©hension de ce tuto, nous renseignons la cl√© API "en dur"</span>
<span class="hljs-comment">// ne faites jamais cela au sein de vos projets (voir http://12factor.net/fr/config)</span>
<span class="hljs-keyword">const</span> punkApiKey = <span class="hljs-string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>
<span class="hljs-keyword">const</span> password = <span class="hljs-string">''</span> <span class="hljs-comment">// la punk API n'utilise aucun mot de passe</span>
<span class="hljs-keyword">const</span> authBase64 = base64.encode(<span class="hljs-string">`<span class="hljs-subst">${punkApiKey}</span>:<span class="hljs-subst">${password}</span>`</span>)

<span class="hljs-keyword">const</span> headers = {
  <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'application/json'</span>,
  <span class="hljs-string">'Accept'</span>: <span class="hljs-string">'application/json'</span>,
  <span class="hljs-string">'Authorization'</span>: <span class="hljs-string">`Basic <span class="hljs-subst">${authBase64}</span>`</span> <span class="hljs-comment">// HTTP basic auth</span>
}

<span class="hljs-comment">// retourne une recette de bi√®re au hasard</span>
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getRandomBrewdog = <span class="hljs-function"><span class="hljs-params">()</span> =></span>
  fetch(<span class="hljs-string">`<span class="hljs-subst">${rootEndpoint}</span>/beers/random`</span>, { headers })
    .then(<span class="hljs-function">(<span class="hljs-params">{status, json}</span>) =></span> {
      <span class="hljs-keyword">if</span> (status !== <span class="hljs-number">200</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`API answered with status code <span class="hljs-subst">${status}</span>`</span>) <span class="hljs-comment">// gestion du status code HTTP</span>
      <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> json() <span class="hljs-comment">// on parse la r√©ponse en JSON</span>
    })</code></pre>
<p>Nous allons maintenant modifier notre composant <code>&#x3C;App></code> afin de faire une requ√™te simple d'une bi√®re au hasard juste avant le montage de celui-ci.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { getRandomBrewdog } <span class="hljs-keyword">from</span> <span class="hljs-string">'./punkapi'</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  componentWillMount() {
    getRandomBrewdog() <span class="hljs-comment">// fetch() retourne une Promise</span>
      .then(<span class="hljs-function"><span class="hljs-params">json</span> =></span> <span class="hljs-built_in">console</span>.log(json))
      .catch(<span class="hljs-function"><span class="hljs-params">error</span> =></span> <span class="hljs-built_in">console</span>.error(error))
  }

  ‚Ä¶
}</code></pre>
<p>Vous apercevez la pr√©sence d'un appel √† <code>console.log()</code>. Pour y acc√©der, rien de plus simple: pressez <code>Command‚åò + D</code> au sein de l'√©mulateur iOS, ou appuyez sur le bouton <code>Menu</code> de l'√©mulateur Android. Celui-ci contient de multiples choses avec lesquelles je vous laisserai exp√©rimenter par la suite; ce qui nous int√©resse ici c'est le bouton <code>Debug JS Remotely</code>, qui va ouvrir un nouvel onglet dans Chrome o√π sera ex√©cut√© notre code JS.</p>
<p>Il devient donc possible d'ouvrir les Chrome Devtools (dont la console) afin de d√©buguer notre app.</p>
<figure>
  <img src="devmenu.png" alt="devmenu + chrome devtools" />
  <figcaption>Jusqu'ici tout va bien</figcaption>
</figure>
<h2 id="pr√©sentation-des-donn√©es"><a href="#pr%C3%A9sentation-des-donn%C3%A9es" class="phenomic-HeadingAnchor">#</a>Pr√©sentation des donn√©es</h2>
<p>Afin d'afficher les informations que nous venons de r√©cup√©rer, nous allons avoir besoin de plusieurs √©l√©ments (heureusement fournis), √† savoir de quoi encapsuler d'autres composants (une <code>&#x3C;View></code> ~= une <code>&#x3C;div></code> HTML), de quoi rendre du texte (<code>&#x3C;Text></code> ~= <code>&#x3C;span></code>), un bouton (nous allons utiliser <code>&#x3C;TouchableOpacity></code>, une zone dont l'opacit√© est modifi√©e lors d'un <code>onTouch</code>) et enfin d'un spinner pour indiquer qu'une requ√™te est en cours (<code>&#x3C;ActivityIndicator></code>).</p>
<p>Nous allons √©galement rendre notre unique composant stateful afin de stocker quelques informations retourn√©es par l'API.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>
<span class="hljs-keyword">import</span> {
  AppRegistry,
  StyleSheet,
  ActivityIndicator, <span class="hljs-comment">// import des composants</span>
  TouchableOpacity,
  Text,
  View,
} <span class="hljs-keyword">from</span> <span class="hljs-string">'react-native'</span>

<span class="hljs-keyword">import</span> { getRandomBrewdog } <span class="hljs-keyword">from</span> <span class="hljs-string">'./punkapi'</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  <span class="hljs-keyword">constructor</span>(props) {
    <span class="hljs-keyword">super</span>(props)

    <span class="hljs-comment">// la state de notre composant est utilis√© pour</span>
    <span class="hljs-comment">// stocker quelques infos renvoy√©es par l'API</span>
    <span class="hljs-keyword">this</span>.state = {
      <span class="hljs-attr">name</span>: <span class="hljs-string">''</span>, <span class="hljs-comment">// nom de la bi√®re</span>
      description: <span class="hljs-string">''</span>, <span class="hljs-comment">// sa description</span>
      isLoading: <span class="hljs-literal">false</span> <span class="hljs-comment">// la requ√™te API est-elle en cours¬†?</span>
    }
  }

  <span class="hljs-comment">// nous externalisons cette fonction afin de</span>
  <span class="hljs-comment">// pouvoir l'appeler lorsqu'on le souhaite</span>
  _getRandomBrewdogWithFeedback = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
    <span class="hljs-keyword">this</span>.setState({ <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">true</span> })

    getRandomBrewdog()
      .then(<span class="hljs-function"><span class="hljs-params">json</span> =></span> <span class="hljs-keyword">this</span>.setState({
        <span class="hljs-attr">name</span>: json.name,
        <span class="hljs-attr">description</span>: json.description,
        <span class="hljs-attr">isLoading</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// la requ√™te est termin√©e</span>
      }))
      .catch(<span class="hljs-function"><span class="hljs-params">error</span> =></span> <span class="hljs-built_in">console</span>.error(error))
  }

  componentWillMount() {
    <span class="hljs-keyword">this</span>._getRandomBrewdogWithFeedback()
  }

  render() {
    <span class="hljs-keyword">const</span> content = <span class="hljs-keyword">this</span>.state.isLoading
      ? <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">ActivityIndicator</span> /></span> // si requ√™te en cours, on affiche un spinner
      : </span>&#x3C;Text style={styles.welcome}>
          Welcome to PutainDeBiere!
        &#x3C;/Text><span class="xml">

    return (
      </span>&#x3C;View style={styles.container}>
        {content}
      &#x3C;/View><span class="xml">
    )
  }
}

‚Ä¶</span></code></pre>
<p>Votre application affiche dor√©navant un spinner quelques secondes avant de rendre le fameux "Welcome to PutainDeBiere!" le temps que la requ√™te √† la punkAPI se fasse. Continuons de customiser ce render afin d'afficher les informations retourn√©es (et maintenant pr√©sentes dans le state de notre app).</p>
<pre><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  ‚Ä¶

  render() {
    <span class="hljs-keyword">const</span> content = <span class="hljs-keyword">this</span>.state.isLoading
      ? <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">ActivityIndicator</span> /></span> // si requ√™te en cours, on affiche un spinner
      : </span>&#x3C;View style={styles.infosContainer}>
          &#x3C;Text style={styles.name}>
            {this.state.name} // sinon on affiche le nom de la bi√®re
          &#x3C;/Text>

          &#x3C;Text style={styles.description}>
            {this.state.description} // sa description
          &#x3C;/Text>

          &#x3C;TouchableOpacity // on ajoute un "bouton" qui requ√™te une autre bi√®re al√©atoire
            onPress={this._getRandomBrewdogWithFeedback}
            style={styles.button}
          >
            &#x3C;Text>Grab a new beer!&#x3C;/Text>
          &#x3C;/TouchableOpacity>
        &#x3C;/View><span class="xml">

    return (
      </span>&#x3C;View style={styles.container}>
        {content}
      &#x3C;/View><span class="xml">
    )
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  // ajout de styles divers
  infosContainer: {
    margin: 30,
  },
  name: {
    fontSize: 18,
    fontWeight: '700',
    marginBottom: 10,
  },
  description: {
    marginBottom: 10,
  },
  button: {
    borderWidth: 1,
    borderColor: '#000',
    borderRadius: 3,
    padding: 5,
    justifyContent: 'center',
    alignItems: 'center',
  }
})</span></code></pre>
<figure>
  <img src="final_result.png" alt="devmenu + chrome devtools" />
  <figcaption>Le rendu "final"</figcaption>
</figure>
<h2 id="et-maintenant-"><a href="#et-maintenant-" class="phenomic-HeadingAnchor">#</a>Et maintenant¬†?</h2>
<p>Si vous connaissez d√©j√† React, vous pouvez:</p>
<ul>
<li>am√©liorer le code de l'app avec l'ajout de redux (par exemple) afin de supprimer le state de notre composant</li>
<li>cr√©er un composant stateless "&#x3C;Button>"</li>
<li>styliser davantage l'app √† l'aide d'<a href="https://facebook.github.io/react-native/docs/image.html">images</a> ou d'<a href="https://facebook.github.io/react-native/docs/animations.html">animations</a></li>
<li>d√©sactiver et modifier le style du bouton lors d'une requ√™te API</li>
<li>g√©rer les erreurs de requ√™tage de fa√ßon un poil plus √©l√©gante que de balancer une erreur √† la t√™te de l'utilisateur</li>
</ul>
<p>Si ce n'est pas le cas, n'h√©sitez pas √† lire ces deux articles pour vous familiariser avec ces librairies avant de continuer sur votre lanc√©e:</p>
<ul>
<li><a href="/fr/articles/js/react/">Introduction √† ReactJS</a></li>
<li><a href="/fr/articles/js/redux/">Redux, comment √ßa marche ?</a></li>
</ul>
<p>Bonne d√©couverte¬†!</p>
]]></description><link>http://putaindecode.io/fr/articles/js/react/native/introduction/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/react/native/introduction/</guid><pubDate>Tue, 04 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Pourquoi j'ai arr√™t√© d'utiliser CSS]]></title><description><![CDATA[<p>CSS est un langage horriblement dangereux, parce qu'il m√™le des concepts compl√®tement p√©t√©s et une folle capacit√© √† faire confondre facilit√© et simplicit√© aux gens qui l'utilisent.</p>
<h2 id="quest-ce-qui-ne-va-pas-"><a href="#quest-ce-qui-ne-va-pas-" class="phenomic-HeadingAnchor">#</a>Qu'est-ce qui ne va pas ?</h2>
<p>√Ä l'origine, CSS a √©t√© con√ßu pour styler des documents, pas des applications. Du coup lorsqu'on doit <em>scale</em>, c'est rapidement douloureux.</p>
<h3 id="les-s√©lecteurs"><a href="#les-s%C3%A9lecteurs" class="phenomic-HeadingAnchor">#</a>Les s√©lecteurs</h3>
<p>Les s√©lecteurs sont des <strong>variables globales mutables</strong>. Lorsque vous faites :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.selector</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;
}</code></pre>
<p>C'est comme si en JavaScript vous faisiez :</p>
<pre><code class="hljs language-javascript"><span class="hljs-built_in">window</span>.selector = (<span class="hljs-built_in">window</span>.selector || []).concat({
  <span class="hljs-attr">fontSize</span>: <span class="hljs-string">"1rem"</span>,
})</code></pre>
<p>√áa veut dire que :</p>
<ul>
<li>La d√©finition d'un style associ√© √† un s√©lecteur peut √™tre red√©finie ailleurs</li>
<li>Si on associe plusieurs styles √† un s√©lecteur, les derniers d√©finis dans le CSS auront toujours la priorit√©</li>
<li>Quelqu'un peut p√©ter les styles d'un composant pour peu qu'il ne sache pas qu'un s√©lecteur est utilis√© ailleurs</li>
</ul>
<h3 id="la-sp√©cificit√©"><a href="#la-sp%C3%A9cificit%C3%A9" class="phenomic-HeadingAnchor">#</a>La sp√©cificit√©</h3>
<p>Alors √ßa, c'est particuli√®rement dr√¥le : la sp√©cificit√© d'un s√©lecteur va d√©finir la priorit√© d'application d'un style.</p>
<table>
<thead>
<tr>
<th>S√©lecteur</th>
<th>Sp√©cificit√©</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>0,0,0,0</td>
</tr>
<tr>
<td><code>li</code></td>
<td>0,0,0,1</td>
</tr>
<tr>
<td><code>li:first-line</code></td>
<td>0,0,0,2</td>
</tr>
<tr>
<td><code>ul li</code></td>
<td>0,0,0,2</td>
</tr>
<tr>
<td><code>ul ol+li</code></td>
<td>0,0,0,3</td>
</tr>
<tr>
<td><code>h1 + *[rel=up]</code></td>
<td>0,0,1,1</td>
</tr>
<tr>
<td><code>ul ol li.red</code></td>
<td>0,0,1,3</td>
</tr>
<tr>
<td><code>li.red.level</code></td>
<td>0,0,2,1</td>
</tr>
<tr>
<td><code>#x34y</code></td>
<td>0,1,0,0</td>
</tr>
</tbody>
</table>
<p>Si le style est d√©fini dans l'attribut <code>style</code>, la sp√©cificit√© est de 1,0,0,0. Si une valeur associ√©e √† une propri√©t√© est suffix√©e d'un <code>!important</code>, elle prend quoi qu'il arrive l'ascendance.</p>
<p>Si on r√©sume, on nage en plein d√©lire, la priorit√© se d√©finit dans l'ordre par : la pr√©sence de <code>!important</code>, la fa√ßon de d√©finir le style, la sp√©cificit√© du s√©lecteur utilis√© puis par l'ordre de d√©finition dans l'ensemble des CSS de la page. √âvidemment, √† l'√©poque o√π on n'avait qu'une pauvre petite feuille de style pour l'ensemble de son site, √ßa marchait ; plus maintenant.</p>
<h3 id="les-r√©gressions"><a href="#les-r%C3%A9gressions" class="phenomic-HeadingAnchor">#</a>Les r√©gressions</h3>
<p>Prenons un exemple tout b√™te :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.item</span> {
  <span class="hljs-attribute">display</span>: block;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1rem</span>;
  <span class="hljs-attribute">color</span>: blue;
}

<span class="hljs-selector-class">.some-context</span> <span class="hljs-selector-class">.item</span> {
  <span class="hljs-attribute">display</span>: inline-block;
  <span class="hljs-attribute">color</span>: red;
}</code></pre>
<p>Quelqu'un de la team modifie <code>.item</code> :</p>
<pre><code class="hljs language-diff"> .item {
   display: block;
   font-size: 1rem;
   color: blue;
<span class="hljs-addition">+  border: 1px solid red;</span>
 }

 .some-context .item {
   display: inline-block;
   color: red;
}</code></pre>
<p>Super, une regression dans <code>some-context</code>. Face √† √ßa, deux possibilit√©s :</p>
<ul>
<li>Vous vous foutez d'avoir des r√©gressions qui p√®tent votre site</li>
<li>√Ä chaque changement minime du CSS vous v√©rifiez l'int√©gralit√© du site et testez tous les comportements dans tous les contextes.</li>
</ul>
<h3 id="le-choix-de-priorisation-des-styles"><a href="#le-choix-de-priorisation-des-styles" class="phenomic-HeadingAnchor">#</a>Le choix de priorisation des styles</h3>
<p>Ce serait pas mal de d√©cider quel <code>className</code> est appliqu√© en priorit√© :</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"blue red"</span>></span>text<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"red blue"</span>></span>text<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></code></pre>
<p>mais bien √©videmment non, comme vu plus haut, c'est le foutu ordre de d√©finition des s√©lecteurs qui d√©cide. Je vous laisse imaginer le bordel si on charge les feuilles de style √† la demande, selon les actions utilisateur.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.blue</span> { <span class="hljs-attribute">color</span>: blue; }
<span class="hljs-selector-class">.red</span> { <span class="hljs-attribute">color</span>: red; }</code></pre>
<p>C'est pire si vous utilisez un pr√©processeur tel que Sass et LESS. Lorsque vous faites un :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.blue</span> {
  <span class="hljs-attribute">color</span>: blue;
}

<span class="hljs-selector-class">.red</span> {
  <span class="hljs-attribute">color</span>: red;
}

<span class="hljs-selector-class">.my-selector</span> {
  @extend .red;
  @extend .blue;
}</code></pre>
<p>Vous imaginez que <code>.blue</code> √©tant appliqu√© apr√®s dans <code>.my-selector</code>, il va prendre la priorit√©. EH BAH NON, c'est <code>.red</code>, parce que sa d√©claration est situ√©e apr√®s <code>.blue</code>.</p>
<p>Si ce constat peut aussi permettre √† ceux et celles qui utilisent des CSS atomiques d'arr√™ter imm√©diatement :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.relative</span> { <span class="hljs-attribute">position</span>: relative; }
<span class="hljs-selector-class">.absolute</span> { <span class="hljs-attribute">position</span>: absolute; }
<span class="hljs-selector-class">.static</span> { <span class="hljs-attribute">position</span>: static; }</code></pre>
<p>Dans le cas pr√©c√©dent, si vous ajoutez une classe <code>relative</code> √† un √©lement ayant d√©j√† la classe <code>static</code>, √ßa ne changera rien du tout, parce que <code>.static</code> est d√©fini apr√®s <code>.relative</code>. G√©nial, non ?</p>
<h3 id="le-futur-de-css"><a href="#le-futur-de-css" class="phenomic-HeadingAnchor">#</a>Le futur de CSS</h3>
<p>Les variables sont une feature qui a √©t√© tr√®s demand√©e √† CSS. Mais cette feature va d√©barquer avec son lot de souci :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-pseudo">:root</span> {
  <span class="hljs-attribute">--mainColor</span>: blue;
}

<span class="hljs-selector-tag">body</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--mainColor);
}</code></pre>
<p>C'est super, mais si quelqu'un vient ajouter :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-pseudo">:root</span> {
  <span class="hljs-attribute">--mainColor</span>: red;
}</code></pre>
<p>quelque part, il y a deux cas :</p>
<ul>
<li>soit c'est charg√© avant, et √ßa ne fait rien</li>
<li>soit c'est charg√© apr√®s, et √ßa override toutes les propri√©t√©s utilisant <code>--mainColor</code>. On est bien contents.</li>
</ul>
<h2 id="vous-ne-pouvez-pas-vous-permettre-de-laisser-tomber-css-"><a href="#vous-ne-pouvez-pas-vous-permettre-de-laisser-tomber-css-" class="phenomic-HeadingAnchor">#</a>Vous ne pouvez pas vous permettre de laisser tomber CSS ?</h2>
<p>Dans ce cas, forcez vous √† utiliser la <a href="/fr/articles/css/bem/">m√©thodologie BEM</a>. √áa ne r√©glera pas tout, mais au moins cela vous permettra d'√©viter un maximum de conneries en vous for√ßant √† d√©couper en composants isol√©s, et √† mieux ma√Ætriser la priorisation, puisque le scope auquel vous devrez y veiller sera consid√©rablement r√©duit :</p>
<pre><code class="hljs language-css"><span class="hljs-comment">/* Header.css */</span>
<span class="hljs-selector-class">.Header</span> {}

  <span class="hljs-selector-class">.Header-nav</span> {}

<span class="hljs-comment">/* Nav.css */</span>
<span class="hljs-selector-class">.Nav</span> {}

  <span class="hljs-selector-class">.Nav-item</span> {}

    <span class="hljs-selector-class">.Nav-item--active</span> {}</code></pre>
<p>C'est quand m√™me plus pratique √† comprendre, non ?</p>
<p>Encore mieux, si vous avez du tooling √† la webpack, vous pouvez utiliser les <a href="/fr/articles/css/modules/">CSS modules</a>, qui limiteront de m√™me le scope d'application de vos feuilles de style.</p>
<h2 id="vous-pouvez-vous-permettre-de-laisser-tomber-css-"><a href="#vous-pouvez-vous-permettre-de-laisser-tomber-css-" class="phenomic-HeadingAnchor">#</a>Vous pouvez vous permettre de laisser tomber CSS ?</h2>
<p>JavaScript vous permet d√©j√† de b√©n√©ficier d'un syst√®me de modules, de variables, de conditions, de fonctions r√©utilisables, et tout √ßa sans hack. En plus de √ßa, vous maitrisez la priorisation, parce c'est que c'est vous qui d√©cidez ce qui s'applique :</p>
<pre><code class="hljs language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{
  render() {
    <span class="hljs-keyword">const</span> { active, disabled } = <span class="hljs-keyword">this</span>.props
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>
        <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span>
          <span class="hljs-attr">...styles.myComponent</span>,
          <span class="hljs-attr">...active</span> ? <span class="hljs-attr">styles.active</span> <span class="hljs-attr">:</span> <span class="hljs-attr">null</span>,
          <span class="hljs-attr">...disabled</span> &#x26;&#x26; !<span class="hljs-attr">active</span> ? <span class="hljs-attr">styles.disabled</span> <span class="hljs-attr">:</span> <span class="hljs-attr">null</span>,
        }}
      ></span>
        tadaa
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
    )
  }
}

<span class="hljs-keyword">const</span> styles = {
  <span class="hljs-attr">myComponent</span>: {
    <span class="hljs-attr">fontSize</span>: <span class="hljs-number">18</span>,
  },
  <span class="hljs-attr">active</span>: {
    <span class="hljs-attr">textDecoration</span>: <span class="hljs-string">"underline"</span>,
  },
  <span class="hljs-attr">disabled</span>: {
    <span class="hljs-attr">opacity</span>: <span class="hljs-number">0.5</span>,
  },
}</code></pre>
<p>Par ailleurs, avec certaines biblioth√®ques permettant naturellement l'usage d'inline-styles (comme React), cela vous donne la possibilit√© d'avoir le style et le markup dans le m√™me fichier, sans avoir besoin de naviguer entre les onglets de votre √©diteur (vous pouvez cependant s√©parer en plusieurs fichiers si √ßa vous fait plaisir).</p>
<p>En r√©sum√©, utiliser JS pour d√©finir et appliquer les styles vous permet de prendre le contr√¥le sur le styling de vos composants, tout en apportant le confort d'un langage offrant naturellement de nombreux avantages. Si vous √™tes bloqu√©s avec CSS, partez sur les CSS modules ou la m√©thologie BEM selon vos possibilit√©s. Le but, c'est d'√©liminer les <a href="https://github.com/necolas/react-native-web/blob/master/docs/guides/style.md">7 maux de CSS</a>.</p>
<p>Bisous bisous.</p>
<h2 id="edit"><a href="#edit" class="phenomic-HeadingAnchor">#</a>Edit</h2>
<p>Afin de r√©pondre aux diverses incompr√©hensions et commentaires en r√©ponse √† l‚Äôarticle, voil√† un follow-up qui va tenter d‚Äôaller plus en profondeur dans la critique de CSS.</p>
<p>Je vais donc r√©pondre √† <a href="http://www.glazman.org/weblog/dotclear/index.php?post/2016/06/18/Pourquoi-il-n-aurait-pas-du-arr%C3%AAter-d-utiliser-CSS">l‚Äôarticle de Daniel Glazman</a>, ancien co-chairman du CSS Working Group.</p>
<p>Le premier point n‚Äôa rien √† voir avec le sujet, mais l‚Äôauteur fait un parall√®le entre la r√©assignation dans JS et la mutabilit√© et absence de scope des s√©lecteurs CSS. La comparaison n‚Äôa pas lieu d‚Äô√™tre, parce que JS est un langage de programmation. De plus, en JS, les variables ont une port√©e, et l‚Äôop√©rateur <code>const</code> existe pour pr√©venir la r√©assignation. <code>&#x3C;/digression></code></p>
<p>Le grand probl√®me de l‚Äô√©tat actuel des s√©lecteurs CSS, c‚Äôest qu‚Äôils n‚Äôoffrent naturellement aucune API (hors <em>Shadow DOM</em>) permettant de limiter le scope d‚Äôun s√©lecteur sans augmenter sa sp√©cificit√©. Si je veux ajouter des propri√©t√©s de style √† un √©l√©ment comportant un certain s√©lecteur dans un certain contexte, je suis oblig√© d‚Äôavoir connaissance de tous les s√©lecteurs correspondant potentiellement √† cet √©l√©ments, de v√©rifier leur sp√©cificit√©, et possiblement d‚Äôadapter le s√©lecteur simple que j‚Äôenvisageais √† l‚Äôorigine pour pallier le manque de sp√©cificit√©. Super, ma codebase contient maintenant des s√©lecteurs diff√©rents de leur sens original dans le simple but de les appliquer.</p>
<p>Lorsque je lis la r√©action √©pidermique de l‚Äôauteur face √† BEM, une m√©thodologie ajoutant un namespace pour simuler ce scope c√¥t√© utilisateur qui apporte un minimum de s√©curit√© lorsque l‚Äôon travaille sur un projet √† grande √©chelle, j‚Äôavoue un peu flipper quant √† la conception des sp√©cifications CSS.</p>
<p>BEM est une r√©ponse de la communaut√© d‚Äôutilisateurs √† plusieurs soucis qu‚Äôils ont rencontr√©s dans leurs utilisations vari√©es de CSS. On dirait m√™me dans sa r√©ponse qu‚Äôil n‚Äôa pas pris le temps de se renseigner sur la nature de la m√©thodologie, qui ne consiste selon lui qu‚Äô√† ajouter des indentations dont on se fout parce que CSSOM les ignore. WTF.</p>
<p>Ignorer le feedback que constitue l‚Äôapparition de cette m√©thodologie et d√©nigrer les utilisateurs pour qui elle r√®gle des probl√®mes pos√©s par le laxisme du langage, √ßa ne fait pas avancer le langage, et √ßa ne donnera certainement pas envie de retourner √† CSS.</p>
<p>Concernant la sp√©cificit√© des s√©lecteurs, √©videmment qu‚Äôune quantit√© astronomique de sites utilise les s√©lecteurs CSS, simplement parce qu‚Äôils n‚Äôont pas eu d‚Äôalternative viable. √áa n‚Äôen fait pas une fonctionnalit√© bien con√ßue pour autant.</p>
<p>Sur les r√©gressions, l‚Äôid√©e √† comprendre, c‚Äôest que l‚Äôabsence de scope et de namespace dans le langage peut cr√©er des r√©gressions potentiellement partout dans un large site, parce qu‚Äôun s√©lecteur est global. Il n‚Äôy a pas moyen de s√©curiser un rayon d‚Äôaction pour travailler, √† moins de g√©rer le namespace soi-m√™me, dans le s√©lecteur.</p>
<p>Concernant le choix de priorisation des styles, c'est un fait que l'ordre de la <code>DOMTokenList</code> n‚Äôa pas d'importance actuellement, et je ne fais que d√©plorer qu‚Äôen utilisant des s√©lecteurs, le choix de l‚Äôapplication des styles ne puisse pas se faire √† l‚Äôendroit o√π l‚Äô√©l√©ment est utilis√©, avec la connaissance pr√©cise de son contexte.</p>
<p>Sur le futur de CSS, le reproche que je dresse n'est pas comme ce qui est interpr√©t√© dans le post de l'auteur, disant que je r√¢le parce que si l'on fait un parall√®le avec JS, on aurait :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>
<span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>
alert(a)
<span class="hljs-comment">// alerts 2</span></code></pre>
<p>C‚Äôest un comportement parfaitement attendu. Et ce n‚Äôest pas ce que j‚Äôai dit, je reproche √† CSS de faire en sorte que, si l‚Äôon fait encore le parall√®le :</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// coucou c'est CSS</span>
<span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>
alert(a)
<span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>
<span class="hljs-comment">// alerts 2</span></code></pre>
<p>Sur ma proposition alternative, outre √™tre <em>‚Äúune horreur non-maintenable, verbeuse et error-prone‚Äù</em>, on va regarder ce que √ßa donne sur un cas plus simple :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-comment">// un syst√®me de modules analysable statiquement</span>
<span class="hljs-keyword">import</span> { mainBlue, mainRed } <span class="hljs-keyword">from</span> <span class="hljs-string">"../utils/Colors"</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (props) => {
  <span class="hljs-keyword">return</span> (
    <span class="hljs-comment">// on peut appliquer un style dont le rayon d'action est par d√©finition</span>
    <span class="hljs-comment">// limit√© √† l‚Äô√©l√©ment sur lequel on le place</span>
    &#x3C;div style={styles.container}>
      {list.map(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =></span>
        &#x3C;div style={styles.item}>
          <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">span</span>
            <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span>
              <span class="hljs-attr">...styles.text</span>,
              // <span class="hljs-attr">appliquer</span> <span class="hljs-attr">un</span> <span class="hljs-attr">style</span> <span class="hljs-attr">conditionn</span>√© <span class="hljs-attr">par</span> <span class="hljs-attr">le</span> <span class="hljs-attr">contexte</span> <span class="hljs-attr">est</span> <span class="hljs-attr">tr</span>√®<span class="hljs-attr">s</span> <span class="hljs-attr">simple</span>
              // <span class="hljs-attr">et</span> <span class="hljs-attr">permet</span> <span class="hljs-attr">de</span> <span class="hljs-attr">prioriser</span> √† <span class="hljs-attr">la</span> <span class="hljs-attr">d</span>√©<span class="hljs-attr">finition</span> <span class="hljs-attr">du</span> <span class="hljs-attr">markup</span>
              <span class="hljs-attr">...index</span> % <span class="hljs-attr">2</span> === <span class="hljs-string">0</span> &#x26;&#x26; <span class="hljs-attr">styles.oddText</span>,
            }}
          ></span>
            {item.text}
          <span class="hljs-tag">&#x3C;/<span class="hljs-name">span</span>></span></span>
        &#x3C;<span class="hljs-regexp">/div>
      )}
    &#x3C;/</span>div>
  )
}

<span class="hljs-comment">// la feuille de style est limit√©e au module</span>
<span class="hljs-keyword">const</span> styles = {
  <span class="hljs-attr">container</span>: {
    <span class="hljs-attr">display</span>: <span class="hljs-string">"flex"</span>,
    <span class="hljs-attr">flexDirection</span>: <span class="hljs-string">"row"</span>,
  },
  <span class="hljs-attr">item</span>: {
    <span class="hljs-attr">flexBasis</span>: <span class="hljs-number">200</span>,
  },
  <span class="hljs-attr">text</span>: {
    <span class="hljs-comment">// peut utiliser des variables qui ne seront pas √©cras√©es si j'en d√©finis</span>
    <span class="hljs-comment">// une avec le m√™me nom ailleurs dans l'app</span>
    color: mainBlue,
  },
  <span class="hljs-attr">oddText</span>: {
    <span class="hljs-attr">color</span>: mainRed,
  },
}</code></pre>
<p>C‚Äôest juste une application d‚Äôune approche centr√©e sur les composants. L‚Äôimportant, c‚Äôest d‚Äôisoler ces composants pour les rendre facilement r√©utilisables, pr√©venir les effets de bord, et passer moins de temps √† essayer de travailler avec des propri√©t√©s du langage qui nous g√™nent dans notre travail de tous les jours. R√©duire la libert√© d‚Äôutilisation permet ici d‚Äôapporter des propri√©t√©s (immutabilit√© des styles, application d√©terministe des styles, scope) qui nous permettent de raisonner notre code de mani√®re beaucoup plus simple.</p>
<p>Si l‚Äôon regarde du c√¥t√© des CSS modules, qu‚Äôest-ce que √ßa fait exactement ? La m√™me chose. Le tooling va limiter le scope d‚Äôune feuille de style en rendant opaques et globalement uniques les s√©lecteurs. Le CSS peut √™tre utilis√© en target de compilation sans probl√®me, et la plupart des solutions rendant son utilisation confortable font une chose simple : contraindre √† une utilisation plus stricte en masquant des parties trop laxistes du langage. C‚Äôest ce que le tooling JS a connu depuis quelques ann√©es, et on ne s‚Äôen porte que mieux.</p>
<p>Le dernier argument utilis√© est que ¬´ si le monde entier a adopt√© CSS (y compris le monde de l'√©dition qui vient pourtant de solutions assez radicalement diff√©rentes du Web), c'est bien parce que c'est bien et que √ßa marche ¬ª. Qu‚Äôest-ce qu‚Äôon peut r√©pondre sinon que CSS a √©t√© adopt√© avant que les besoins du web n'aient suffisamment √©volu√© pour que CSS dans son √©tat actuel ait un √©norme potentiel de fragilisation d‚Äôune codebase. Ne pas remettre en question le langage parce que ses utilisateurs n‚Äôont pas d‚Äôalternative, c‚Äôest condamner le langage. C‚Äôest comme si la SNCF disait ¬´ BOARF √ßa sert √† rien de faire arriver les trains √† l‚Äôheure, vu que tout le monde le prend d√©j√† c‚Äôest que c‚Äôest nickel ¬ª. Du coup, faut pas venir s‚Äô√©tonner que certains de ces utilisateurs aillent chercher des alternatives ailleurs.</p>
<p>En conclusion, je d√©plore vraiment l'absence d'int√©r√™t apparent de l'auteur pour √©couter le feedback des utilisateurs sur les probl√®mes d'un langage. Il faut regarder ailleurs, et ne pas ignorer ou m√©priser ce que les utilisateurs font de leur c√¥t√© pour travailler plus sainement, √ßa pourrait m√™me donner des id√©es pour am√©liorer ce qui fait perdre du temps aux utilisateurs.</p>
]]></description><link>http://putaindecode.io/fr/articles/css/stop-css/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/stop-css/</guid><pubDate>Thu, 16 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Les patterns Provider & Higher-Order Component avec React]]></title><description><![CDATA[<h2 id="le-pattern-provider"><a href="#le-pattern-provider" class="phenomic-HeadingAnchor">#</a>Le pattern provider</h2>
<p>Beaucoup de bibliot√®ques React ont besoin de faire passer des data au travers de tout l'arbre de composants de votre app. Par exemple Redux a besoin de passer son <em>store</em> et React Router doit passer l'objet <em>location</em>. Tout √ßa pourrait possiblement passer par du <em>shared mutable state</em> (√©tat global mutable, ce qui est rarement une bonne id√©e). Le <em>shared mutable state</em> rend impossible une application √† plus d'un contexte. En d'autres mots, √ßa ne marcherait que sur le client, o√π l'√©tat global correspond √† celui de l'utilisateur. Si vous d√©cidez de rendre la page c√¥t√© serveur, c'est impossible de reposer sur une telle impl√©mentation : cet √©tat ne doit pas d√©passer le scope de la requ√™te courante au serveur.</p>
<p>Coup de bol, l'API de React nous offre une solution √† ce probl√®me: le <a href="http://facebook.github.io/react/docs/context.html"><code>context</code></a>. Si l'on r√©sume sa nature, c'est comme l'objet global de votre arbre de composants.</p>
<p>Le <code>context</code> fonctionne de la fa√ßon suivante:</p>
<ul>
<li>On d√©finit haut dans notre app un <code>context</code> que l'on donne aux composants descendants de l'app</li>
<li>On r√©cup√®re ce contexte dans les composants descendants.</li>
</ul>
<p>Du coup, pour <em>donner</em> ce <code>context</code>, on doit avoir un <code>Provider</code>. Son r√¥le est simplement de fournir un <code>context</code> pour que les composants enfants y aient acc√®s.</p>
<p>On va illustrer ce pattern avec un use-case tr√®s simple : dans notre app, les utilisateurs peuvent customiser le th√®me.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React, { Component, PropTypes, Children } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThemeProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
  <span class="hljs-comment">// la m√©thode getChildContext est appel√©e pour fournir le `context`</span>
  <span class="hljs-comment">// dans notre cas, on le r√©cup√®re des `props`</span>
  getChildContext() {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">theme</span>: <span class="hljs-keyword">this</span>.props.theme,
    }
  }
  <span class="hljs-comment">// on render l'enfant</span>
  render() {
    <span class="hljs-keyword">return</span> Children.only(<span class="hljs-keyword">this</span>.props.children)
  }
}

ThemeProvider.propTypes = {
  <span class="hljs-attr">theme</span>: PropTypes.object.isRequired,
}

<span class="hljs-comment">// pour que React prenne en compte le context fourni,</span>
<span class="hljs-comment">// on doit d√©finir les types des propri√©t√©s que l'on passe</span>
ThemeProvider.childContextTypes = {
  <span class="hljs-attr">theme</span>: PropTypes.object.isRequired,
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ThemeProvider</code></pre>
<p>Pour utiliser le provider, il suffit de wrapper notre app avec:</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">"react-dom"</span>

<span class="hljs-keyword">import</span> ThemeProvider <span class="hljs-keyword">from</span> <span class="hljs-string">"ThemeProvider"</span>
<span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">"App"</span>

<span class="hljs-keyword">const</span> theme = {
  <span class="hljs-attr">color</span>: <span class="hljs-string">"#cc3300"</span>,
  <span class="hljs-attr">fontFamily</span>: <span class="hljs-string">"Georgia"</span>,
}

ReactDOM.render(
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">ThemeProvider</span> <span class="hljs-attr">theme</span>=<span class="hljs-string">{theme}</span>></span>
    </span>&#x3C;App /><span class="xml">
  <span class="hljs-tag">&#x3C;/<span class="hljs-name">ThemeProvider</span>></span></span>,
  <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">"#App"</span>)
)</code></pre>
<p>Maintenant que notre <code>theme</code> est bien ajout√© au <code>context</code>, on a besoin d'un moyen simple pour que nos composants dans l'app puissent le consommer. √áa nous am√®ne au second pattern.</p>
<h2 id="le-pattern-higher-order-component"><a href="#le-pattern-higher-order-component" class="phenomic-HeadingAnchor">#</a>Le pattern Higher-Order Component</h2>
<p>Afin de consommer le <code>context</code>, un component doit d√©finir une propri√©t√© statique <code>contextTypes</code> stipulant quelles propri√©t√©s le composant souhaite r√©cup√©rer. On pourrait le d√©finir sur chaque composant, mais cela serait une mauvaise id√©e pour deux raisons :</p>
<ul>
<li><strong>La maintenabilit√©</strong> : si √† un moment, on a besoin de refacto, avoir tous ces <code>contextTypes</code> √©parpill√©s dans notre repository peut faire bien mal.</li>
<li><strong>La complexit√©</strong>: L'API des <code>context</code> √©tant encore obscure pour beaucoup, il est pr√©f√©rable de faire une abstraction pour la masquer.</li>
</ul>
<p>Une autre solution serait d'utiliser l'h√©ritage d'une sous-classe de <code>ReactComponent</code>. √áa ne marche pas pour deux raisons:</p>
<ul>
<li>Plus d'un niveau d'h√©ritage est en g√©n√©ral une id√©e de merde. Cela m√®ne souvent √† des conflits entre m√©thodes, et force √† v√©rifier toute la cha√Æne d'h√©ritage √† chaque fois que l'on souhaite modifier quelque chose. L'API des <code>mixins</code> de <code>React.createClass</code> r√©glait ce souci en d√©finissant des comportements de merge selon les m√©thodes, mais cela rend encore plus obscure la compr√©hension du fonctionnement de nos composants.</li>
<li>Si l'on veut des APIs <strong>interop√©rables</strong>, on ne peut pas partir de l'h√©ritage. React offre trois moyens de d√©finir un composant: <code>class extends React.Component {}</code>, <code>React.createClass({})</code> et <code>(props) => ReactElement</code>. Les deux derniers ne peuvent pas b√©n√©ficier de l'h√©ritage.</li>
</ul>
<p>La meilleure fa√ßon de cr√©er une fonctionnalit√© r√©utilisable est d'utiliser le pattern du <strong>Higher Order Component</strong> (ou <em>HOC</em>). Ce que √ßa veut dire, c'est qu'on va simplement wrapper un composant dans un autre, lequel a pour unique r√¥le d'injecter la fonctionnalit√© et de la passer via les <code>props</code>. Il s'agit tout b√™tement du principe de composition : au lieu d'exporter <code>A</code>, vous exportez <code>Wrapped(A)</code>, et ce dernier retourne un composant React qui va appeler <code>A</code> dans sa m√©thode <code>render</code>.</p>
<p>Pour le voir simplement, il s'agit d'un point interm√©diaire dans l'arbre de vos composants, qui injecte quelques <code>props</code>. Il existe beaucoup d'avantages apport√©s par ce pattern :</p>
<ul>
<li><strong>Isolation</strong> : Il n'y a pas de risque de collision de propri√©t√©s au sein du composant.</li>
<li><strong>Interop√©rabilit√©</strong> : Ce principe s'adapte √† tout composant React, peu importe la fa√ßon dont il a √©t√© d√©fini.</li>
<li><strong>Maintenabilit√©</strong> : Le wrapper n'aura qu'une seule fonctionnalit√©, ce qui le rend plus simple √† comprendre. De plus, si l'on utilise le <code>context</code>, on ne trouvera le mapping <code>contextTypes</code> qu'√† un seul endroit dans l'app.</li>
</ul>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React, { Component, PropTypes } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>

<span class="hljs-keyword">const</span> themed = <span class="hljs-function">(<span class="hljs-params">ComponentToWrap</span>) =></span> {
  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThemeComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>{
    render() {
      <span class="hljs-keyword">const</span> { theme } = <span class="hljs-keyword">this</span>.context
      <span class="hljs-comment">// le component va render `ComponentToWrap`</span>
      <span class="hljs-comment">// mais il va y ajouter la prop `theme`, qu'il r√©cup√®re du `context`</span>
      <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">ComponentToWrap</span> {‚Ä¶<span class="hljs-attr">this.props</span>} <span class="hljs-attr">theme</span>=<span class="hljs-string">{theme}</span> /></span>
      )
    }
  }
  // on d√©finit ce qu'on veut consommer du `context`
  ThemeComponent.contextTypes = {
    theme: PropTypes.object.isRequired,
  }

  // on retourne notre wrapper
  return ThemeComponent
}
export default themed</span></code></pre>
<p>Pour utiliser notre HOC, il suffira d'exporter nos composants wrapp√©s :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"React"</span>
<span class="hljs-keyword">import</span> themed <span class="hljs-keyword">from</span> <span class="hljs-string">"themed"</span>

<span class="hljs-keyword">const</span> MyStatelessComponent = <span class="hljs-function">(<span class="hljs-params">{ text, theme }</span>) =></span> (
  <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">color:</span> <span class="hljs-attr">theme.color</span> }}></span>
    {text}
  <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
)

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> themed(MyStatelessComponent)</code></pre>
<p>Puisqu'il s'agit simplement d'une fonction, on peut y passer des options √† l'aide d'une simple closure.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> defaultMergeProps = <span class="hljs-function">(<span class="hljs-params">ownProps, themeProps</span>) =></span> ({  ...ownProps, ...themeProps })

<span class="hljs-keyword">const</span> theme = <span class="hljs-function">(<span class="hljs-params">mergeProps = defaultMergeProps</span>) =></span>
  (ComponentToWrap) => {
    <span class="hljs-comment">// ‚Ä¶</span>
    render() {
      <span class="hljs-keyword">const</span> { theme } = <span class="hljs-keyword">this</span>.context
      <span class="hljs-keyword">const</span> props = mergeProps(<span class="hljs-keyword">this</span>.props, { theme })
      <span class="hljs-keyword">return</span> (
        <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">ComponentToWrap</span> {‚Ä¶<span class="hljs-attr">props</span>} /></span>
      )
    }
    // ‚Ä¶
  }</span></code></pre>
<p>et l'utiliser de cette fa√ßon :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> mergeProps = <span class="hljs-function">(<span class="hljs-params">ownProps, themeProps</span>) =></span> ({ ...themeProps, <span class="hljs-attr">color</span>: themeProps.theme.color })
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> theme(mergeProps)(MyComponent)</code></pre>
<p>Une astuce sympathique lorsque vous utilisez plusieurs HOC, c'est de les composer, puisque <code>compose(A, B, C)(props)</code> vaudra <code>A(B(C(props)))</code>, par exemple :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> composed = compose(
  connect(mapStateToProps),
  theme()
)

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> composed(MyComponent)</code></pre>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/react/higher-order-component/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/react/higher-order-component/</guid><pubDate>Tue, 14 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Redux, comment √ßa marche ?]]></title><description><![CDATA[<p>Alors si vous faites du d√©veloppement web et que vous ne vivez pas dans une cave, vous avez certainement d√©j√† entendu parler de <a href="http://redux.js.org">Redux</a>.</p>
<h2 id="kesako-"><a href="#kesako-" class="phenomic-HeadingAnchor">#</a>Kesako ?</h2>
<p>Redux est une impl√©mentation d√©riv√©e de Flux. √áa permet de cr√©er un <strong>Store</strong> qui contient un <strong>√©tat</strong>, r√©agit √† des <strong>actions dispatch√©es</strong>, et auquel on peut <strong>souscrire</strong> pour √™tre notifi√© des changements. Il permet √©galement l'ajout de <strong>middlewares</strong>, qui peuvent en quelque sorte <em>pre-process</em> les actions.</p>
<p>Du coup, on va √©crire une impl√©mentation de Redux pour mieux d√©composer son fonctionnement.</p>
<h2 id="1-g√©rer-l√©tat"><a href="#1-g%C3%A9rer-l%C3%A9tat" class="phenomic-HeadingAnchor">#</a>1. G√©rer l'√©tat</h2>
<p>Redux se distingue par son m√©canisme d'update de l'√©tat, puisqu'il est d√©crit dans des <strong>reducers</strong>. Vous connaissez <a href="/fr/articles/js/array-reduce/"><code>Array.prototype.reduce</code></a> ? Eh ben votre <strong>reducer</strong> a exactement la m√™me signature que la fonction de <code>reduce</code>.</p>
<p>Pour faire simple, votre √©tat vaudra toujours :</p>
<pre><code class="hljs language-javascript">dispatchedActions.reduce(reducer, <span class="hljs-literal">undefined</span>)</code></pre>
<p>Si √ßa vous para√Æt un peu abstrait, prenons un exemple tout con de reducer :</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// on part de 0</span>
<span class="hljs-keyword">const</span> initialState = { <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span> }

<span class="hljs-keyword">const</span> counter = <span class="hljs-function">(<span class="hljs-params">state = initialState, action</span>) =></span> {
  <span class="hljs-keyword">switch</span>(action.type) {
    <span class="hljs-comment">// selon l'action ‚Ä¶</span>
    <span class="hljs-keyword">case</span> <span class="hljs-string">"INCREMENT"</span>:
      <span class="hljs-comment">// ‚Ä¶ on retourne un nouvel √©tat incr√©ment√©</span>
      <span class="hljs-keyword">return</span> { <span class="hljs-attr">counter</span>: state.counter + <span class="hljs-number">1</span> }
    <span class="hljs-keyword">case</span> <span class="hljs-string">"DECREMENT"</span>:
      <span class="hljs-comment">// ‚Ä¶ ou d√©cr√©ment√©</span>
      <span class="hljs-keyword">return</span> { <span class="hljs-attr">counter</span>: state.counter - <span class="hljs-number">1</span> }
    <span class="hljs-keyword">default</span>:
      <span class="hljs-comment">// ou l'√©tat actuel, si l'on n'y touche pas</span>
      <span class="hljs-keyword">return</span> state
  }
}</code></pre>
<p>Le petit <code>state = initialState</code> c'est un <a href="/fr/articles/js/es2015/defaults/">param√®tre avec une valeur par d√©faut</a>, si vous avez bien vu le bout de code avec le <code>reduce</code> un peu plus haut, on passe la valeur <code>undefined</code> comme accumulateur initial, √ßa permet d'avoir un state valant <code>initialState</code> au passage de la premi√®re action.</p>
<p>Le <code>switch</code> permet de retourner un nouvel √©tat selon les actions pass√©es, avec un <code>default</code> qui retourne l'√©tat actuel, dans le cas o√π on se fout de l'action dans ce reducer.</p>
<p>C'est parti pour impl√©menter √ßa :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> createStore = <span class="hljs-function">(<span class="hljs-params">reducer</span>) =></span> {
  <span class="hljs-comment">// on balance une premi√®re action "opaque",</span>
  <span class="hljs-comment">// qui ne sera pas trait√©e par le reducer, histoire de commencer avec un √©tat</span>
  <span class="hljs-keyword">let</span> state = reducer(<span class="hljs-literal">undefined</span>, { <span class="hljs-attr">type</span>: <span class="hljs-string">"@@INIT"</span> })
  <span class="hljs-keyword">return</span> {
    <span class="hljs-comment">// une m√©thode pour dispatcher les actions</span>
    dispatch: <span class="hljs-function">(<span class="hljs-params">action</span>) =></span> {
      state = reducer(state, action)
    },
    <span class="hljs-comment">// une m√©thode pour r√©cup√©rer le state</span>
    getState: <span class="hljs-function"><span class="hljs-params">()</span> =></span> state
  }
}</code></pre>
<p>Super, on peut √©crire et lire notre √©tat.</p>
<h2 id="2-le-m√©canisme-de-souscription"><a href="#2-le-m%C3%A9canisme-de-souscription" class="phenomic-HeadingAnchor">#</a>2. Le m√©canisme de souscription</h2>
<p>Pour pouvoir signaler aux int√©ress√©s que des updates ont eu lieu sur l'√©tat, on doit ajouter un m√©canisme de souscription : un b√™te event emitter.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> createStore = <span class="hljs-function">(<span class="hljs-params">reducer</span>) =></span> {
  <span class="hljs-keyword">let</span> state = reducer(<span class="hljs-literal">undefined</span>, { <span class="hljs-attr">type</span>: <span class="hljs-string">"@@INIT"</span> })
  <span class="hljs-comment">// on cr√©e un `Set` o√π l'on va stocker les listeners</span>
  <span class="hljs-keyword">const</span> subscribers = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>()
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">dispatch</span>: <span class="hljs-function">(<span class="hljs-params">action</span>) =></span> {
      state = reducer(state, action)
      <span class="hljs-comment">// √† chaque dispatch, on appelle les subscribers</span>
      subscribers.forEach(<span class="hljs-function">(<span class="hljs-params">func</span>) =></span> func())
    },
    <span class="hljs-attr">subscribe</span>: <span class="hljs-function">(<span class="hljs-params">func</span>) =></span> {
      <span class="hljs-comment">// on ajoute `func` √† la liste de subscribers</span>
      subscribers.add(func)
      <span class="hljs-comment">// et on retourne une fonction permettant d'unsubscribe</span>
      <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =></span> {
        subscribers.delete(func)
      }
    },
    <span class="hljs-attr">getState</span>: <span class="hljs-function"><span class="hljs-params">()</span> =></span> state
  }
}</code></pre>
<p>Ay√©, le m√©canisme est en place.</p>
<h2 id="3-combiner-les-reducers"><a href="#3-combiner-les-reducers" class="phenomic-HeadingAnchor">#</a>3. Combiner les reducers</h2>
<p>Maintenant ce qui serait pas mal, ce serait de permettre d'avoir plusieurs reducers, afin de pouvoir les d√©couper et d'√©viter d'avoir du gros code bloated qui t√¢che. Pour ce faire, on va cr√©er la fonction <code>combineReducers</code> qui va prendre un objet contenant des reducers, et transformer √ßa en un seul reducer qui va retourner un objet de la m√™me forme, avec l'√©tat retourn√© par le reducer de la m√™me cl√©.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> combineReducers = <span class="hljs-function">(<span class="hljs-params">reducers</span>) =></span> {
  <span class="hljs-keyword">const</span> reducersKeys = <span class="hljs-built_in">Object</span>.keys(reducers)
  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">state = {}, action</span>) =></span> {
    <span class="hljs-keyword">return</span> reducersKeys.reduce(<span class="hljs-function">(<span class="hljs-params">acc, key</span>) =></span> {
      acc[key] = reducers[key](state[key], action)
      <span class="hljs-keyword">return</span> acc
    }, {})
  }
}</code></pre>
<p>Maintenant, on peut bien s√©parer ses reducers :</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { users } <span class="hljs-keyword">from</span> <span class="hljs-string">"./reducers/user"</span>
<span class="hljs-keyword">import</span> { tweets } <span class="hljs-keyword">from</span> <span class="hljs-string">"./reducers/tweets"</span>

<span class="hljs-keyword">const</span> reducer = combineReducers({
  users,
  tweets,
})

<span class="hljs-keyword">const</span> store = createStore(reducer)</code></pre>
<h2 id="4-permettre-lajout-de-middlewares"><a href="#4-permettre-lajout-de-middlewares" class="phenomic-HeadingAnchor">#</a>4. Permettre l'ajout de middlewares</h2>
<p>Les middlewares apportent toute la libert√© de personalisation de Redux. L'un des plus populaires est le <a href="https://github.com/gaearon/redux-thunk"><em>thunk middleware</em></a>, qui permet de passer une fonction √† la place d'une action, et de dispatcher depuis cette fonction, ce qui peut s'av√©rer tr√®s utile pour g√©rer des r√©ponses asynchrones.</p>
<p>On va donc cr√©er une fonction <code>applyMiddleware</code>, qui va enrichir un store en ajoutant une sorte de hook sur sa m√©thode dispatch.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// compose(a, b, c) √©quivaut √† (...args) => a(b(c(...args)))</span>
<span class="hljs-keyword">const</span> compose = <span class="hljs-function">(<span class="hljs-params">...funcs</span>) =></span> {
  <span class="hljs-keyword">const</span> last = funcs[funcs.length - <span class="hljs-number">1</span>]
  <span class="hljs-keyword">const</span> rest = funcs.slice(<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>)
  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =></span> rest.reduceRight(<span class="hljs-function">(<span class="hljs-params">composed, f</span>) =></span> f(composed), last(...args))
}

<span class="hljs-keyword">const</span> applyMiddleware = <span class="hljs-function">(<span class="hljs-params">...middlewares</span>) =></span> {
  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">store</span>) =></span> {
    <span class="hljs-comment">// cette API sera pass√©e √† chaque middleware, afin qu'il puisse r√©cup√©rer</span>
    <span class="hljs-comment">// l'√©tat en cours et dispatcher des actions</span>
    <span class="hljs-keyword">const</span> middlewareAPI = {
      <span class="hljs-attr">getState</span>: store.getState,
      <span class="hljs-attr">dispatch</span>: <span class="hljs-function">(<span class="hljs-params">action</span>) =></span> dispatch(action)
    }
    <span class="hljs-keyword">const</span> chain = middlewares.map(<span class="hljs-function">(<span class="hljs-params">middleware</span>) =></span> middleware(middlewareAPI))
    <span class="hljs-keyword">let</span> dispatch = compose(...chain)(store.dispatch)
    <span class="hljs-keyword">return</span> {
      ...store,
      dispatch,
    }
  }
}</code></pre>
<blockquote>
<p>NOTE: l'API de Redux prend <code>createStore</code> plut√¥t que <code>store</code> en param√®tre, la diff√©rence est volontaire dans cette d√©marche de simplification</p>
</blockquote>
<p>Voil√†, maintenant on peut faire</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> thunk = <span class="hljs-function">(<span class="hljs-params">{ dispatch, getState }</span>) =></span> (next) => <span class="hljs-function">(<span class="hljs-params">action</span>) =></span> {
  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> action === <span class="hljs-string">"function"</span>) {
    <span class="hljs-keyword">return</span> action(dispatch, getState)
  }
  <span class="hljs-keyword">return</span> next(action)
}

<span class="hljs-keyword">const</span> store = applyMiddleware(thunk)(createStore(reducer))

<span class="hljs-comment">// et maintenant on peut faire</span>
store.dispatch(<span class="hljs-function">(<span class="hljs-params">dispatch, getState</span>) =></span> {
  dispatch({ <span class="hljs-attr">type</span>: <span class="hljs-string">"FOO"</span> })
  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =></span> {
    dispatch({ <span class="hljs-attr">type</span>: <span class="hljs-string">"BAR"</span> })
  })
})</code></pre>
<p>Voil√† voil√†, j'esp√®re que cet article a pu vous √©clairer un petit peu sur le fonctionnement de Redux et vous permettra de l'aborder avec plus de ser√©nit√©.</p>
<p>Zoub'</p>
]]></description><link>http://putaindecode.io/fr/articles/js/redux/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/redux/</guid><pubDate>Thu, 09 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction to Flow, to make your code run on the first try]]></title><description><![CDATA[<pre><code class="hljs language-javascript"><span class="hljs-built_in">document</span>.body.firstChild.getBoundingClientRect()</code></pre>
<p>This hypothetical line of code doesn't always work.</p>
<p>The reason for this is that <code>element.firstChild</code> is a <code>Node</code>, not all of which have a <code>getBoundingClientRect</code> method, which is always found on <code>Elements</code>, a class that inherits from <code>Node</code>.</p>
<p>This kind of error is rather usual, and unfortunately JavaScript doesn't quite get out of its way to warn us that <em>oi m8 that might not work</em>. JS actually prefers warning us at <em>runtime</em> when it's too late because the bug already happened.</p>
<p>That is because JavaScript is a <strong>weakly/dynamically-typed</strong> language.</p>
<p>Weakly-typed, because if you try to make an operation with two values that have incompatible types, JS will convert those types to ones that it thinks will be the most adequate.</p>
<p>Example <em>feat. JavaScript's Inner Voice‚Ñ¢</em></p>
<pre><code class="hljs language-javascript"><span class="hljs-string">"1"</span> + <span class="hljs-number">1</span>
<span class="hljs-comment">// alright alright, so that string might contain absolutely anything</span>
<span class="hljs-comment">// if I tried to make it a number it could become NaN</span>
<span class="hljs-comment">// let's just make the number a string and concatenate both of them</span>
<span class="hljs-string">"11"</span></code></pre>
<pre><code class="hljs language-javascript"><span class="hljs-string">"1"</span> * <span class="hljs-number">1</span>
<span class="hljs-comment">// who the fuck wrote that crap?</span>
<span class="hljs-comment">// okay, that's a multiplication</span>
<span class="hljs-comment">// no choice but to make that string a number</span>
<span class="hljs-number">1</span></code></pre>
<p>Dynamically-typed, contrary to statically-typed, because type tests are made at runtime.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> toLowerCase = <span class="hljs-function">(<span class="hljs-params">value</span>) =></span> {
  <span class="hljs-keyword">return</span> value.toLowerCase()
}

toLowerCase(<span class="hljs-number">3</span>)
<span class="hljs-comment">// uhm. (3).toLowerCase is undefined</span>
<span class="hljs-comment">// undefined ain't a function, ERROR</span></code></pre>
<h2 id="how-did-we-do-so-far"><a href="#how-did-we-do-so-far" class="phenomic-HeadingAnchor">#</a>How did we do so far?</h2>
<h3 id="using-docs"><a href="#using-docs" class="phenomic-HeadingAnchor">#</a>Using docs</h3>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/**
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */</span>
<span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>Good, now the team knows what types the function needs. It doesn't quite prevent runtime errors from happening but at least, hey, it's something.</p>
<h3 id="going-all-the-way-in-dynamic-typing"><a href="#going-all-the-way-in-dynamic-typing" class="phenomic-HeadingAnchor">#</a>Going all the way in dynamic typing</h3>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">"number"</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>()
  }
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">"number"</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>()
  }
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>We can check types at runtime to find possible bugs in a drastic way, but that still doesn't protect us from that one issue that will break our app.</p>
<h3 id="acting-like-its-no-biggie"><a href="#acting-like-its-no-biggie" class="phenomic-HeadingAnchor">#</a>Acting like it's no biggie</h3>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">"number"</span>) {
    a = <span class="hljs-number">0</span>
  }
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">"number"</span>) {
    b = <span class="hljs-number">0</span>
  }
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>That's "defensive programming" for you. Instead of preventing the bug from happening, we tolerate it. In 99% of all cases, the result will definitely not be the one you expected and you won't even know when something went wrong.</p>
<h2 id="how-are-other-languages-doing"><a href="#how-are-other-languages-doing" class="phenomic-HeadingAnchor">#</a>How are other languages doing?</h2>
<p>Other languages use static typing, which means the program won't compile if the types are wrong.</p>
<pre><code class="hljs language-ocaml"><span class="hljs-keyword">let</span> <span class="hljs-keyword">value</span> = <span class="hljs-string">"1"</span>;;

<span class="hljs-keyword">value</span> + <span class="hljs-number">1</span>;;</code></pre>
<p>If you try to run the above code, OCaml will grace you with a nice</p>
<pre><code>File "test.ml", line 3, characters 0-5:
Error: This expression has type string but an expression was expected of type
         int
</code></pre>
<h2 id="okay-how-do-we-get-this-in-js"><a href="#okay-how-do-we-get-this-in-js" class="phenomic-HeadingAnchor">#</a>Okay, how do we get this in JS?</h2>
<p>That's the part where <a href="http://flowtype.org">Flow</a>, a static analysis tool for JS, does its magic; it detects typing incompatibilities in your code.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">const</span> add = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">return</span> a + b
}

add(<span class="hljs-number">1</span>, <span class="hljs-string">"1"</span>)</code></pre>
<pre><code>6: multiply(1, "1")
   ^^^^^^^^^^^^^^^^ function call
3:   return a * b
                ^ string. This type is incompatible with
3:   return a * b
            ^^^^^ number
</code></pre>
<p>In the previous case, Flow analyses your code and understands that an operation of a <code>string</code> and a <code>number</code> is not directly possible.
This means we can have code running on the first try every time, because Flow eliminates all our stupid little mistakes. As a bonus, it also avoids useless unit tests on types.</p>
<p>Flow also adds a syntax to define expected types in a given situation. We use <code>:</code> followed by the type the value should have.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// built-in types are naturally understood by flow</span>
<span class="hljs-keyword">const</span> foo: string = <span class="hljs-string">"foo"</span>
<span class="hljs-keyword">const</span> bar: number = <span class="hljs-number">3</span>
<span class="hljs-comment">// we can add typing to values within an array</span>
<span class="hljs-keyword">const</span> baz: <span class="hljs-built_in">Array</span>&#x3C;string> = [<span class="hljs-string">"foo"</span>, <span class="hljs-string">"bar"</span>]
<span class="hljs-comment">// we can add typing to structures</span>
<span class="hljs-keyword">const</span> object: { <span class="hljs-attr">foo</span>: string, <span class="hljs-attr">bar</span>: number } = { foo, bar }
<span class="hljs-comment">// or define allowed literal values</span>
<span class="hljs-keyword">const</span> value: <span class="hljs-string">"enabled"</span> | <span class="hljs-string">"disabled"</span> = <span class="hljs-string">"enabled"</span>
<span class="hljs-comment">// or type unions</span>
<span class="hljs-keyword">const</span> stringOrNumber: string | number = <span class="hljs-string">"foo"</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">array: Array&#x3C;number></span>): <span class="hljs-title">number</span> </span>{
  <span class="hljs-keyword">return</span> array.reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =></span> acc + item, <span class="hljs-number">0</span>)
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
  name: string;
  <span class="hljs-keyword">constructor</span>(name: string) { <span class="hljs-keyword">this</span>.name = name }
}
<span class="hljs-comment">// or even use prototypal relations to add typing to a specific value</span>
<span class="hljs-keyword">const</span> person: Person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"foo"</span>)</code></pre>
<p>Flow allows creation of typing aliases, which is essential to share them within a codebase. A syntax for importing types from a file also exists. Those imports are purged from the build.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">import</span> type { MediaType } <span class="hljs-keyword">from</span> <span class="hljs-string">"./MediaType"</span>

<span class="hljs-keyword">export</span> type UserType = {
  <span class="hljs-attr">username</span>: string,
  firstName?: string,
  lastName?: string,
  <span class="hljs-attr">email</span>: string,
  <span class="hljs-attr">avatar</span>: MediaType,
}</code></pre>
<p>When you write code that doesn't care about types, you can use <em>generics</em> which are kinda like type placeholders.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// `T here, is a type that will defined at the call-site</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findLast</span>&#x3C;<span class="hljs-title">T</span>> (<span class="hljs-params">
  array: Array&#x3C;T>,
  func: (item: T, index: number, array: Array&#x3C;T></span>) => <span class="hljs-title">any</span>
): <span class="hljs-title">null</span> | <span class="hljs-title">T</span> </span>{
  <span class="hljs-keyword">let</span> index = array.length
  <span class="hljs-keyword">while</span>(--index >= <span class="hljs-number">0</span>) {
    <span class="hljs-keyword">const</span> item = array[index]
    <span class="hljs-keyword">if</span>(func(item, index, array)) {
      <span class="hljs-keyword">return</span> item
    }
  }
  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>
}

<span class="hljs-comment">// Flow knows that in this case, `T` will be a number</span>
<span class="hljs-keyword">const</span> lastEvenNumber: ?number = findLast(
  [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> ],
  (item) => item % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>
)</code></pre>
<p>Flow also allows typing by expected partial structure.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// the interface allows to ensure that the tested value contains</span>
<span class="hljs-comment">// a `getName` method that returns a `string`</span>
interface named {
  getName(): string,
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
  name: string;
  <span class="hljs-keyword">constructor</span>(name: string) {
    <span class="hljs-keyword">this</span>.name = name
  }
  getName() {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name
  }
}

<span class="hljs-keyword">const</span> person: named = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Luke Skywalker"</span>)</code></pre>
<p>React is supported out of the box, and Flow can be used to replace <code>propTypes</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> type { Element <span class="hljs-keyword">as</span> ReactElement } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> type { UserType } <span class="hljs-keyword">from</span> <span class="hljs-string">"../types/UserType"</span>

<span class="hljs-comment">// &#x3C;DefaultProps, Props, State></span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span>&#x3C;<span class="hljs-title">void</span>, <span class="hljs-title">Props</span>, <span class="hljs-title">void</span>> </span>{
  render(): ReactElement {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>></span>
        {user.username}
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
    )
  }
}

type Props = {
  <span class="hljs-attr">user</span>: UserType,
}</code></pre>
<h2 id="but-that-isnt-valid-js"><a href="#but-that-isnt-valid-js" class="phenomic-HeadingAnchor">#</a>But that isn't valid JS</h2>
<p>Don't panic, there are babel plugins for that:</p>
<pre><code class="hljs language-console">npm install --<span class="hljs-keyword">save</span>-dev babel-<span class="hljs-keyword">plugin</span>-<span class="hljs-keyword">syntax</span>-flow babel-<span class="hljs-keyword">plugin</span>-transform-flow-strip-types</code></pre>
<p>and then you only have to add <code>"syntax-flow"</code> and <code>"transform-flow-strip-types"</code> to your <code>.babelrc</code>.</p>
<h2 id="what-if-i-cant-use-babel-on-my-project"><a href="#what-if-i-cant-use-babel-on-my-project" class="phenomic-HeadingAnchor">#</a>What if I can't use babel on my project?</h2>
<p>Well first off, sorry for you. But you still can use Flow with nice comments.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">const</span> add = (a<span class="hljs-comment">/*: number */</span>, b<span class="hljs-comment">/*: number */</span>)<span class="hljs-comment">/*: number */</span> => {
  <span class="hljs-keyword">return</span> a + b
}

add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</code></pre>
<p>Alright, now none of you have any excuses not to type your JS so it would be quite a good idea to go on <a href="http://flowtype.org/docs/getting-started.html#_">Flow's website</a> to learn a little more about it.</p>
<p>Buh-bye.</p>
]]></description><link>http://putaindecode.io/en/articles/js/flow/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/flow/</guid><pubDate>Tue, 07 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction √† Flow, pour du code qui tourne du premier coup]]></title><description><![CDATA[<pre><code class="hljs language-javascript"><span class="hljs-built_in">document</span>.body.firstChild.getBoundingClientRect()</code></pre>
<p>Cette hypoth√©tique ligne de code ne fonctionne pas tout le temps.</p>
<p>La raison c'est que <code>element.firstChild</code> est un <code>Node</code> et que tous les <code>Node</code> ne poss√®dent pas la m√©thode <code>getBoundingClientRect</code>, que l'on trouve syst√©matiquement sur les <code>Element</code>, une classe h√©ritant de <code>Node</code>.</p>
<p>Ce type d'erreur est assez commun, et malheureusement JavaScript n'en fout pas une pour nous pr√©venir que <em>attention l√† √ßa peut merder</em>. Le langage pr√©f√®re nous pr√©venir au <em>runtime</em>, quand c'est d√©j√† trop tard, parce que le bug s'est produit.</p>
<p>Et c'est parce que JavaScript est un langage ‚Ä¶ √† typage <strong>faible</strong> et <strong>dynamique</strong>.</p>
<p>Faible, parce que si l'on effectue une op√©ration entre deux valeurs ayant des types incompatibles, JavaScript va essayer de convertir les types de la mani√®re qui lui semble la moins d√©connante.</p>
<p>Exemple <em>feat. la conscience de JavaScript‚Ñ¢</em></p>
<pre><code class="hljs language-javascript"><span class="hljs-string">"1"</span> + <span class="hljs-number">1</span>
<span class="hljs-comment">// bon alors, vu que la string peut √™tre √† peu pr√®s n'importe quoi,</span>
<span class="hljs-comment">// y'a un bon risque pour qu'une conversion en chiffre donne NaN,</span>
<span class="hljs-comment">// donc on va plut√¥t convertir le chiffre en string et faire une</span>
<span class="hljs-comment">// concat√©nation</span>
<span class="hljs-string">"11"</span></code></pre>
<pre><code class="hljs language-javascript"><span class="hljs-string">"1"</span> * <span class="hljs-number">1</span>
<span class="hljs-comment">// putain mais qui a √©crit cette merde encore ?</span>
<span class="hljs-comment">// bon ben l√† si c'est une multiplication j'ai pas le choix,</span>
<span class="hljs-comment">// on va convertir la string en nombre</span>
<span class="hljs-number">1</span></code></pre>
<p>Dynamique, en opposition √† statique, parce que les tests de type sont faits au runtime.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> toLowerCase = <span class="hljs-function">(<span class="hljs-params">value</span>) =></span> {
  <span class="hljs-keyword">return</span> value.toLowerCase()
}

toLowerCase(<span class="hljs-number">3</span>)
<span class="hljs-comment">// bon alors, (3).toLowerCase c'est undefined</span>
<span class="hljs-comment">// undefined c'est pas une fonction, ERREUR</span></code></pre>
<h2 id="comment-on-a-fait-jusque-l√†-"><a href="#comment-on-a-fait-jusque-l%C3%A0-" class="phenomic-HeadingAnchor">#</a>Comment on a fait jusque l√† ?</h2>
<h3 id="de-la-documentation"><a href="#de-la-documentation" class="phenomic-HeadingAnchor">#</a>De la documentation</h3>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/**
 * @param {number} a
 * @param {number} b
 * @returns {number}
 */</span>
<span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>Ah bah c'est bien, maintenant toute l'√©quipe sait quels types sont attendus. √áa n'emp√™che pas les erreurs au runtime mais au moins on est au courant.</p>
<h3 id="aller-√†-fond-dans-le-typage-dynamique"><a href="#aller-%C3%A0-fond-dans-le-typage-dynamique" class="phenomic-HeadingAnchor">#</a>Aller √† fond dans le typage dynamique</h3>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">"number"</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>()
  }
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">"number"</span>) {
    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TypeError</span>()
  }
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>On peut v√©rifier les types au runtime pour d√©tecter les bugs possibles de mani√®re plus drastique en dev, on se retrouvera toujours avec un souci en production, qui fera p√©ter le comportement attendu.</p>
<h3 id="faire-comme-si-c√©tait-pas-grave"><a href="#faire-comme-si-c%C3%A9tait-pas-grave" class="phenomic-HeadingAnchor">#</a>Faire comme si c'√©tait pas grave</h3>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> a !== <span class="hljs-string">"number"</span>) {
    a = <span class="hljs-number">0</span>
  }
  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> b !== <span class="hljs-string">"number"</span>) {
    b = <span class="hljs-number">0</span>
  }
  <span class="hljs-keyword">return</span> a * b
}</code></pre>
<p>On peut faire du "defensive programming". Au lieu de laisser le bug arriver, on le tol√®re. Dans 99% des cas, le r√©sultat ne sera absolument pas celui que l'on attend, et on ne pr√©vient m√™me pas de quand √ßa foire.</p>
<h2 id="comment-√ßa-se-passe-ailleurs-"><a href="#comment-%C3%A7a-se-passe-ailleurs-" class="phenomic-HeadingAnchor">#</a>Comment √ßa se passe ailleurs ?</h2>
<p>D'autres langages utilisent un typage statique, ce qui veut dire que le programme ne compilera pas si les types peuvent √™tre incorrects.</p>
<pre><code class="hljs language-ocaml"><span class="hljs-keyword">let</span> <span class="hljs-keyword">value</span> = <span class="hljs-string">"1"</span>;;

<span class="hljs-keyword">value</span> + <span class="hljs-number">1</span>;;</code></pre>
<p>OCaml, quand vous essayez de faire tourner ce code va vous sortir un gros</p>
<pre><code>File "test.ml", line 3, characters 0-5:
Error: This expression has type string but an expression was expected of type
         int
</code></pre>
<h2 id="et-comment-peut-on-avoir-√ßa-en-js-"><a href="#et-comment-peut-on-avoir-%C3%A7a-en-js-" class="phenomic-HeadingAnchor">#</a>Et comment peut-on avoir √ßa en JS ?</h2>
<p>C'est l√† que <a href="http://flowtype.org">Flow</a> intervient. C'est un outil d'analyse statique de JS. Il d√©tecte les incompatibilit√©s de types au sein du code.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">const</span> multiply = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> {
  <span class="hljs-keyword">return</span> a * b
}

multiply(<span class="hljs-number">1</span>, <span class="hljs-string">"1"</span>)</code></pre>
<pre><code>6: multiply(1, "1")
   ^^^^^^^^^^^^^^^^ function call
3:   return a * b
                ^ string. This type is incompatible with
3:   return a * b
            ^^^^^ number
</code></pre>
<p>Dans le cas pr√©c√©dent, Flow analyse le code et comprend qu'une op√©ration entre <code>string</code> et <code>number</code> comporte une incompatibilit√©.</p>
<p>Du coup, on peut avoir du code qui tourne du premier coup parce qu'il a √©limin√© toutes nos petites erreurs b√™tes. En prime, √ßa permet d'arr√™ter de faire des tests unitaires bateau sur les types.</p>
<p>Flow ajoute par ailleurs une syntaxe pour d√©finir les types attendus dans une situation donn√©e. On utilise <code>:</code> suivi du type attendu.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// les types built-ins sont compris naturellement par flow</span>
<span class="hljs-keyword">const</span> foo: string = <span class="hljs-string">"foo"</span>
<span class="hljs-keyword">const</span> bar: number = <span class="hljs-number">3</span>
<span class="hljs-comment">// on peut typer les valeurs contenues dans un array</span>
<span class="hljs-keyword">const</span> baz: <span class="hljs-built_in">Array</span>&#x3C;string> = [<span class="hljs-string">"foo"</span>, <span class="hljs-string">"bar"</span>]
<span class="hljs-comment">// on peut typer des structures</span>
<span class="hljs-keyword">const</span> object: { <span class="hljs-attr">foo</span>: string, <span class="hljs-attr">bar</span>: number } = { foo, bar }
<span class="hljs-comment">// d√©finir des valeurs lit√©rales autoris√©es</span>
<span class="hljs-keyword">const</span> value: <span class="hljs-string">"enabled"</span> | <span class="hljs-string">"disabled"</span> = <span class="hljs-string">"enabled"</span>
<span class="hljs-comment">// des unions de types</span>
<span class="hljs-keyword">const</span> stringOrNumber: string | number = <span class="hljs-string">"foo"</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">array: Array&#x3C;number></span>): <span class="hljs-title">number</span> </span>{
  <span class="hljs-keyword">return</span> array.reduce(<span class="hljs-function">(<span class="hljs-params">acc, item</span>) =></span> acc + item, <span class="hljs-number">0</span>)
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
  name: string;
  <span class="hljs-keyword">constructor</span>(name: string) { <span class="hljs-keyword">this</span>.name = name }
}
<span class="hljs-comment">// utiliser la relation prototypale pour typer une valeur</span>
<span class="hljs-keyword">const</span> person: Person = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"foo"</span>)</code></pre>
<p>Flow permet √©galement de cr√©er des alias de types, ce qui est essentiel pour les partager au sein d'une codebase. Une syntaxe pour importer les types de fichier existe √©galement. Ces imports sont supprim√©s du build final.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">import</span> type { MediaType } <span class="hljs-keyword">from</span> <span class="hljs-string">"./MediaType"</span>

<span class="hljs-keyword">export</span> type UserType = {
  <span class="hljs-attr">username</span>: string,
  firstName?: string,
  lastName?: string,
  <span class="hljs-attr">email</span>: string,
  <span class="hljs-attr">avatar</span>: MediaType,
}</code></pre>
<p>Lorsque l'on √©crit du code qui se fout du type, on peut utiliser les <em>generics</em>, qui est une sorte de placeholder de type.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// `T` est ici un type qui sera d√©fini au call-site.</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findLast</span>&#x3C;<span class="hljs-title">T</span>> (<span class="hljs-params">
  array: Array&#x3C;T>,
  func: (item: T, index: number, array: Array&#x3C;T></span>) => <span class="hljs-title">any</span>
): <span class="hljs-title">null</span> | <span class="hljs-title">T</span> </span>{
  <span class="hljs-keyword">let</span> index = array.length
  <span class="hljs-keyword">while</span>(--index >= <span class="hljs-number">0</span>) {
    <span class="hljs-keyword">const</span> item = array[index]
    <span class="hljs-keyword">if</span>(func(item, index, array)) {
      <span class="hljs-keyword">return</span> item
    }
  }
  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>
}

<span class="hljs-comment">// Flow sait que dans ce cas `T` est un nombre</span>
<span class="hljs-keyword">const</span> lastEvenNumber: ?number = findLast(
  [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> ],
  (item) => item % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>
)</code></pre>
<p>Flow permet √©galement de typer par structure partielle attendue.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-comment">// l'inteface `named` permet de s'assurer que la valeur test√©e contient</span>
<span class="hljs-comment">// une m√©thode `getName` retournant une `string`</span>
interface named {
  getName(): string,
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>{
  name: string;
  <span class="hljs-keyword">constructor</span>(name: string) {
    <span class="hljs-keyword">this</span>.name = name
  }
  getName() {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name
  }
}

<span class="hljs-keyword">const</span> person: named = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Luke Skywalker"</span>)</code></pre>
<p>React est support√© directement, et Flow peut remplacer les <code>propTypes</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">import</span> React, { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> type {¬†Element <span class="hljs-keyword">as</span> ReactElement } <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>
<span class="hljs-keyword">import</span> type {¬†UserType } <span class="hljs-keyword">from</span> <span class="hljs-string">"../types/UserType"</span>

<span class="hljs-comment">// &#x3C;DefaultProps, Props, State></span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span>&#x3C;<span class="hljs-title">void</span>, <span class="hljs-title">Props</span>, <span class="hljs-title">void</span>> </span>{
  render(): ReactElement {
    <span class="hljs-keyword">return</span> (
      <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span>></span>
        {user.username}
      <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></span>
    )
  }
}

type Props = {
  <span class="hljs-attr">user</span>: UserType,
}</code></pre>
<h2 id="mais-cest-pas-du-js-valide"><a href="#mais-cest-pas-du-js-valide" class="phenomic-HeadingAnchor">#</a>Mais c'est pas du JS valide</h2>
<p>Pas de panique, pour √ßa il existe des plugins babel:</p>
<pre><code class="hljs language-console">npm install --<span class="hljs-keyword">save</span>-dev babel-<span class="hljs-keyword">plugin</span>-<span class="hljs-keyword">syntax</span>-flow babel-<span class="hljs-keyword">plugin</span>-transform-flow-strip-types</code></pre>
<p>et vous n'avez plus qu'√† ajouter <code>"syntax-flow"</code> et <code>"transform-flow-strip-types"</code> √† votre <code>.babelrc</code>.</p>
<h2 id="mais-je-peux-pas-utiliser-babel-sur-mon-projet"><a href="#mais-je-peux-pas-utiliser-babel-sur-mon-projet" class="phenomic-HeadingAnchor">#</a>Mais je peux pas utiliser babel sur mon projet</h2>
<p>C'est ballot, mais tu peux quand m√™me utiliser Flow avec de jolis commentaires.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">/* @flow */</span>
<span class="hljs-keyword">const</span> add = (a<span class="hljs-comment">/*: number */</span>, b<span class="hljs-comment">/*: number */</span>)<span class="hljs-comment">/*: number */</span> => {
  <span class="hljs-keyword">return</span> a + b
}

add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</code></pre>
<p>Allez, maintenant pas d'excuse pour ne pas typer son JS, donc ce serait pas mal d'aller sur <a href="http://flowtype.org/docs/getting-started.html#_">le site de Flow</a> pour en savoir un peu plus.</p>
<p>Bisous bisous.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/flow/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/flow/</guid><pubDate>Tue, 07 Jun 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[D√©ploiement continu avec Travis-CI (et GitHub Pages)]]></title><description><![CDATA[<p>On va partir comme √ßa : on a un projet sur git et tous les commits dans la
branche <code>master</code> provoqueront une mise en production automatique une fois les
tests valid√©s.</p>
<p>Les autres commits sur les autres branches et pull/merge requests joueront juste
les tests pour notifier l'√©tat. Quand m√™me.</p>
<h2 id="cest-qui-travis"><a href="#cest-qui-travis" class="phenomic-HeadingAnchor">#</a>C'est qui Travis?</h2>
<p><a href="https://travis-ci.com/">Travis-CI</a> est un service en ligne qui permet de tester
et d√©ployer ses applications de mani√®re automatis√©e.</p>
<p>Ce service payant propose une solution gratuite √† tous les projets open source,
ce qui est assez cool. Cette version est disponible sur
<a href="https://travis-ci.org/">travis-ci.org</a>.
Il existe bien entendu plein d'autres services similaires, mais Travis-CI √©tant
tr√®s r√©pandu dans la communaut√© open source, on le prendra pour notre exemple.</p>
<h2 id="configuration-de-travis-ci"><a href="#configuration-de-travis-ci" class="phenomic-HeadingAnchor">#</a>Configuration de Travis-CI</h2>
<p>Travis-CI fonctionne avec un fichier de configuration assez simple. Il n'y a
qu'√† voir <a href="https://github.com/putaindecode/putaindecode.io/blob/master/.travis.yml">le
n√¥tre</a>.</p>
<p>Voici ci-dessous une version minimale pour faire tourner un projet node par
exemple :</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">language:</span> node_js</code></pre>
<p>Oui, c'est tout. Selon le language et/ou les fichiers pr√©sents,
Travis-CI va choisir la commande de test par d√©faut.
Avec node par exemple, ce sera <code>npm test</code> si un package.json est pr√©sent.
Si un <a href="/fr/articles/make/">Makefile</a> est de la partie, Travis-CI va ex√©cuter
<code>make test</code>.</p>
<p>Voici un fichier plus complet avec quelques exemples et trucs bons √† savoir.</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">language:</span> node_js

<span class="hljs-attr">node_js:</span>
<span class="hljs-bullet">  -</span> <span class="hljs-string">'5'</span>
<span class="hljs-bullet">  -</span> ‚Äò<span class="hljs-number">4</span>‚Äô

<span class="hljs-comment"># √©choue d√®s qu'une erreur intervient</span>
<span class="hljs-attr">matrix:</span>
<span class="hljs-attr">  fast_finish:</span> <span class="hljs-literal">true</span>

<span class="hljs-comment"># met en cache node_modules, √† noter que dans ce genre d‚Äôutilisation pour des</span>
<span class="hljs-comment"># biblioth√®ques open source consomm√©es via npm, il ne faudra pas oublier</span>
<span class="hljs-comment"># npm prune utilis√© ci-apr√®s, histoire de ne pas lancer des tests avec</span>
<span class="hljs-comment"># des paquets encore en cache mais non pr√©sents dans le package.json</span>
<span class="hljs-attr">cache:</span>
<span class="hljs-attr">  directories:</span>
<span class="hljs-bullet">    -</span> node_modules

<span class="hljs-attr">before_install:</span>
<span class="hljs-bullet">  -</span> npm prune

<span class="hljs-comment"># ici on peut mettre des commandes √† utiliser avec le script</span>
<span class="hljs-attr">before_script:</span>
  <span class="hljs-comment"># certains runners comme karma, testem ou testling peuvent avoir</span>
  <span class="hljs-comment"># besoin d'un √©cran pour fonctionner, voici l'astuce :)</span>
<span class="hljs-bullet">  -</span> export DISPLAY=:<span class="hljs-number">99.0</span>
<span class="hljs-bullet">  -</span> sh -e /etc/init.d/xvfb start

<span class="hljs-comment"># si on veut utiliser autre chose que la commande par d√©faut</span>
<span class="hljs-attr">script:</span> npm run test-with-coverage

<span class="hljs-comment"># voici un exemple de ce que l‚Äôon peut faire apr√®s les tests :</span>
<span class="hljs-comment"># on peut lancer une t√¢che qui va envoyer les informations de</span>
<span class="hljs-comment"># pourcentage de couverture de code √† un service tiers.</span>
<span class="hljs-comment"># (eg: http://coveralls.io/, https://codecov.io/)</span>
<span class="hljs-attr">after_success:</span> <span class="hljs-string">'npm run coverage'</span>

<span class="hljs-comment"># partie int√©ressante : ici on ne va d√©ployer que les commits sur la</span>
<span class="hljs-comment"># branche master uniquement pour une version de node</span>
<span class="hljs-comment"># (car sinon on d√©ploierait plusieurs fois‚Ä¶)</span>
<span class="hljs-attr">deploy:</span>
<span class="hljs-attr">  skip_cleanup:</span> <span class="hljs-literal">true</span>
<span class="hljs-attr">  provider:</span> script
<span class="hljs-attr">  script:</span> ./scripts/deploy.sh
<span class="hljs-attr">  on:</span>
<span class="hljs-attr">    branch:</span> master
<span class="hljs-attr">    node:</span> <span class="hljs-string">'5'</span>

<span class="hljs-comment"># variables d'env</span>
<span class="hljs-attr">env:</span>
<span class="hljs-attr">  global:</span>
<span class="hljs-bullet">    -</span> NODE_ENV=production</code></pre>
<h2 id="exemple-concret"><a href="#exemple-concret" class="phenomic-HeadingAnchor">#</a>Exemple concret</h2>
<p>On va prendre un petit projet simple en JavaScript qu‚Äôon va d√©ployer sur GitHub
Pages.
Il va donc nous falloir un token GitHub qu‚Äôon va encrypter via un utilitaire
sp√©cifique afin de ne pas publier cela √† la vue de tous.</p>
<h3 id="g√©n√©rer-un-token-github-encrypt√©-sur-travis-ci"><a href="#g%C3%A9n%C3%A9rer-un-token-github-encrypt%C3%A9-sur-travis-ci" class="phenomic-HeadingAnchor">#</a>G√©n√©rer un token GitHub encrypt√© sur Travis-CI</h3>
<p>Le plus simple est d‚Äôutiliser l'interface GitHub pour <a href="https://github.com/settings/tokens/new">ajouter un
token</a>.</p>
<h4 id="encryption-du-token-et-utilisation"><a href="#encryption-du-token-et-utilisation" class="phenomic-HeadingAnchor">#</a>Encryption du token et utilisation</h4>
<p>Maintenant, nous allons encrypter ce token. Vous avez 2 possibilit√©s :</p>
<ul>
<li>soit installer le paquet node <code>travis-encrypt</code></li>
<li>soit installer la gem ruby <code>travis</code> (qui embarque la commande <code>encrypt</code>)</li>
</ul>
<h5 id="via-la-gem-ruby-travis"><a href="#via-la-gem-ruby-travis" class="phenomic-HeadingAnchor">#</a>Via la gem Ruby <code>travis</code></h5>
<pre><code class="hljs language-console">$ sudo gem <span class="hljs-keyword">install</span> travis
$ travis <span class="hljs-keyword">encrypt</span> <span class="hljs-comment">--add --repo {YOU/YOUR_REPO} GITHUB_TOKEN={YOUR_TOKEN}</span></code></pre>
<h5 id="via-le-paquet-node-travis-encrypt"><a href="#via-le-paquet-node-travis-encrypt" class="phenomic-HeadingAnchor">#</a>Via le paquet Node <code>travis-encrypt</code></h5>
<pre><code class="hljs language-bash">$ npm i -g travis-encrypt
$ travis-encrypt --add --repo {YOU/YOUR_REPO} GITHUB_TOKEN={YOUR_TOKEN}</code></pre>
<p>Les 2 commandes devraient ajouter automatiquement le token encrypt√© dans votre
<code>.travis.yml</code> dans la section <code>env.global</code>.</p>
<pre><code class="hljs language-yml"><span class="hljs-comment"># ‚Ä¶</span>

<span class="hljs-attr">env:</span>
<span class="hljs-attr">  global:</span>
<span class="hljs-bullet">    -</span> NODE_ENV=production
    <span class="hljs-comment"># Ajouter un petit commentaire pour indiquer que c‚Äôest votre token GitHub</span>
    <span class="hljs-comment"># GITHUB_TOKEN</span>
    <span class="hljs-comment"># cela permettra, si vous avez d‚Äôautres variables encrypt√©es et</span>
    <span class="hljs-comment"># que vous devez changer de token pour X raison(s), de savoir lequel</span>
    <span class="hljs-comment"># supprimer</span>
<span class="hljs-attr">    - secure:</span> vqhHD....ROxGPQo= <span class="hljs-comment"># VOTRE TOKEN DOIT ETRE PAR LA</span>
    <span class="hljs-comment"># vous aller maintenant ajouter une url utilisant le token</span>
    <span class="hljs-comment"># (pensez √† ajuter l'url du repo)</span>
<span class="hljs-bullet">    -</span> GIT_DEPLOY_REPO=https://$GITHUB_TOKEN@github.com/YOU/YOUR_REPO.git

    <span class="hljs-comment"># ici vous pouvez d√©finir en plus d'autres variables non encrypt√©es</span>
    <span class="hljs-comment"># qui seront r√©utilsables par la suite</span></code></pre>
<h3 id="automatisation"><a href="#automatisation" class="phenomic-HeadingAnchor">#</a>Automatisation</h3>
<p>Imaginons que vous ayez un projet √† deployer sur GitHub Pages (exemple : vous
g√©n√©rez un site statique avec <a href="https://phenomic.io/">Phenomic</a>, le g√©n√©rateur
de site statique qu'on utilise).
Vous allez devoir g√©n√©rer votre projet, puis ensuite pousser le dossier g√©n√©r√©
sur votre branche <code>gh-pages</code>.</p>
<h4 id="utiliser-la-t√¢che-de-d√©ploiement-seulement-si-n√©cessaire"><a href="#utiliser-la-t%C3%A2che-de-d%C3%A9ploiement-seulement-si-n%C3%A9cessaire" class="phenomic-HeadingAnchor">#</a>Utiliser la t√¢che de d√©ploiement seulement si n√©cessaire</h4>
<p>Travis-CI poss√®de une √©tape qui s'ex√©cute apr√®s le succ√®s des tests afin de
pouvoir faire un deploiement.</p>
<p><a href="https://docs.travis-ci.com/user/deployment/">https://docs.travis-ci.com/user/deployment/</a></p>
<p>Dans notre cas, on va choisir un provider tr√®s simple : un script bash.</p>
<p><strong>Par d√©faut, ceci sera execut√© pour tous les commits, sur toutes les
branches.</strong></p>
<p>On va donc devoir ajuster un peu le tir, car par exemple les commits sur
<code>gh-pages</code> ne doivent rien faire (d√©j√† pour √©viter la boucle infinie).
Il en sera de m√™me pour les commits sur d'autres branches de travail ainsi que
les pull/merge requests, comme on l‚Äôa vu dans le pr√©c√©dent exemple.</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">deploy:</span>

  <span class="hljs-comment"># tr√®s important, on garde notre build, sans √ßa, nos fichiers build√©s</span>
  <span class="hljs-comment"># sont supprim√©s.</span>
<span class="hljs-attr">  skip_cleanup:</span> <span class="hljs-literal">true</span>

<span class="hljs-attr">  provider:</span> script
<span class="hljs-attr">  script:</span> ./scripts/deploy.sh

  <span class="hljs-comment"># ici on pose notre restriction</span>
<span class="hljs-attr">  on:</span>
<span class="hljs-attr">    branch:</span> master
<span class="hljs-attr">    node:</span> <span class="hljs-string">'5'</span></code></pre>
<h4 id="√âcrire-notre-fameux-scriptsdeploysh"><a href="#%C3%89crire-notre-fameux-scriptsdeploysh" class="phenomic-HeadingAnchor">#</a>√âcrire notre fameux <code>scripts/deploy.sh</code></h4>
<p>Dans le cas d‚Äôun d√©ploiement de dossier sur une branche <code>gh-pages</code>, on peut
faire de mani√®re assez simple avec le script suivant :</p>
<pre><code class="hljs language-sh"><span class="hljs-meta">#!/usr/bin/env bash
</span>
<span class="hljs-comment"># on lit GIT_DEPLOY_REPO ou si y‚Äòa pas on tente le package.json repository field</span>
<span class="hljs-comment"># (il faut une string et pas un objet dans ce cas)</span>
GIT_DEPLOY_REPO=${GIT_DEPLOY_REPO:-$(node <span class="hljs-_">-e</span>
<span class="hljs-string">'process.stdout.write(require("./package.json").repository)'</span>)}

<span class="hljs-comment"># on se d√©place dans le dossier de build</span>
<span class="hljs-built_in">cd</span> dist &#x26;&#x26; \
<span class="hljs-comment"># on repart sur un repo git vierge, pas besoin de versionner quelque chose qui</span>
<span class="hljs-comment"># se build</span>
$(npm bin)/rimraf .git
git init &#x26;&#x26; \
<span class="hljs-comment"># il faut quelques infos pour que git soit content</span>
git config user.name <span class="hljs-string">"Travis CI"</span> &#x26;&#x26; \
git config user.email <span class="hljs-string">"github@travis-ci.org"</span> &#x26;&#x26; \
<span class="hljs-comment"># on met tout dans git et on commit</span>
git add . &#x26;&#x26; \
git commit -m <span class="hljs-string">"Deploy to GitHub Pages"</span> &#x26;&#x26; \
<span class="hljs-comment"># puis on force push sur gh-pages</span>
git push --force <span class="hljs-string">"<span class="hljs-variable">${GIT_DEPLOY_REPO}</span>"</span> master:gh-pages</code></pre>
<h2 id="ya-plus-qu√†-"><a href="#ya-plus-qu%C3%A0-" class="phenomic-HeadingAnchor">#</a>Y'a plus qu'√† !</h2>
<p>Et voil√† ! On pousse un commit sur <code>master</code> et la magie devrait op√©rer !</p>
<p><em>Note : pour commiter sans d√©clencher un build sur Travis-CI, il suffit d'ajouter
<code>[ci skip]</code> dans votre message de commit. Pratique quand on modifie juste un
README par exemple.</em></p>
<p>Cette m√©thode est celle que nous utilisons pour g√©n√©rer et deployer notre site
statique. Et cela permet, par exemple, si quelqu'un corrige une typo depuis
l'interface en ligne de GitHub, de n'avoir rien d'autre √† faire que de ¬´ merger ¬ª
la correction
(et pour rappel : vous pouvez <strong>modifier</strong> n'importe quel article via le lien
situ√© plus bas).</p>
<p>Travis ex√©cutera nos tests, g√©n√®rera notre site si les tests sont bons et mettra
√ßa en production. Les mises en prod' le vendredi √† 19 h 45 ? M√™me pas peur.</p>
]]></description><link>http://putaindecode.io/fr/articles/ci/travis-ci/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/ci/travis-ci/</guid><pubDate>Tue, 19 Apr 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Angular 1.5 : un pas de plus vers les web-components]]></title><description><![CDATA[<p>Ce post a √©t√© √©crit √† la lumi√®re du
<a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md#150-rc1-quantum-fermentation-2016-01-15">changelog d'Angular 1.5.0 rc1</a>.<br>
Toutes information est succeptible d'√©voluer au cours des publications de
nouvelles versions du framework.</p>
<h2 id="le-petit-nouveau--component"><a href="#le-petit-nouveau--component" class="phenomic-HeadingAnchor">#</a>Le petit nouveau : <code>.component()</code></h2>
<p>Avec l'arriv√©e imminente de la version 2, Angular commence lentement √† pr√©parer la
transition et apporte de nombreux changements √† la v1 pour tenter de
combler l'√©cart entre les deux et rendre les changements moins p√©nibles.  </p>
<p>On voit donc progressivement apparaitre de nouvelles fonctionnalit√©s comme :</p>
<ul>
<li><del>un <a href="https://angular.github.io/router/">nouveau router</a> ?</del> </li>
<li>la possibilit√© d'<a href="https://docs.angularjs.org/api/ngResource/service/$resource#cancelling-requests">annuler une resource</a></li>
<li>les transclusions multiples</li>
<li>la compilation paresseuse des transclusions</li>
</ul>
<p>Mais le point qui nous int√©resse particuli√®rement ici n'est autre que
le nouveau <em>helper</em> permettant la d√©claration de similis
<a href="https://fr.wikipedia.org/wiki/Composants_web">composants web</a>, aka web-components.</p>
<p>Les habitu√©s connaissaient d√©j√† <a href="https://docs.angularjs.org/api/ng/service/$compile"><code>angular.directive()</code></a>,
un <em>helper</em> permettant la d√©claration de composants r√©utilisables.
<code>angular.directive()</code> s'est donc enrichi au cours des ann√©es en faisant un atout
incontournable du framework de par sa flexibilit√© et sa simplicit√©.  </p>
<p>Mais toutes ces possibilit√©s de d√©claration n'√©taient plus vraiment en phase avec
les sp√©cifications du W3C, <code>angular.component()</code> se pr√©sente donc un retour aux sources.</p>
<h2 id="de-directive-√†-component"><a href="#de-directive-%C3%A0-component" class="phenomic-HeadingAnchor">#</a>De <code>.directive()</code> √† <code>.component()</code></h2>
<p>Pour comprendre √† quoi on arrive, il faut savoir de quoi on est parti.
De toute √©vidence vous ne pourrez pas transformer toutes vos vieilles directives
en composants web, du moins, pas sans compromis. </p>
<p>Pour rappel une directive Angular est d√©finie par un objet JavaScript pouvant comporter
les attributs suivants :</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> directiveObj = {
  <span class="hljs-attr">template</span>          : <span class="hljs-string">'&#x3C;div>&#x3C;/div>'</span>,
  <span class="hljs-attr">transclude</span>        : <span class="hljs-literal">false</span>,
  <span class="hljs-attr">restrict</span>          : <span class="hljs-string">'EA'</span>,
  <span class="hljs-attr">scope</span>             : <span class="hljs-literal">false</span>,
  <span class="hljs-attr">bindToController</span>  : <span class="hljs-literal">false</span>,
  <span class="hljs-attr">controller</span>        : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{ },
  <span class="hljs-attr">controllerAs</span>      : <span class="hljs-string">'stringIdentifier'</span>,
}</code></pre>
<h3 id="restriction-√†-la-forme-√©l√©mentaire"><a href="#restriction-%C3%A0-la-forme-%C3%A9l%C3%A9mentaire" class="phenomic-HeadingAnchor">#</a>Restriction √† la forme √©l√©mentaire</h3>
<p>Ceux qui utilisent les directives Angular de mani√®re r√©guli√®re ne sont pas sans savoir
qu'il est possible de les instancier de 4 mani√®res diff√©rentes dans son HTML en
modifiant l'attribut <code>restrict</code> :</p>
<ul>
<li>comme un √©l√©ment avec <code>restrict : 'E'</code></li>
<li>comme un attribut avec <code>restrict : 'A'</code></li>
<li>comme une classe avec <code>restrict : 'C'</code> (d√©conseill√©)</li>
<li>comme un commentaire avec <code>restrict : 'M'</code> (fortement d√©conseill√©)</li>
</ul>
<p>On peut aussi autoriser l'utilisation mixe en combinant les lettres : <code>restrict : 'EAC'</code></p>
<p><code>restrict</code> n'est donc plus configurable et est restreint <em>(sans mauvais jeu de mot)</em>
√† la forme <code>'E'</code> en faisant un composant de fa√ßon claire.</p>
<h3 id="isolement-du-scope"><a href="#isolement-du-scope" class="phenomic-HeadingAnchor">#</a>Isolement du scope</h3>
<p>Contrairement √† <code>.directive()</code>, <code>.component()</code> force l'isolement du scope,
ainsi on colle √† la specification : le composant web est agnostique du contexte.</p>
<p>l'attribut <code>scope</code> est donc forc√© √† <code>{}</code> et n'est plus configurable.</p>
<h3 id="passage-de-param√®tres-via-bindings"><a href="#passage-de-param%C3%A8tres-via-bindings" class="phenomic-HeadingAnchor">#</a>Passage de param√®tres via <code>bindings</code></h3>
<p>La propri√©t√© <code>scope</code> n'√©tant plus disponible <code>component</code>. Il faut √† pr√©sent utiliser la propri√©t√© <code>bindings</code>. La syntaxe de celle-ci est √©quivalent √† celle de la propri√©t√© <code>scope</code>. Mais les √©l√©ments pass√©s sont automatiquement attach√©s √† l'instance du contr√¥leur li√© au <code>component</code>.</p>
<p>Notons, que s'il reste possible d'utiliser la syntaxe <code>=</code> (two-way data binding), celle-ci est d√©conseill√©e au profit de la syntaxe <code>&#x3C;</code> (one-way data binding).</p>
<h3 id="utilisation-forc√©e-de-controlleras"><a href="#utilisation-forc%C3%A9e-de-controlleras" class="phenomic-HeadingAnchor">#</a>Utilisation <em>forc√©e</em> de <code>controllerAs</code></h3>
<p>D√©j√† pr√©sent√© comme une <em><a href="https://toddmotto.com/digging-into-angulars-controller-as-syntax/">best practice</a></em>,
<code>controllerAs</code> fait son chemin de mani√®re √©vidente jusqu'au nouveau <em>helper</em>
<code>.component()</code> son utilisation va de pair avec celle de <code>bindings</code>.</p>
<p>L'attribut, qui prend une chaine de caract√®res pour valeur, est √† pr√©sent facultatif.
S'il est omit le controller est automatiquement aliass√© par l'objet <code>$ctrl</code>.</p>
<h2 id="exemple-de-migration"><a href="#exemple-de-migration" class="phenomic-HeadingAnchor">#</a>Exemple de migration</h2>
<p>Prenons l'exemple d'une directive simple et transformons la en composant Angular pour
mettre en √©vidence l'ensemble des changements :</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">hello-world</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"World"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">hello-world</span>></span></code></pre>
<p>La syntaxe <em>directive</em> :</p>
<pre><code class="hljs language-js">angular.directive(<span class="hljs-string">'helloWorld'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloWorld</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">restrict</span>          : <span class="hljs-string">'E'</span>,
    <span class="hljs-attr">scope</span>             : {},
    <span class="hljs-attr">bindToController</span>  : {
      <span class="hljs-attr">name</span> : <span class="hljs-string">'@'</span>
    },
    <span class="hljs-attr">controller</span>        : <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloWorldCtrl</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-keyword">this</span>.logName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name);
      }
    },
    <span class="hljs-attr">controllerAs</span>      : <span class="hljs-string">'hw'</span>,
    <span class="hljs-attr">template</span>          : <span class="hljs-string">'&#x3C;div>&#x3C;span ng-click="hw.logName()">Hello {{hw.name}}!&#x3C;/span>&#x3C;/div>'</span>
  }
});</code></pre>
<p>La syntaxe <em>component</em> :</p>
<pre><code class="hljs language-js">angular.component(<span class="hljs-string">'helloWorld'</span>, {
  <span class="hljs-attr">bindings</span>: {
    <span class="hljs-attr">name</span>: <span class="hljs-string">'@'</span>
  },
  <span class="hljs-attr">controller</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloWorldCtrl</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">this</span>.logName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
      <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name);
    }
  },
  <span class="hljs-attr">template</span> : <span class="hljs-string">'&#x3C;div>&#x3C;span ng-click="$ctrl.logName()">Hi {{$ctrl.name}}!&#x3C;/span>&#x3C;/div>'</span>
});</code></pre>
<p>Les changements sont l√©gers mais permettent une lecture am√©lior√©e des attributs.
Le composant est donc une version simplifi√©e de la directive, plus en phase avec
la logique d'Angular 2.</p>
<p>Ce nouveau <em>helper</em> permet donc l'introduction progressive des <em>web-components</em> au
sein d'Angular en vue de leur int√©gration et utilisation active dans la version 2.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/angular/components/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/angular/components/</guid><pubDate>Tue, 12 Apr 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hello Swift]]></title><description><![CDATA[<blockquote>
<p>Le <strong>Swift</strong> est un langage de programmation pr√©sent√© en <strong>2014</strong> par
<strong>Apple</strong>. Il a √©t√© cr√©√© pour simplifier le d√©veloppement d'applications pour
les environnements d'Apple (iOS, OS X, tvOS, watchOS), car les nouveaux
d√©veloppeurs,  non habitu√©s √† <code>Objective C</code>, trouvent souvent celui-ci  trop dur
√† appr√©hender. En 2015, Apple pr√©sente <strong>Swift 2.0</strong>, une version finalis√©e et
stable du langage. <strong>Swift</strong> est <strong>open-source</strong> depuis novembre 2015.</p>
</blockquote>
<h2 id="le-playground"><a href="#le-playground" class="phenomic-HeadingAnchor">#</a>Le playground</h2>
<p>Avec Swift, Apple a introduit un nouveau moyen de s'amuser avec du code : le
<strong>playground</strong>. C'est √† mi-chemin entre le script <code>python</code> et le <code>main de C</code>.
Vous pouvez y √©crire des <code>fonctions</code>, y d√©finir des <code>classes</code>, mais aussi y
ex√©cuter du code en direct. Tout ceci est vraiment pratique pour <strong>tester des
algorithmes</strong>, des animations ou plus simplement <strong>apprendre √† maitriser le
langage</strong>. Les <code>playgrounds</code> servent √† prototyper plus qu‚Äô√† √©crire de vrais
outils.</p>
<p>Gr√¢ce √† un partenariat entre Apple et IBM,  vous pouvez faire du <strong>Swift sur
votre navigateur</strong> avec Bluemix. La plate-forme de cloud coding d'IBM
<a href="https://swiftlang.ng.bluemix.net">swiftlang.ng.bluemix.net</a> offre ainsi un
<strong><code>playground</code> en ligne</strong> pour apprendre et vous entrainer en <strong>Swift</strong>. Donc
plus de limitation due √† l'OS pour apprendre !</p>
<p>Sur OS X vous pouvez utiliser les <code>playground</code> avec Xcode, l'IDE d'Apple. Pour
cr√©er un  <strong><code>playground</code></strong>,  vous ouvrez Xcode et <code>File‚ÜíNew‚ÜíPlayground</code>(ou
<kbd>‚å•</kbd> + <kbd>‚áß</kbd> + <kbd>‚åò</kbd> + <kbd>N</kbd>). Vous nommez votre
<code>playground</code> et choisissez une plate-forme pour utiliser des frameworks
sp√©cifiques pour chaque environnement (iOS ou OS X).</p>
<p><img src="./playground.jpg" alt="Playground"></p>
<p>Enfin, Swift peut √™tre utilis√© comme langage de script, en cr√©ant un fichier
<code>.swift</code>, √† ex√©cuter dans le terminal avec <code>swift [file].swift</code>. Cette m√©thode
offre peu de confort, car m√™me en ouvrant le fichier sur Xcode vous n'aurez pas
l'autocompl√©tion. Mais si vous √™tes un mordu de <strong>Linux</strong>, sachez qu'il existe
un compilateur Swift Linux fourni par Apple sur la <a href="https://swift.org/download/#linux">page d√©di√©e sur
swift.org</a>.</p>
<h2 id="les-variables"><a href="#les-variables" class="phenomic-HeadingAnchor">#</a>Les variables</h2>
<p>Les variables peuvent √™tre constantes ou non. Le pr√©compilateur d'Xcode est
assez strict avec la notion de constante. Si vous d√©clarez une variable non
constante mais que vous ne la modifiez nulle part, il vous proposera toujours de
la passer en constante.</p>
<pre><code class="hljs language-swift"><span class="hljs-comment">// Exemple de variables/constantes</span>
<span class="hljs-keyword">var</span> aVariable:<span class="hljs-type">Type</span> = something <span class="hljs-comment">// variable (mutable)</span>
<span class="hljs-keyword">let</span> aConstant:<span class="hljs-type">Type</span> = somethingElse <span class="hljs-comment">// constante</span></code></pre>
<p>Swift est un langage typ√©, mais le type peut √™tre implicite lors de la
d√©claration. Swift typera alors la variable automatiquement.</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> explicitString:<span class="hljs-type">String</span> = <span class="hljs-string">"Mario"</span>
<span class="hljs-keyword">let</span> implicitString = <span class="hljs-string">"Luigi"</span> <span class="hljs-comment">// This is a string too</span></code></pre>
<p>Par d√©faut, les variables ne peuvent pas √™tre nulles. Pour qu'une variable soit
dite <em>optionelle</em>, il faut d√©clarer une variable explicite en ajoutant un <code>?</code> √†
son type.</p>
<pre><code class="hljs language-swift"><span class="hljs-comment">// Ce code ne compile pas :</span>
<span class="hljs-keyword">var</span> implicitString = <span class="hljs-string">"Luigi"</span>
name = <span class="hljs-literal">nil</span> <span class="hljs-comment">// Error : Nil cannot be assigned to type 'String'</span>

<span class="hljs-comment">// Mais celui-ci, si</span>
<span class="hljs-keyword">let</span> explicitOptionalString:<span class="hljs-type">String</span>? = <span class="hljs-string">"Mario"</span>
explicitOptionalString = <span class="hljs-literal">nil</span> <span class="hljs-comment">// Ol√© üíÉ</span></code></pre>
<h2 id="affichage"><a href="#affichage" class="phenomic-HeadingAnchor">#</a>Affichage</h2>
<p>La fonction <code>print()</code> sert √† afficher une cha√Æne de caract√®res dans la console
pour un script ou une application. Pour afficher des variables dans des cha√Ænes
de caract√®res, on utilise cette syntaxe <code>\(maVariable)</code>. Exemple :</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">let</span> age:<span class="hljs-type">Int</span> = <span class="hljs-number">32</span>
<span class="hljs-keyword">let</span> name:<span class="hljs-type">String</span> = <span class="hljs-string">"Luigi"</span>
<span class="hljs-keyword">let</span> point:<span class="hljs-type">Float</span> = <span class="hljs-number">43.4</span>

<span class="hljs-built_in">print</span>(<span class="hljs-string">"<span class="hljs-subst">\(name)</span> have <span class="hljs-subst">\(age)</span> and <span class="hljs-subst">\(point)</span> points"</span>)

<span class="hljs-comment">// Ou</span>
<span class="hljs-keyword">let</span> toPrint:<span class="hljs-type">String</span> = <span class="hljs-string">"<span class="hljs-subst">\(name)</span> have <span class="hljs-subst">\(age)</span> and <span class="hljs-subst">\(point)</span> points"</span>
<span class="hljs-built_in">print</span>(toPrint)</code></pre>
<h2 id="conditions--boucles"><a href="#conditions--boucles" class="phenomic-HeadingAnchor">#</a>Conditions &#x26; boucles</h2>
<p>Un langage sans condition √ßa sert pas √† grand-chose, donc voici la syntaxe :</p>
<pre><code class="hljs language-swift"><span class="hljs-keyword">if</span> (a > x) || (a &#x3C; y) { <span class="hljs-comment">// Si a est plus grand que x ou plus petit que y</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"a > x OR a &#x3C; y "</span>) <span class="hljs-comment">// j'affiche</span>
} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> a &#x3C; z { <span class="hljs-comment">// Sinon si ...</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"a &#x3C; z"</span>)
} <span class="hljs-keyword">else</span> { <span class="hljs-comment">// Sinon</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"y &#x3C;= a &#x3C;= x"</span>)
}</code></pre>
<p>Quelques exemples de boucles <code>while</code> et <code>for</code> :</p>
<pre><code class="hljs language-swift"><span class="hljs-comment">// While</span>
<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>
<span class="hljs-keyword">while</span> i &#x3C; <span class="hljs-number">10</span> { <span class="hljs-comment">// Tant que i &#x3C; 10 j'affiche</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"i = <span class="hljs-subst">\(i)</span>"</span>)
    i+=<span class="hljs-number">1</span> <span class="hljs-comment">// incr√©mente i de 1</span>
}

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>...<span class="hljs-number">10</span>) { <span class="hljs-comment">// pour i de 0 √† 10</span>
	<span class="hljs-built_in">print</span>(i)
}

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>...<span class="hljs-number">10</span>).<span class="hljs-built_in">reverse</span>() { <span class="hljs-comment">// pour i de 1 √† 10 en moonwalk</span>
    <span class="hljs-built_in">print</span>(i)
}

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>.<span class="hljs-built_in">stride</span>(to: <span class="hljs-number">10</span>, by: <span class="hljs-number">2</span>) { <span class="hljs-comment">// pour i de 0 √† 10 par saut de 2 (10 non compris)</span>
    <span class="hljs-built_in">print</span>(i)
}

<span class="hljs-comment">// autre notation de For utilisant des Ranges</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..&#x3C;<span class="hljs-number">3</span>{
    <span class="hljs-built_in">print</span>(i)
}

<span class="hljs-comment">// For-In : Pour mes √©l√©ments d'un Array</span>
<span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> myCollection {
    element.doSomething()
}

<span class="hljs-comment">// For-In : en enumurant la boucle</span>
<span class="hljs-keyword">for</span> (index,valeur) <span class="hljs-keyword">in</span> myCollection.<span class="hljs-built_in">enumerate</span>(){
	<span class="hljs-built_in">print</span>(<span class="hljs-string">"valeur √† l'index [<span class="hljs-subst">\(index)</span>] -> <span class="hljs-subst">\(valeur)</span>"</span>)
}</code></pre>
<blockquote>
<p>Depuis Swift 2.2, les notations <code>--</code> et <code>++</code> sont d√©pr√©ci√©es, donc plus de i++ dans les boucles üò©. Ce qui explique aussi que les boucles For C-Style sont aussi d√©pr√©ci√©es. Ex:<code>for var i = 0; i &#x3C; 3; i++</code>. Pour ce genre de boucle il faut utiliser la notation <code>(0...3)</code>.</p>
</blockquote>
<h2 id="fonctions"><a href="#fonctions" class="phenomic-HeadingAnchor">#</a>Fonctions</h2>
<p>Un script sans fonction c'est comme une raclette sans Saint-Nectaire. Beaucoup
de d√©butants le font mais une fois qu'on y a gout√©, il est impossible s'en
passer !</p>
<p>Donc voici la syntaxe <del>d'un Saint-Nectaire</del>... d'une fonction :</p>
<pre><code class="hljs language-swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myFunctionName</span><span class="hljs-params">(myStringInput:String,myIntInput:Int)</span></span>-><span class="hljs-type">Int</span>{

    <span class="hljs-comment">// Votre code</span>
    <span class="hljs-keyword">return</span> <span class="hljs-number">42</span> <span class="hljs-comment">// Retour</span>
}</code></pre>
<p>En r√©alit√©, les fonctions sont un cas particulier d'utilisation d'une notion
introduite par Swift qu'ils appellent les <em>closures</em>. Pour les amateurs de
<em>Block</em> (Objective C, C++14) et  <strong>Lambdas</strong> (C++, Java,...), les closures
seront d√©taill√©es dans un prochain article.</p>
<h2 id="le-mot-de-la-fin"><a href="#le-mot-de-la-fin" class="phenomic-HeadingAnchor">#</a>Le mot de la fin</h2>
<p>Avec tout √ßa vous devriez d√©j√† vous amuser un peu !
Pour information, les scripts Swift peuvent <strong>utiliser <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/ObjC_classic/">Foundation</a></strong>
sur Linux ou OS X , le framework de base des OS d'Apple bien connu des
d√©veloppeurs OS X/iOS. Il permet le traitement des fichiers, des <code>String</code> et
<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/ObjC_classic/">bien plus</a>.</p>
]]></description><link>http://putaindecode.io/fr/articles/swift/hello/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/swift/hello/</guid><pubDate>Tue, 01 Mar 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Vers les CSS modules]]></title><description><![CDATA[<blockquote>
<p>Je crois que m√™me avant que je sache exactement ce qu'√©tait le CSS, j'avais
d√©j√† entendu quelqu'un me dire "Je HAIS le CSS". Cette phrase √©tait souvent dite
par un de mes amis du back-end, et souvent pour de tr√®s bonnes raisons. Cet
article n'essaiera pas de d√©fendre ni de vous faire aimer le CSS, mais comme les
outils de d√©veloppement front-end √©voluent rapidement, je trouve int√©ressant
d'expliquer les nouvelles fa√ßons d'√©crire le CSS.</p>
</blockquote>
<h2 id="retour-aux-bases"><a href="#retour-aux-bases" class="phenomic-HeadingAnchor">#</a>Retour aux bases</h2>
<p>D'abord, pour comprendre quel sont les probl√®mes que les nouveaux outils tentent
de r√©soudre, un petit rappel sur ce qu'est le CSS : <em>Cascading Style Sheets</em> ou
<em>Feuilles de style en cascade</em>.</p>
<p>Une feuille de style ? C'est facile ! C'est un bout de code qui lie des "styles"
√† du HTML.
En cascade ? Et bien, quelques fois un √©l√©ment HTML peut correspondre √†
plusieurs styles, et "en cascade" est le groupe de r√®gles qui permet de
d√©terminer lequel appliquer.</p>
<p>Voici du code CSS basique : nous voulons que nos titres h1 soient rouges.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: red;
}</code></pre>
<p>Ici, nous lions la <strong><em>r√®gle (ou d√©claration)</em></strong> <code>color: red</code> au <strong><em>s√©lecteur</em></strong>
"h1". Un s√©lecteur peut contenir plusieurs r√®gles dans son bloc de d√©clarations.</p>
<blockquote>
<p>Et les derni√®res lueurs de bonheur s'√©teignent alors que nous entrons dans
l'enfer de la cascade</p>
</blockquote>
<h2 id="le-truc-qui-cascade"><a href="#le-truc-qui-cascade" class="phenomic-HeadingAnchor">#</a>Le truc qui cascade</h2>
<p>La cascade est pour moi un d√©sastre qui rend le CSS tr√®s compliqu√© √† maintenir
si on ne suit pas de lignes directrices ou on n'utilise pas d'outils pour
l'√©crire. Je vais vous montrer quelques exemples simples pour vous expliquer les
principaux concepts de la cascade, mais gardez en t√™te que la plupart des
applications web contiennent de nos jours beaucoup de code, aggravant les effets
de la cascade.</p>
<p>La n√©cessit√© d'avoir un syst√®me comme la cascade vient du fait que le CSS permet
√† plusieurs r√®gles de style de s'appliquer √† un m√™me √©l√©ment, ces derni√®res
pouvant m√™me venir de plusieurs origines (du site, mais aussi du navigateur ou
encore m√™me de l'utilisateur). Il faut donc pouvoir d√©finir dans ce cas-l√†
quelle est la r√®gle qui au final sera appliqu√©e. Pour cela, la cascade donne √†
chacune un poids, calcul√© selon un certain nombre de crit√®res, et applique la
r√®gle la plus lourde. Cela peut paraitre simple au premier abord, mais les
crit√®res de calcul de poids ne le sont pas du tout.</p>
<p>Les r√®gles qui sont les plus l√©g√®res dans la cascade ne sont pas vraiment un
probl√®me, mais il faut les connaitre afin de s'√©viter des surprises :</p>
<h3 id="les-valeurs-par-d√©faut-du-navigateur"><a href="#les-valeurs-par-d%C3%A9faut-du-navigateur" class="phenomic-HeadingAnchor">#</a>Les valeurs par d√©faut du navigateur</h3>
<p>Voici le haut de la cascade. Ce sont les r√®gles qui font qu'un titre h1 est gros
m√™me si on ne l'a pas sp√©cifi√©.</p>
<h3 id="lh√©ritage-des-parents"><a href="#lh%C3%A9ritage-des-parents" class="phenomic-HeadingAnchor">#</a>L'h√©ritage des parents</h3>
<p>Ensuite, les r√®gles sont h√©rit√©es depuis les √©l√©ments HTML parents. Si on
reprend notre √©l√©ment h1, si une r√®gle <code>color: blue</code> est d√©finie sur l'√©l√©ment
<code>body</code>, le titre va en h√©riter, et sera donc bleu.</p>
<p>Ceci √©tant dit, on entre maintenant dans un niveau plus douloureux de la
cascade.</p>
<h3 id="lordre-des-r√®gles"><a href="#lordre-des-r%C3%A8gles" class="phenomic-HeadingAnchor">#</a>L'ordre des r√®gles</h3>
<p>La position d'une r√®gle par rapport aux autres va influer sur son poids.
Deux r√®gles auraient pu avoir le m√™me poids si elles √©taient √† la m√™me position
mais, au final, c'est la derni√®re qui sera la plus lourde et sera donc
appliqu√©e.
<strong><em>La derni√®re.</em></strong>
Quand il s'agit de code assez simple, cela peut √™tre facilement
compr√©hensible :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: red;
  <span class="hljs-attribute">color</span>: blue;
}</code></pre>
<p>Facile, n'est-ce pas ? Le titre sera bleu ! Mais s'il y a une r√®gle <code>color: red</code> dans un fichier CSS nomm√© <em>foo.css</em>, et une r√®gle <code>color: blue</code> dans un
autre fichier nomm√© <em>bar.css</em>, que le fichier <em>foo.css</em> met plus de temps que le
fichier <em>bar.css</em> √† charger, mais que le tag HTML r√©f√©ren√ßant <em>foo.css</em> est
avant celui de <em>bar.css</em>, quelle r√®gle est appliqu√©e ? Eh bien, c'est plus
compliqu√© √† savoir. <em>(indice : le temps de chargement n'est pas pris en compte)</em></p>
<h3 id="la-sp√©cificit√©-des-s√©lecteurs"><a href="#la-sp%C3%A9cificit%C3%A9-des-s%C3%A9lecteurs" class="phenomic-HeadingAnchor">#</a>La sp√©cificit√© des s√©lecteurs</h3>
<p>Ce crit√®re est un niveau de complexit√© au-dessus des autres, <a href="https://specificity.keegan.st">si bien que des
personnes en ont fait des calculettes pour le
simplifier</a>. Je ne vais pas rentrer dans les
d√©tails, mais il faut savoir que le poids d'un s√©lecteur est √©gal √† la somme des
poids de tous les s√©lecteurs le composant.
Et que tous les s√©lecteurs n'ont pas le m√™me poids.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.title</span> {
  <span class="hljs-attribute">color</span>: red;
}

<span class="hljs-selector-tag">body</span> <span class="hljs-selector-tag">header</span> <span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: blue;
}</code></pre>
<p>Ici, le premier s√©lecteur p√®se 10 parce qu'il contient un s√©lecteur de classe
CSS, qui p√®se lui-m√™me 10. Le deuxi√®me s√©lecteur quant √† lui p√®se 3, parce qu'il
contient trois s√©lecteurs de tag, pesant chacun 1. Et donc, comme 10 > 3, le
titre h1 sera rouge !</p>
<h3 id="les-styles-inline"><a href="#les-styles-inline" class="phenomic-HeadingAnchor">#</a>Les styles inline</h3>
<p>Les r√®gles qui sont dans l'attribut ‚Äústyle‚Äù d'un √©l√©ment HTML sont plus lourdes
que n'importe quel s√©lecteur d√©fini pr√©c√©demment. Et donc voici un titre bleu :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: red;
}</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: blue;"</span>></span>Title<span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span></code></pre>
<h3 id="importance"><a href="#importance" class="phenomic-HeadingAnchor">#</a>Importance</h3>
<p>Et enfin le dernier crit√®re, le God Mode, le broyeur de styles, le mot-cl√©
<strong><em>!important.</em></strong> Quand on veut VRAIMENT que le titre soit rouge :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: red <span class="hljs-meta">!important</span>;
}</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: blue;"</span>></span>Title<span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span></code></pre>
<p>Et comme toute la cascade est √† propos de poids, si deux r√®gles sont marqu√©es
comme !important, le reste des crit√®res est toujours pris en compte pour
calculer laquelle est la plus lourde, et donc appliqu√©e.</p>
<p><strong>‚Ä¶Et on ne peut pas faire plus compliqu√© que √ßa.</strong> Maintenant, imaginez des
milliers et des milliers de s√©lecteurs et r√®gles cascadant les uns sur les
autres pour d√©finir le style d'un site, et vous comprendrez l'enfer que peut
√™tre le CSS. Ainsi, des d√©veloppeurs CSS ont imagin√© diff√©rentes m√©thodologies
et outils pour √©viter ce cauchemar !</p>
<h2 id="l√©volution-des-outils"><a href="#l%C3%A9volution-des-outils" class="phenomic-HeadingAnchor">#</a>L'√©volution des outils</h2>
<p>Maintenant, je vais vous pr√©senter comment ma fa√ßon d'√©crire du CSS a √©volu√© au
fil du temps. Ne vous attendez pas √† une chronologie compl√®te de tous les
outils invent√©s depuis la cr√©ation du CSS en 1996 (j'avais 6 ans !) mais plut√¥t
une explication de comment je me suis d√©brouill√© avec la cascade dans ma courte
exp√©rience personnelle.</p>
<h3 id="pr√©-processeurs"><a href="#pr%C3%A9-processeurs" class="phenomic-HeadingAnchor">#</a>Pr√©-processeurs</h3>
<p>J'ai commenc√© √† developper des applications web en 2012, en plein √¢ge d'or <a href="/fr/articles/css/preprocesseurs/">des
pr√©-processeurs</a>. Ils
√©taient apparus quelques ann√©es auparavant, comme le CSS lui-m√™me n'√©tait pas
suffisamment adapt√© pour construire des sites complexes. Les pr√©-processeurs
sont des compilateurs qui g√©n√®rent du code CSS √† partir de languages l√©g√®rement
diff√©rents, comme <a href="http://sass-lang.com">Sass</a> ou <a href="http://lesscss.org">LESS</a>.
Ces nouveaux languages permettent de cr√©er des variables par exemple, ou
d'imbriquer des s√©lecteurs, entre autres merveilleuses nouvelles
fonctionnalit√©s.</p>
<p>On peut transformer ce vieux code CSS compliqu√© √† maintenir :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">body</span> {
  <span class="hljs-attribute">background</span>: <span class="hljs-number">#E5E5E5</span>;
}

<span class="hljs-selector-tag">body</span> <span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;
}</code></pre>
<p>en cette bien <em>meilleure</em> version :</p>
<pre><code class="hljs language-scss"><span class="hljs-variable">$textColor</span>: <span class="hljs-number">#333333</span>;

<span class="hljs-selector-tag">body</span> {
  <span class="hljs-attribute">background</span>: lighten(<span class="hljs-variable">$textColor</span>, <span class="hljs-number">90%</span>);

  <span class="hljs-selector-tag">h1</span> {
    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$textColor</span>
  }
}</code></pre>
<p>Avec ces nouveaux outils, et pour √©viter aux r√®gles d'entrer en collision dans
la cascade, nous avons commenc√© √† imbriquer nos s√©lecteurs et √† r√©pliquer toute
notre structure HTML dans le code de notre pr√©-processeur favori. Notre CSS se
retrouva donc avec des s√©lecteurs tr√®s long et lourds qui √©taient associ√©s
uniquement avec un element HTML pr√©cis, comme ce dernier :</p>
<blockquote>
<p>.searchPage¬†.sideBar¬†.refinements.default¬†.category¬†.star input</p>
</blockquote>
<p>Et √ßa a plut√¥t bien march√© au d√©but ! Mais ces s√©lecteurs n'√©taient pas les plus
performants, et la structure du HTML √©tant r√©pliqu√©e, n'importe quel changement
dans cette derni√®re doit √™tre r√©percut√© dans les styles. Donc je suis pass√© √†
autre chose.</p>
<h3 id="m√©thodologies-css"><a href="#m%C3%A9thodologies-css" class="phenomic-HeadingAnchor">#</a>M√©thodologies CSS</h3>
<p>√Ä ce moment, quelques nouvelles guidelines CSS ont commenc√© a attirer mon
attention. On pouvait les utiliser avec les pr√©-processeurs, et avaient pour but
d'√©viter les collisions dans la cascade (tout comme l'imbrication des
s√©lecteurs) avec un certain nombre de r√®gles, comme sur le nommage des
s√©lecteurs.</p>
<p>Ces m√©thodologies sont arriv√©es au moment ou je commen√ßais √† d√©couper mes
d√©veloppements en composants. L'imbrication des s√©lecteurs ne marchait pas tr√®s
bien avec ces derniers, vu que le but est de cr√©er des bouts de code
r√©utilisables partout dans la web app, comme un bouton par exemple. La
m√©thodologie que j'utilise (toujours aujourd'hui) est appel√©e <a href="/fr/articles/css/bem/">BEM, pour Block
Element Modifier</a>, mais il y en a
d'autres avec le m√™me but : chaque √©l√©ment HTML de mes composants doit avoir une
classe CSS qui lui est unique. De cette fa√ßon, pas besoin d'imbrication, et pas
de collision de la cascade !</p>
<p>Et ce code de pr√©-processeur¬†:</p>
<pre><code class="hljs language-scss"><span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$textColor</span>

  img {
    border: <span class="hljs-number">1px</span> solid black;
  }
}</code></pre>
<p>se transforme en :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.Title</span> {
  <span class="hljs-attribute">color</span>: $textColor
}

<span class="hljs-selector-class">.Title-icon</span> {
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;
}</code></pre>
<p>√âvidement, le code HTML doit √™tre mis √† jour avec les nouvelles classes, mais
les s√©lecteurs sont maintenant courts et compr√©hensibles. Et ceci, sans aucune
chance de collision de cascade.</p>
<p>Maintenant, pour pouvoir mieux expliquer un dernier outil, celui qui je pense va
r√©soudre tous nos probl√®mes, il faut que je vous montre une autre approche pour
contourner les probl√®mes de la cascade :</p>
<h3 id="frameworks-css"><a href="#frameworks-css" class="phenomic-HeadingAnchor">#</a>Frameworks CSS</h3>
<p>Ici, pour √©viter √† nos r√®gles CSS d'entrer en collision, nous‚Ä¶ n'en √©crivons
plus !
Les frameworks CSS sont des styles d√©j√† √©crits qu'on peut utiliser avec des
classes CSS sp√©cifiques. Il y a deux approches ici :</p>
<ul>
<li>
<p>Les frameworks de styles "finaux" comme <a href="http://getbootstrap.com">Bootstrap</a>.
Il suffit d'ajouter la classe <code>btn</code> sur un √©l√©ment HTML et‚Ä¶ tada¬†! C'est
maintenant un magnifique bouton. Certaines variables sont modifiables pour
transformer le look global du framework.</p>
</li>
<li>
<p>Les frameworks de styles "utilitaires" comme <a href="http://tachyons.io">Tachyons</a>.
Ici, il n'y a pas de styles pr√©-d√©finis, mais plein de classes utilitaires
sont disponibles, comme <code>pam</code> pour donner un <em>medium padding</em> √† un √©l√©ment,
ou encore <code>ba</code> pour lui donner une <em>border all</em> tout autour.</p>
</li>
</ul>
<p>Les frameworks utilitaires sont assez int√©ressants, du fait que le fichier CSS
final fera autour de 10kB et jamais plus, m√™me si le site grandit ! Mais il y
aura beaucoup de classes peu compr√©hensibles dans le code HTML. C'est comparable
aux styles inline, avec une optimization de poids final, comme <code>ba</code> est plus
court que <em>‚Äúborder-style: solid; border-width: 1px;‚Äù</em></p>
<p>Ces frameworks nous √©vitent tout tracas avec la cascade ! Mais je n'aimais pas
le fait d'utiliser un framework, ainsi qu'avoir beaucoup de classes non
compr√©hensibles dans mon code HTML. Cependant, la totale r√©utilisabilit√© et
modularit√© des styles, sans probl√®mes de cascade, sont impressionnants.</p>
<p>Cela nous am√®ne donc √† cet outil g√©nial, forg√© directement avec la meilleure
magie JavaScript :</p>
<h3 id="css-modules"><a href="#css-modules" class="phenomic-HeadingAnchor">#</a>CSS Modules</h3>
<p>Ce concept a d'abord pris forme suite √† une simple observation : de nos jours,
le CSS est compil√© √† partir d'autres languages pour permettre une √©criture plus
facile, et pour cette m√™me raison le HTML est aussi g√©n√©r√© gr√¢ce √† des outils de
templating en JavaScript. Mais les s√©lecteurs CSS, le lien entre les √©l√©ments et
les styles, ceux-la m√™me auxquels le codeur doit faire tr√®s attention pour
√©viter qu'ils n'entrent en collision, n'ont pas d'outils du tout.</p>
<p>Et <a href="https://github.com/css-modules/css-modules">CSS Modules</a> fut cr√©√©. La
premi√®re fonctionnalit√© int√©ressante est la g√©n√©ration automatique des noms de
classes CSS. Plus d'inqui√©tude sur leur unicit√©, on peut les nommer comme on
veut, au final ceux g√©n√©r√©s dans le HTML seront uniques. Promis. Cela nous
permet de r√©√©crire ce code CSS en BEM, et HTML :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.Title</span> {
  <span class="hljs-attribute">color</span>: $textColor;
}</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"Title"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span></code></pre>
<p>en ce code CSS et template JavaScript :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.styleName</span> {
  <span class="hljs-attribute">color</span>: $textColor
}</code></pre>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./style.css'</span>;
<span class="hljs-string">`&#x3C;h1 class=<span class="hljs-subst">${styles.styleName}</span>>&#x3C;/h1>`</span></code></pre>
<p>Une fois compil√©, ce code g√©n√©rera quelque chose comme √ßa :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.styleName__abc5436</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;
}</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"styleName__abc5436"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span></code></pre>
<p>Une casc-quoi ? Je ne sais pas ce que c'est ! ‚ù§Ô∏è</p>
<p>La deuxi√®me fonctionnalit√© g√©niale, directement inspir√©e par les frameworks CSS
modulaires comme Tachyons, est la composition des styles. De la m√™me fa√ßon qu'en
ajoutant plusieurs classes utilitaires sur son √©l√©ment HTML, CSS Modules nous
permet de composer nos classes √† partir de styles communs. Laissez-moi vous
montrer :</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.titleColor</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;
}

<span class="hljs-selector-class">.bigTitle</span> {
  <span class="hljs-attribute">composes</span>: titleColor;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;
}

<span class="hljs-selector-class">.mediumTitle</span> {
  <span class="hljs-attribute">composes</span>: titleColor;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;
}</code></pre>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./style.css'</span>;
<span class="hljs-string">`&#x3C;h1 class=<span class="hljs-subst">${styles.bigTitle}</span>>&#x3C;/h1>
 &#x3C;h2 class=<span class="hljs-subst">${styles.mediumTitle}</span>>&#x3C;/h2>`</span></code></pre>
<p>va g√©n√©rer¬†:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.titleColor__abc5436</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;
}

<span class="hljs-selector-class">.bigTitle__def6547</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;
}

<span class="hljs-selector-class">.mediumTitle__1638bcd</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;
}</code></pre>
<pre><code class="hljs language-js">&#x3C;h1 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"titleColor__abc5436 bigTitle__def6547"</span>><span class="xml"><span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span></span>
&#x3C;h2 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"titleColor__abc5436 mediumTitle__1638bcd"</span>><span class="xml"><span class="hljs-tag">&#x3C;/<span class="hljs-name">h2</span>></span></span></code></pre>
<p>Et ceci, messieurs-dames, est plut√¥t fantastique. Les styles sont modularisables
et composables, et ce sans classes incompr√©hensibles mais directement dans les
feuilles de style. Et les collisions de s√©lecteurs et r√®gles ne sont plus qu'un
mauvais souvenir.</p>
<p>Et c'est ainsi que j'ai exp√©riment√© avec le CSS et sa cascade jusque-l√†.
J'esp√®re que les mois et les ann√©es √† venir vont me surprendre avec de meilleurs
outils et / ou m√©thodologies, et je serais heureux de les apprendre et les
essayer üëç</p>
]]></description><link>http://putaindecode.io/fr/articles/css/modules/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/modules/</guid><pubDate>Tue, 23 Feb 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Toward CSS modules]]></title><description><![CDATA[<blockquote>
<p>I think that even before I ever knew what it was, I already heard someone
telling me ‚ÄúOh god, I HATE CSS‚Äù. This sentence is often said by one of my
backender friends, and often for very good reasons. This post isn‚Äôt going to
defend nor make you embrace CSS¬†, but as front-end tooling is quickly improving,
I find it interesting to explain the new ways of writing it.</p>
</blockquote>
<h2 id="back-to-basics"><a href="#back-to-basics" class="phenomic-HeadingAnchor">#</a>Back to basics</h2>
<p>First, to understand what are the problems that the new tools are attempting to
solve, a small reminder of what CSS is: <em>Cascading Style Sheets</em>.</p>
<p>A style sheet¬†? Boy, that‚Äôs easy¬†! It‚Äôs some code that maps some  ‚Äústyles‚Äù to
HTML elements. Cascading¬†? Well, sometimes more than one (or no) style can match
for an HTML element, and ‚Äúcascading‚Äù is the set of rules that exist to determine
which one to apply.</p>
<p>Let‚Äôs see some basic CSS code: we want our h1 titles to be red.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: red;
}</code></pre>
<p>Here, we map the <strong><em>rule (or declaration)</em></strong> ‚Äúcolor: red‚Äù to the <strong><em>selector</em></strong>
‚Äúh1‚Äù. A selector can contain multiples rules in its declaration block.</p>
<blockquote>
<p>And now the delight dies as we enter the cascade hell.</p>
</blockquote>
<h2 id="the-cascading-thing"><a href="#the-cascading-thing" class="phenomic-HeadingAnchor">#</a>The cascading thing</h2>
<p>The cascade is for me the disaster that makes CSS un-maintainable without
guidelines nor tools when writing it. I‚Äôll show you some examples explaining the
main concepts of the cascade, but they will be quite simple, whereas most web
app nowadays have huge codebases, making the cascade effects bigger.</p>
<p>The need for such a system like the cascade comes from the fact that CSS allows
multiple rules to be applied on the same element, even from different origins
(the website, but also the browser or even from the user). It is therefore
necessary to define what is the rule that ultimately will be applied in this
case.
The cascade gives each rule a weight, calculated from several criteria, and
apply the heaviest on the element.
I could appear simple at first, but the calculations
criteria are not, at all.</p>
<p>The rules that have the lightest cascade weight are not really an issue, but we
have to keep them in mind to avoid surprises:</p>
<h3 id="browser-defaults"><a href="#browser-defaults" class="phenomic-HeadingAnchor">#</a>Browser defaults</h3>
<p>Here is the top of the cascade. These are the rules that makes a h1 title big
even if it isn't specified.</p>
<h3 id="parent-inheritance"><a href="#parent-inheritance" class="phenomic-HeadingAnchor">#</a>Parent inheritance</h3>
<p>Then, the rules are inherited from the parents HTML elements. Back to our h1
element, if there is a ‚Äúcolor: blue‚Äù rule on the body element, the title will
inherit it, and will therefore be blue.</p>
<p>That being said, we now enter a more painful level of cascade weight.</p>
<h3 id="rule-order"><a href="#rule-order" class="phenomic-HeadingAnchor">#</a>Rule order</h3>
<p>The position of a rule compared with others will have an influence on its
weight. Thus, if two rules were to have the same weight if on the same position,
it finally will be the latest that will be the heaviest, and so applied. <strong><em>The
latest.</em></strong> With some quite simple code, it can be easy to understand:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: red;
  <span class="hljs-attribute">color</span>: blue;
}</code></pre>
<p>Easy, right¬†? The h1 will be blue¬†! But if there is a ‚Äúcolor: red‚Äù rule in one
CSS file named <em>foo.css</em>, a ‚Äúcolor: blue‚Äù rule in another file named <em>bar.css</em>,
that the <em>foo.css</em> loading takes more time than <em>bar.css</em>, but that the
<em>foo.css</em> HTML tag is before the <em>bar.css</em> one, which rule is applied¬†? Well,
it‚Äôs quite harder to know. <em>(hint: the loading time is not taken into account)</em></p>
<h3 id="selector-specificity"><a href="#selector-specificity" class="phenomic-HeadingAnchor">#</a>Selector specificity</h3>
<p>This one is a level of complexity higher, <a href="https://specificity.keegan.st">some people even made calculators to
simplify it</a>. I will not enter into much details,
but know that the weight of a selector is equal to the sum of all the weights of
the selectors composing it. And that all selectors does‚Äôt weigh the same.</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.title</span> {
  <span class="hljs-attribute">color</span>: red;
}

<span class="hljs-selector-tag">body</span> <span class="hljs-selector-tag">header</span> <span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: blue;
}</code></pre>
<p>In this example, the first selector‚Äôs weight is 10 because it only contains a
CSS class selector which weigh 10. The second selector‚Äôs weight is 3, because it
contains three tag selectors, weighing each 1. So, as 10 > 3, the h1 title will
be red¬†!</p>
<h3 id="inline-styles"><a href="#inline-styles" class="phenomic-HeadingAnchor">#</a>Inline styles</h3>
<p>The rules that are in the ‚Äústyle‚Äù attribute on a HTML element are heavier than
any selector previously defined. Here is a blue title:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: red;
}</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: blue;"</span>></span>Title<span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span></code></pre>
<h3 id="importance"><a href="#importance" class="phenomic-HeadingAnchor">#</a>Importance</h3>
<p>And last but not least, the God Mode, the crusher of all styles, the
<strong><em>!important</em></strong> keyword. When we REALLY want our title to be red:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: red <span class="hljs-meta">!important</span>;
}</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: blue;"</span>></span>Title<span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span></code></pre>
<p>As all this cascade is about weight, if two rules are marked as¬†!important, the
rest of the criteria is still taken into account to calculate which one is the
heavier, and so applied.</p>
<p><strong>‚Ä¶And that is as bad as it gets.</strong> Now, imagine thousands and thousands of
selectors cascading over themselves to style a website, and you‚Äôll understand
the hell CSS can be. So, some fellow CSS developers imagined several
methodologies and tools to prevent this nightmare to happen¬†!</p>
<h2 id="tooling-evolution"><a href="#tooling-evolution" class="phenomic-HeadingAnchor">#</a>Tooling evolution</h2>
<p>Now I‚Äôll present to you how my way of writing CSS evolved over time. Do not
expect a complete timeline of all the tools invented since the first release of
CSS in 1996 (I was 6 years old¬†!), but a description of how I worked with (or
around) the cascade in my short personal experience.</p>
<h3 id="pre-processors"><a href="#pre-processors" class="phenomic-HeadingAnchor">#</a>Pre-processors</h3>
<p>I began developing web applications in 2012, in the golden age of the
pre-processors. They already had appeared a few years back, as CSS itself wasn‚Äôt
enough to build complex websites. Pre-processors are compilers that generate CSS
from slightly different languages, like <a href="http://sass-lang.com">Sass</a> or
<a href="http://lesscss.org">LESS</a>. These new languages added some fantastic new
features as variables or nesting, among other wonders.</p>
<p>We could transform some old and un-easy to maintain CSS:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-tag">body</span> {
  <span class="hljs-attribute">background</span>: <span class="hljs-number">#E5E5E5</span>;
}

<span class="hljs-selector-tag">body</span> <span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;
}</code></pre>
<p>into this much <em>better</em> version:</p>
<pre><code class="hljs language-scss"><span class="hljs-variable">$textColor</span>: <span class="hljs-number">#333333</span>;

<span class="hljs-selector-tag">body</span> {
  <span class="hljs-attribute">background</span>: lighten(<span class="hljs-variable">$textColor</span>, <span class="hljs-number">90%</span>);

  <span class="hljs-selector-tag">h1</span> {
    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$textColor</span>
  }
}</code></pre>
<p>With these new tools, and to prevent rules to collide in the cascade, we started
nesting and replicating the whole HTML structure into our Sass or LESS code. Our
CSS ended up with super long and heavy selectors matching only and exactly our
element, like this one:</p>
<blockquote>
<p>.searchPage¬†.sideBar¬†.refinements.default¬†.category¬†.star input</p>
</blockquote>
<p>And this worked pretty well for a time¬†! But these selectors weren‚Äôt the more
efficient, and the HTML structure being doubled, any change in it must be passed
on the styles. So I moved on.</p>
<h3 id="css-methodologies"><a href="#css-methodologies" class="phenomic-HeadingAnchor">#</a>CSS Methodologies</h3>
<p>By this time, some new CSS writing guidelines began to drew my attention. They
weren‚Äôt exclusive with pre-processors, and aimed to avoid cascade collision
(just like nesting) with some rules, like on the selector naming.</p>
<p>These methodologies came by the time I started to split my developments into
components. The nesting didn‚Äôt work well with these, as the purpose was to
create bits of code usable everywhere in my web app, like a button for example.
The one I use (still today) is named <a href="https://en.bem.info/method/">BEM, for Block Element
Modifier</a>, but there are others with the same aim:
each HTML element of my component has to have an unique CSS class. This way, no
nesting is needed, and no cascade collision¬†!</p>
<p>And this pre-processed code:</p>
<pre><code class="hljs language-scss"><span class="hljs-selector-tag">h1</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-variable">$textColor</span>

  img {
    border: <span class="hljs-number">1px</span> solid black;
  }
}</code></pre>
<p>was transformed into:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.Title</span> {
  <span class="hljs-attribute">color</span>: $textColor
}

<span class="hljs-selector-class">.Title-icon</span> {
  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;
}</code></pre>
<p>Obviously, the HTML code needed to be updated with the new classes, but the
selectors are now short and self-explanatory¬†! Without any chance of cascade
collision.</p>
<p>Now, and to better explain a final tool, the one I think will solve all our
problems (for now), I must show you another approach of this ‚Äúworking around‚Äù
the cascade:</p>
<h3 id="css-frameworks"><a href="#css-frameworks" class="phenomic-HeadingAnchor">#</a>CSS Frameworks</h3>
<p>Here, to prevent our CSS to collide, we‚Ä¶ stop writing our own¬†! CSS frameworks
are already written styles that we can use with specific CSS classes. There is
two different approaches here:</p>
<ul>
<li>
<p>‚ÄúFinal‚Äù styles framework as <a href="http://getbootstrap.com">Bootstrap</a>: a simple
<em>‚Äúbtn‚Äù</em> class on a HTML element and‚Ä¶ tada¬†! Now it is a magnificent button.
Besides, some variables are available to customize the frameworks‚Äô look.
Utility styles framework, like <a href="http://tachyons.io">Tachyons</a>. Here, there
aren‚Äôt any pre-defined style, but a lot of utility CSS classes are available,
like <em>‚Äúpam‚Äù</em> to make an element have a <em>medium padding</em>, or <em>‚Äúba‚Äù</em> to make it
have a <em>border all</em> around it.</p>
</li>
<li>
<p>The second one is quite interesting, as our final CSS file will only weigh
10kB and never more, even if the  website grows¬†! But the HTML will have a lot
of gibberish classes.
It‚Äôs comparable with having all the styles inline, with a
weight optimization comparable with minification, as <em>‚Äúba‚Äù</em> is shorter than
<em>‚Äúborder-style: solid; border-width: 1px;‚Äù</em>.</p>
</li>
</ul>
<p>These frameworks will keep us from complex CSS cascade calculations¬†! But I
quite didn‚Äôt like the fact to use a framework, and to have a lot of quite
unreadable CSS classes in my HTML. But the full re-usability and modularity of
the styles, without any cascade problems, are awesome.</p>
<p>This bring us to this amazing tool, directly forged with the best JavaScript
magic:</p>
<h3 id="css-modules"><a href="#css-modules" class="phenomic-HeadingAnchor">#</a>CSS Modules</h3>
<p>This concept first took shape from a simple observation: nowadays, the CSS code
is compiled from other languages to make its writing way easier, and for the
same reason HTML code is mainly generated with JavaScript templating tools. But
the CSS selectors, the link between the elements and the styles, the ones for
which the coder really needs to cogitate to prevent them to collide, are not
tooled at all.</p>
<p>And so <a href="https://github.com/css-modules/css-modules">CSS Modules</a> was created.
The first awesome feature is the CSS class names automatic generation. No more
worries about their uniqueness, we can name them as we want, the final one
generated on the HTML element will be unique. Promise. This allows to rewrite
this previous CSS BEM and HTML code:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.Title</span> {
  <span class="hljs-attribute">color</span>: $textColor;
}</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"Title"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span></code></pre>
<p>into this CSS and JS template code:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.styleName</span> {
  <span class="hljs-attribute">color</span>: $textColor
}</code></pre>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./style.css'</span>;
<span class="hljs-string">`&#x3C;h1 class=<span class="hljs-subst">${styles.styleName}</span>>&#x3C;/h1>`</span></code></pre>
<p>And when compiled, this code will generate something like this¬†!</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.styleName__abc5436</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;
}</code></pre>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"styleName__abc5436"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span></code></pre>
<p>A casc-what¬†? I don‚Äôt know what this is¬†! ‚ù§Ô∏è</p>
<p>The second main feature, which is directly inspired by modular CSS frameworks
like Tachyons, is the styles composition. Just like it allowed to style HTML
elements with some common utility classes, CSS modules allows to compose our
classes with common styles. Let me show you¬†!</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.titleColor</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;
}

<span class="hljs-selector-class">.bigTitle</span> {
  <span class="hljs-attribute">composes</span>: titleColor;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;
}

<span class="hljs-selector-class">.mediumTitle</span> {
  <span class="hljs-attribute">composes</span>: titleColor;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;
}</code></pre>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> styles <span class="hljs-keyword">from</span> <span class="hljs-string">'./style.css'</span>;
<span class="hljs-string">`&#x3C;h1 class=<span class="hljs-subst">${styles.bigTitle}</span>>&#x3C;/h1>
 &#x3C;h2 class=<span class="hljs-subst">${styles.mediumTitle}</span>>&#x3C;/h2>`</span></code></pre>
<p>will compile into:</p>
<pre><code class="hljs language-css"><span class="hljs-selector-class">.titleColor__abc5436</span> {
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333333</span>;
}

<span class="hljs-selector-class">.bigTitle__def6547</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;
}

<span class="hljs-selector-class">.mediumTitle__1638bcd</span> {
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;
}</code></pre>
<pre><code class="hljs language-js">&#x3C;h1 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"titleColor__abc5436 bigTitle__def6547"</span>><span class="xml"><span class="hljs-tag">&#x3C;/<span class="hljs-name">h1</span>></span></span>
&#x3C;h2 <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"titleColor__abc5436 mediumTitle__1638bcd"</span>><span class="xml"><span class="hljs-tag">&#x3C;/<span class="hljs-name">h2</span>></span></span></code></pre>
<p>And that, Sir, is pretty awesome. Styles are composable and modularizable, and
not with a lot of gibberish utility classes but directly in the stylesheet. And
styles colliding are just an old nightmare.</p>
<p>That‚Äôs how I‚Äôve been playing around with CSS and its cascade until now. I expect
the months and years to come to surprise me with new and better tools or
methodologies, and I‚Äôll be happy to learn and test them üëç.</p>
]]></description><link>http://putaindecode.io/en/articles/css/modules/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/css/modules/</guid><pubDate>Tue, 23 Feb 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Introduction √† Grid Layout]]></title><description><![CDATA[<p>La mise en page d'un site ou d'une application est toujours quelque chose de
complexe et fastidieux √† d√©velopper/maintenir. Pour cela, de nombreux designs
sont √©labor√©s √† partir d'une grille. En effet, l'objectif de la grille est de
servir de base pour placer les diff√©rents √©l√©ments et de faire en sorte qu'ils
soient align√©s et espac√©s uniform√©ment. Le probl√®me de CSS est qu'il rencontre
beaucoup de lacunes pour mettre en place cette logique.</p>
<p>L'arriv√©e du module <code>Flexbox</code> a commenc√© √† bien faciliter les choses. Toutefois,
ce module n'est pas adapt√© √† toutes les situations et il est bien plus pertinent
sur du layout de composants.</p>
<p>C'est pour cette raison qu'a √©t√© d√©velopp√© le module <code>Grid Layout</code>, plus
puissant et orient√© mise en page.</p>
<h2 id="√âtat-des-lieux"><a href="#%C3%89tat-des-lieux" class="phenomic-HeadingAnchor">#</a>√âtat des lieux</h2>
<p>Parlons des choses qui f√¢chent d√®s le d√©but. √Ä l'heure actuelle la derni√®re
r√©vision date du <a href="http://www.w3.org/TR/css-grid-1/">17 septembre 2015</a> et la
sp√©cification en est toujours √† l'√©tat de <em>working draft</em>.</p>
<p>La compatibilit√© des <a href="http://caniuse.com/#feat=css-grid">navigateurs est quelque peu
limit√©e</a>. Except√© Internet Explorer 10+ (Edge
√©galement), il est n√©cessaire d'activer le flag <code>layout.css.grid.enabled</code> dans
Firefox et <code>experimental Web Platform features</code> pour Chrome pour activer le
support du module.</p>
<p>Autant dire qu'une utilisation en production est relativement pr√©matur√©e, quand
bien m√™me cela ne doit pas nous emp√™cher d'exp√©rimenter ce module.</p>
<h2 id="grid"><a href="#grid" class="phenomic-HeadingAnchor">#</a>Grid</h2>
<p>La notion de Grid n'est pas nouvelle, de multiples frameworks/librairies
utilisent d√©j√† la mise en page en <code>Grid</code> :</p>
<ul>
<li><a href="https://github.com/suitcss/components-grid">SUIT CSS components-grid</a></li>
<li><a href="http://foundation.zurb.com/docs/components/grid.html">Zurb Foundation</a></li>
<li><a href="http://960.gs/">960</a></li>
<li><a href="https://github.com/cssrecipes/grid">cssrecipes Grid</a></li>
</ul>
<p>Toutes ces solutions se basent soit sur du <code>inline-block</code>, soit plus r√©cemment
sur <code>Flexbox</code>. M√™me si elles sont relativement √©l√©gantes, elles n√©cessitent
quand m√™me quelques petits hacks ou tricks pour r√©ussir √† faire quelque chose de
coh√©rent (hello, <code>font-size: 0</code>, goutti√®re, <code>calc</code> avec marge n√©gative, etc.).
La raison est simple¬†: les techniques utilis√©es ne sont pas adapt√©es pour un
syst√®me complet de <code>Grid</code>.</p>
<h2 id="thinking-in-grid"><a href="#thinking-in-grid" class="phenomic-HeadingAnchor">#</a>Thinking in Grid</h2>
<p>De fa√ßon √† pouvoir pr√©senter une partie de la sp√©cification, nous allons partir
sur cette mise en page :</p>
<p><img src="maquette.png" alt="Maquette Grid Layout"></p>
<p>Avant de commencer √† pr√©senter les diff√©rentes propri√©t√©s, r√©fl√©chissons au
concept de <code>Grid</code>.</p>
<h3 id="grid-lines"><a href="#grid-lines" class="phenomic-HeadingAnchor">#</a>Grid lines</h3>
<p>Si on applique cette notion √† notre maquette, voici ce qu'on obtient :</p>
<p><img src="grid-line.png" alt="Caniuse Grid Layout"></p>
<p>Concr√®tement, cela consiste √† d√©couper notre interface de fa√ßon √† pouvoir en
extraire une grille et ainsi virtualiser la position et l'espace pris pour
chaque √©l√©ment.</p>
<p>On va donc pouvoir extrapoler notre UI en lignes (<code>rows</code>), en colonnes
(<code>columns</code>), en cellules (<code>cells</code>) et en zones (<code>areas</code>).</p>
<p>Cette derni√®re notion (<code>areas</code>) est peut-√™tre nouvelle dans la th√©orie, mais va
s'av√©rer tr√®s utile dans la pratique pour la suite.</p>
<h2 id="grid-layout"><a href="#grid-layout" class="phenomic-HeadingAnchor">#</a>Grid Layout</h2>
<p>On dispose de suffisamment d'informations sur notre interface pour d√©marrer
(enfin) notre int√©gration.</p>
<p>Voici le markup que l'on va utiliser pour notre maquette.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"Layout"</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"Header"</span>></span>Header<span class="hljs-tag">&#x3C;/<span class="hljs-name">header</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">aside</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"Aside"</span>></span>Aside<span class="hljs-tag">&#x3C;/<span class="hljs-name">aside</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">main</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"Main"</span>></span>
    Main
  <span class="hljs-tag">&#x3C;/<span class="hljs-name">main</span>></span>
  <span class="hljs-tag">&#x3C;<span class="hljs-name">footer</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"Footer"</span>></span>Footer<span class="hljs-tag">&#x3C;/<span class="hljs-name">footer</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span></code></pre>
<p>Dans un premier temps, nous allons "configurer" notre <code>Grid</code>:</p>
<pre><code class="hljs language-CSS"><span class="hljs-selector-class">.Layout</span> {
  <span class="hljs-comment">/*
   * On d√©clare un nouveau contexte dans le parent
   * qui devient alors un grid-container
   * tous les enfants deviennent des grid-items
   */</span>
   <span class="hljs-attribute">display</span>: grid;

  <span class="hljs-comment">/* Configuration de notre canvas */</span>

  <span class="hljs-comment">/*
   * On d√©finit le nombre de colonnes¬†:
   * - la premi√®re fera 200px de large
   * - la deuxi√®me fera 10px de large
   * - la troisi√®me prendra tout l'espace restant
   */</span>
   <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">200px</span> <span class="hljs-number">10px</span> <span class="hljs-number">1</span>fr;

  <span class="hljs-comment">/*
   * Cette fois-ci au tour des lignes¬†:
   * - la premi√®re fera 70px de haut
   * - la deuxi√®me fera 10px de haut
   * - la troisi√®me ligne s'adaptera √† la hauteur de son contenu
   * - la quatri√®me fera 50px de haut
   */</span>
   <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-number">70px</span> <span class="hljs-number">10px</span> auto <span class="hljs-number">10px</span> <span class="hljs-number">50px</span>;

  <span class="hljs-comment">/*
   * On peut utiliser grid qui est le raccourci
   * des deux propri√©t√©s pr√©c√©dentes
   */</span>
   <span class="hljs-attribute">grid</span>: <span class="hljs-number">200px</span> <span class="hljs-number">10px</span> <span class="hljs-number">1</span>fr / <span class="hljs-number">70px</span> <span class="hljs-number">10px</span> auto <span class="hljs-number">10px</span> <span class="hljs-number">50px</span>;
}</code></pre>
<p>Notre <code>Grid</code> est pr√™te, passons au positionnement de nos √©l√©ments.</p>
<h2 id="grid-area"><a href="#grid-area" class="phenomic-HeadingAnchor">#</a>grid-area</h2>
<p>Pour notre exemple nous allons utiliser la m√©thode la plus originale du module √†
savoir les <code>areas</code>. L'inter√™t de cette m√©thode est de pouvoir contr√¥ler tant en
terme d'espace occup√© que de positionnement les diff√©rentes zones (<code>areas</code>) de
notre grille. On pourrait d√©finir la forme des valeurs de <code>grid-template-areas</code>
comme de l'<code>ASCII art</code>.</p>
<pre><code class="hljs language-CSS"><span class="hljs-selector-class">.Layout</span> {
  <span class="hljs-comment">/**
   * 1. Header s'affichera sur 3 colonnes
   * 2. On utilisera le symbole . pour d√©finir un √©l√©ment
   *    virtuel et ainsi l'utiliser pour d√©finir les goutti√®res
   * 3. Aside s'affichera sur 1 colonne et 3 lignes
   */</span>
  <span class="hljs-attribute">grid-template-areas</span>:
   <span class="hljs-string">"Header Header Header"</span>  <span class="hljs-comment">/* 1 */</span>
   <span class="hljs-string">".        .      .   "</span>  <span class="hljs-comment">/* 2 */</span>
   <span class="hljs-string">"Aside    .     Main "</span>  <span class="hljs-comment">/* 3 */</span>
   <span class="hljs-string">"Aside    .      .   "</span>  <span class="hljs-comment">/* 3 */</span>
   <span class="hljs-string">"Aside    .    Footer"</span>; <span class="hljs-comment">/* 3 */</span>
}

<span class="hljs-comment">/**
 * 1. Il est donc n√©cessaire de nommer chaque √©l√©ment
 *    pour le contr√¥ler dans notre area
 */</span>

<span class="hljs-selector-class">.Header</span> {
  <span class="hljs-attribute">grid-area</span>: Header; <span class="hljs-comment">/* 1 */</span>
}

<span class="hljs-selector-class">.Main</span> {
  <span class="hljs-attribute">grid-area</span>: Main; <span class="hljs-comment">/* 1 */</span>
}

<span class="hljs-selector-class">.Aside</span> {
  <span class="hljs-attribute">grid-area</span>: Aside; <span class="hljs-comment">/* 1 */</span>
}

<span class="hljs-selector-class">.Footer</span> {
  <span class="hljs-attribute">grid-area</span>: Footer; <span class="hljs-comment">/* 1 */</span>
}</code></pre>
<p>Notre int√©gration est termin√©e, on constate qu'avec tr√®s peu d'HTML et de CSS,
on arrive d√©j√† √† quelque chose d'int√©ressant. Il devient alors tr√®s facile de
manipuler et d√©placer nos diff√©rents √©l√©ments en fonction du contexte de notre
application (mobile first, responsive, etc.).</p>
<h2 id="et-cest-pas-fini-"><a href="#et-cest-pas-fini-" class="phenomic-HeadingAnchor">#</a>Et c'est pas fini !</h2>
<p><code>Grid-Layout</code> dispose d'une quantit√© assez impressionnante de propri√©t√©s, il
embarque pratiquement toutes les propri√©t√©s introduites par <code>Flexbox</code>
(<code>align-items</code>, <code>order</code>, <code>justify-content</code> etc..).</p>
<p>De nouvelles fonctions font leur apparition comme <code>repeat</code> (permet d'appliquer
des motifs de r√©p√©tition), mais aussi de nouvelles unit√©s tels que
<code>xfr</code> (fraction de l'espace restant), <code>min-content</code> (se rapporte √† l'√©l√©ment le
plus petit), <code>max-content</code> (se rapporte √† l'√©l√©ment le plus grand). La notion de
<code>subgrid</code> est √©galement pr√©sente pour l'imbrication de grilles.</p>
<p>Il est d'ailleurs tout √† fait possible d'int√©grer une m√™me interface de
plusieurs mani√®res diff√©rentes. Si l'on reprend notre exemple, nous somme partis
sur les propri√©t√©s utilisant les <code>areas</code>, mais on aurait tr√®s bien pu utiliser
<code>grid-row</code> et <code>grid-column</code> qui s'appliquent non pas sur le parent mais sur les
enfants. Cette solution peut s'av√©rer tr√®s pratique pour des syst√®mes de grilles
classiques.</p>
<p><code>Grid Layout</code> est un module tr√®s puissant et tr√®s complet. En le combinant avec
<code>Flexbox</code>, on dispose de suffisament d'outils pour travailler sur des mises en
pages complexes. Reste plus qu'aux navigateurs √† rapidement valider/int√©grer/supporter
cette nouvelle sp√©cification.</p>
]]></description><link>http://putaindecode.io/fr/articles/css/grilles/grid-layout/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/css/grilles/grid-layout/</guid><pubDate>Tue, 05 Jan 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : les Proxy]]></title><description><![CDATA[<h2 id="proxies-origin"><a href="#proxies-origin" class="phenomic-HeadingAnchor">#</a>Proxies Origin</h2>
<h3 id="what-the-dom"><a href="#what-the-dom" class="phenomic-HeadingAnchor">#</a>What the DOM?</h3>
<p>ES5 avait laiss√© un petit trou nomm√©
<em><a href="http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.8">"host objects"</a></em>
afin de donner un "cadre l√©gal" aux trucs bizarres qui peuvent arriver dans le
DOM. Par exemple, certaines collections sont dites
<a href="https://dom.spec.whatwg.org/#concept-collection-live">"live"</a> et m√™me si on ne
touche pas l'objet directement, on se rend compte que la collection a √©t√©
modifi√©e.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">var</span> childNodes = <span class="hljs-built_in">document</span>.body.childNodes;
<span class="hljs-built_in">console</span>.log(childNodes.length); <span class="hljs-comment">// 0</span>
<span class="hljs-built_in">document</span>.body.appendChild(<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>))
<span class="hljs-comment">// Personne n'a touch√© explicitement l'objet dans la variable divs, pourtant :</span>
<span class="hljs-built_in">console</span>.log(childNodes.length); <span class="hljs-comment">// 1, wat!</span></code></pre>
<p>Ce genre de comportement n'est pas explicable par la s√©mantique d'ES5 (√† moins
d'accepter des gros probl√®mes de performances qui consisteraient √† ce que le
DOM garde une r√©f√©rence vers toutes les collections live et les mette √† jour
r√©guli√®rement, ou des getter partout, etc.). La
<a href="https://heycam.github.io/webidl/">spec WebIDL</a> qui fait le lien entre les
objets d√©crits dans les spec W3C et la s√©mantique ECMAScript se contentait d'un
"c'est un <em>host object</em>, all√©, salut les gars les filles !" (en fait, c'√©tait
pire que √ßa¬†:
<a href="http://www.w3.org/TR/DOM-Level-2-Core/ecma-script-binding.html">la spec de
l'√©poque</a>
√©tait absurde tant elle manquait de d√©tails, mais je vous fais la version de
No√´l).</p>
<p>Mais ce genre d'explication n'est pas vraiment acceptable. Et si un navigateur
a un bug, comment je polyfille le comportement correct, hein ?</p>
<p>Les proxies peuvent aider.</p>
<h3 id="quest-il-arriv√©-√†-mon-objet-"><a href="#quest-il-arriv%C3%A9-%C3%A0-mon-objet-" class="phenomic-HeadingAnchor">#</a>Qu'est-il arriv√© √† mon objet ?</h3>
<p>Avant que la plan√®te JS ne s'amourache des
<a href="https://facebook.github.io/immutable-js/">structures des donn√©es immutables</a>,
on cr√©ait des objets et des fois, on les passait √† du code qui les modifiait et
on se demandait bien quand/comment l'objet en question en √©tait arriv√© dans cet
√©tat. Depuis ES5, on peut logger dans des <em>getters</em> et <em>setters</em>, mais on ne
peut pas savoir quand on s'est pris un <code>delete</code> ou un
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze</a>¬†;
on peut constater le r√©sultat, mais c'est dur de remonter √† la source.</p>
<p>Les proxies peuvent aider.</p>
<h3 id="laisse-mon-objet-tranquille-"><a href="#laisse-mon-objet-tranquille-" class="phenomic-HeadingAnchor">#</a>Laisse mon objet tranquille !</h3>
<p>La s√©mantique des objets tel qu'on les utilise permet √† diff√©rents scripts
d'agir sur les m√™mes objets, mais d'une mani√®re qui ne permet pas forc√©ment
toujours un contr√¥le fin. Par exemple, si je donne acc√®s √† la r√©f√©rence d'un
objet √† quelqu'un, il poss√®de cette r√©f√©rence pour toujours et dans la foul√©e
tous les droits associ√©s (donc modifier l'objet arbitrairement souvent) ; il
n'est pas possible de <strong>r√©voquer</strong> l'acc√®s dans le temps. Ce script a aussi
acc√®s √† toutes les propri√©t√©s de l'objet, m√™me si on voudrait n'en partager
que certaines ; il n'est pas facile <strong>d'att√©nuer</strong> les droits √† un objet (sans
cr√©er de nouveaux objets et de se lancer dans des synchronisations co√ªteuses).</p>
<h2 id="les-proxies-comment-√ßa-marche"><a href="#les-proxies-comment-%C3%A7a-marche" class="phenomic-HeadingAnchor">#</a>Les proxies, comment √ßa marche</h2>
<p>Un <strong>proxy</strong> est un nouvel objet (on ne peut pas transformer un objet en un
proxy) qui "emballe" (<em>wrap</em>) un objet existant, la <strong>target</strong> et d√©crit le
comportement du proxy via un objet appel√© le <strong>handler</strong> qui d√©finit les
<em>traps</em> du proxy.</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> target = {<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>};

<span class="hljs-keyword">const</span> handler = {
    get(target, prop){
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"It's a (get) trap!"</span>, prop, target[prop]);
        <span class="hljs-keyword">return</span> target[prop]+<span class="hljs-number">1</span>;
    }
}

<span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler);
<span class="hljs-built_in">console</span>.log(proxy.a);</code></pre>
<p>console output:</p>
<pre><code>It's a (get) trap! a 1 // inside the trap
2 // new value modified by the trap
</code></pre>
<h3 id="liste-des-traps"><a href="#liste-des-traps" class="phenomic-HeadingAnchor">#</a>Liste des traps</h3>
<p>L'exemple ci-dessus montre la trap <code>get</code>. Voici la liste des traps
disponible¬†:</p>
<ul>
<li>
<p>getPrototypeOf</p>
<ul>
<li>pour <code>Object.getPrototypeOf</code></li>
</ul>
</li>
<li>
<p>setPrototypeOf</p>
<ul>
<li>pour <code>Object.setPrototypeOf</code></li>
</ul>
</li>
<li>
<p>isExtensible</p>
<ul>
<li>pour <code>Object.isExtensible</code></li>
</ul>
</li>
<li>
<p>preventExtensions</p>
<ul>
<li>pour <code>Object.preventExtensions</code></li>
</ul>
</li>
<li>
<p>getOwnPropertyDescriptor</p>
<ul>
<li>pour <code>Object.getOwnPropertyDescriptor</code></li>
</ul>
</li>
<li>
<p>defineProperty</p>
<ul>
<li>pour <code>Object.defineProperty</code></li>
</ul>
</li>
<li>
<p>has</p>
<ul>
<li>pour l'op√©rateur <code>in</code></li>
</ul>
</li>
<li>
<p>get</p>
<ul>
<li>pour <em>getter</em> une propri√©t√©</li>
</ul>
</li>
<li>
<p>set</p>
<ul>
<li>pour <em>setter</em> une propri√©t√©</li>
</ul>
</li>
<li>
<p>deleteProperty</p>
<ul>
<li>pour l'op√©rateur <code>delete</code></li>
</ul>
</li>
<li>
<p>enumerate</p>
<ul>
<li>pour les <code>for...in</code> et <code>Object.keys</code></li>
</ul>
</li>
<li>
<p>ownKeys</p>
<ul>
<li>pour <code>Object.getOwnPropertyNames</code></li>
</ul>
</li>
<li>
<p>apply</p>
<ul>
<li>pour quand on appelle le proxy comme une fonction.</li>
</ul>
</li>
<li>
<p>construct</p>
<ul>
<li>pour quand on appelle le proxy comme un constructeur (avec <code>new</code>).</li>
</ul>
</li>
</ul>
<p>Le lecteur attentif aura remarqu√© que cette liste (et les signatures des
fonctions) correspondent √† l'API</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect#Methods">Reflect</a></p>
<h2 id="solutions-aux-probl√®mes-pr√©c√©dents"><a href="#solutions-aux-probl%C3%A8mes-pr%C3%A9c%C3%A9dents" class="phenomic-HeadingAnchor">#</a>Solutions aux probl√®mes pr√©c√©dents</h2>
<h3 id="logger-les-op√©rations"><a href="#logger-les-op%C3%A9rations" class="phenomic-HeadingAnchor">#</a>Logger les op√©rations</h3>
<p>Vous voulez savoir quand on objet se prend un <code>delete</code>¬†? Rien de plus
facile¬†!</p>
<pre><code class="hljs language-js"><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>({<span class="hljs-attr">b</span>: <span class="hljs-number">2</span>}, {
    deleteProperty(target, prop){
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Wow, someone just deleted'</span>, prop);
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.deleteProperty(target, prop);
    },
    freeze(target){
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Wow, someone just froze the object'</span>);
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.freeze(target);
    }
})

<span class="hljs-keyword">delete</span> p.b;
<span class="hljs-built_in">Object</span>.freeze(p);</code></pre>
<h3 id="impl√©menter-des-nodelist-live"><a href="#impl%C3%A9menter-des-nodelist-live" class="phenomic-HeadingAnchor">#</a>Impl√©menter des NodeList live</h3>
<p>Ici, on pr√©tend r√©impl√©menter une collection DOM <em>live</em>.</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getChildNodesLiveCollection</span>(<span class="hljs-params">parent</span>)</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>({}, {
        <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, prop</span>)</span>{
            <span class="hljs-keyword">if</span>(prop === <span class="hljs-string">"length"</span>){
                <span class="hljs-comment">// l'astuce qui n'est pas de la triche , c'est qu'on va</span>
                <span class="hljs-comment">// chercher la valeur au moment de l'appel</span>
                <span class="hljs-keyword">return</span> parent.childNodes.length;
            }
            <span class="hljs-keyword">else</span>
                <span class="hljs-keyword">return</span> target[prop];
        }
    })

}


<span class="hljs-keyword">var</span> liveChildNodes = getChildNodesLiveCollection(<span class="hljs-built_in">document</span>.body);
<span class="hljs-built_in">console</span>.log(liveChildNodes.length); <span class="hljs-comment">// 0</span>
<span class="hljs-built_in">document</span>.body.appendChild(<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>))
<span class="hljs-built_in">console</span>.log(liveChildNodes.length); <span class="hljs-comment">// 1, magie magie !</span></code></pre>
<h3 id="att√©nuation"><a href="#att%C3%A9nuation" class="phenomic-HeadingAnchor">#</a>Att√©nuation</h3>
<p>J'ai un objet avec plein de propri√©t√© et je veux en partager une version
att√©nu√©e √† une biblioth√®que en laquelle je n'ai qu'une confiance partielle.</p>
<pre><code class="hljs language-js"><span class="hljs-comment">// On va se faire MitM avec ce HTTP sans 'S' !</span>
<span class="hljs-keyword">import</span> dubiousLib <span class="hljs-keyword">from</span> <span class="hljs-string">'http://dubious-lib.com/main.js'</span>;

<span class="hljs-keyword">const</span> myImportantObject = {
    <span class="hljs-attr">jfkKillerName</span>: <span class="hljs-string">'...'</span>,
    <span class="hljs-attr">elvisGeoloc</span>: {
        <span class="hljs-attr">long</span>: <span class="hljs-string">'...'</span>,
        <span class="hljs-attr">lat</span>: <span class="hljs-string">'...'</span>
    },
    <span class="hljs-attr">name</span>: <span class="hljs-string">"David Bruant"</span>,
    <span class="hljs-attr">xmasPresentList</span>: [
        <span class="hljs-string">"Raspberry Pi B"</span>,
        <span class="hljs-string">"Nouveau t√©l√©phone (mais pas FirefoxOS, parce qu'ils arr√™tent les
t√©ls)"</span>,
        <span class="hljs-string">"Une bo√Æte de Tic Tac"</span>
    ]
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeWhitelistProxy</span>(<span class="hljs-params">t, whitelist</span>)</span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(t, {
        get(target, prop){
            <span class="hljs-keyword">if</span>(!whitelist.has(prop))
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to access forbidden property'</span>)

            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, prop);
        },
        set(target, prop, value){
            <span class="hljs-keyword">if</span>(!whitelist.has(prop))
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to access forbidden property'</span>)

            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.set(target, prop, value);
        },
        getOwnPropertyDescriptor(target, prop){
            <span class="hljs-keyword">if</span>(!whitelist.has(prop))
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to access forbidden property'</span>)

            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.getOwnPropertyDescriptor(target, prop);
        },
        deleteProperty(target, prop){
            <span class="hljs-keyword">if</span>(!whitelist.has(prop))
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to access forbidden property'</span>)

            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.deleteProperty(target, prop);
        },
        defineProperty(target, prop, desc){
            <span class="hljs-keyword">if</span>(!whitelist.has(prop))
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to access forbidden property'</span>)

            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.defineProperty(target, prop, desc);
        },
        has(target, prop){
            <span class="hljs-keyword">if</span>(!whitelist.has(prop))
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Attempt to access forbidden property'</span>)

            <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.has(target, prop);
        }
    })
}

<span class="hljs-keyword">const</span> attenatedObject = makeWhitelistProxy(
    myImportantObject,
    <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-string">"name"</span>, <span class="hljs-string">"xmasPresentList"</span>])
);

<span class="hljs-built_in">console</span>.log(myImportantObject.name === attenatedObject.name);
<span class="hljs-built_in">console</span>.log(myImportantObject.jfkKillerName); <span class="hljs-comment">// "..."</span>
<span class="hljs-built_in">console</span>.log(attenatedObject.jfkKillerName);
<span class="hljs-comment">// error thrown! 'Error: Attempt to access forbidden property'</span>

dubiousLib(attenatedObject);</code></pre>
<p>On peut imaginer d'autres formes d'att√©nuation, comme ne donner acc√®s qu'en
lecture √† l'objet alors que l'on garde soi-m√™me un acc√®s en √©criture (ce qui
est impossible avec <code>Object.freeze</code>).</p>
<h3 id="r√©vocation"><a href="#r%C3%A9vocation" class="phenomic-HeadingAnchor">#</a>R√©vocation</h3>
<p>On peut r√©voquer l'acc√®s √† un objet en impl√©mentant le <em>pattern</em> "caretaker"</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeCaretaker</span>(<span class="hljs-params">t</span>)</span>{
    <span class="hljs-keyword">return</span> {
        revoke(){
            t = <span class="hljs-literal">undefined</span>;
        },
        <span class="hljs-attr">proxy</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(t, {
            get(target, prop){
                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, prop);
            },
            set(target, prop, value){
                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target, prop, value);
            }
            <span class="hljs-comment">// flemme d'√©crire et vous faire lire les autres traps,</span>
            <span class="hljs-comment">// mais faut toutes les faire ;-)</span>
        })
    }
}

<span class="hljs-keyword">const</span> o = {};
<span class="hljs-keyword">const</span> {revoke, proxy} = makeCaretaker(o);

proxy.a = <span class="hljs-number">12</span>;

<span class="hljs-built_in">console</span>.log(o.a, proxy.a); <span class="hljs-comment">// 12 12</span>

proxy.b = <span class="hljs-number">37</span>;
<span class="hljs-keyword">delete</span> proxy.a;

revoke();

proxy.b; <span class="hljs-comment">// BOOM! TypeError: target is not a non-null object</span></code></pre>
<h4 id="via-un-meta-proxy"><a href="#via-un-meta-proxy" class="phenomic-HeadingAnchor">#</a>...via un meta-proxy</h4>
<p>La petite astuce rigolote avec les proxy, vu que l'API est dite <em>stratifi√©e</em>,
c'est que vu que le handler est un objet, on pourrait en faire un proxy pour
impl√©menter la r√©vocation plus simplement.</p>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeCaretaker</span>(<span class="hljs-params">target</span>)</span>{
    <span class="hljs-keyword">const</span> metaHandler = {
        get(handler, trapName){
            <span class="hljs-keyword">if</span>(!target)
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'Revoked object!'</span>)
            <span class="hljs-keyword">else</span>
                <span class="hljs-comment">// Le miroir entre les traps et l'API Reflect vient de l√† ;-)</span>
                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>[trapName];
        }
    }

    <span class="hljs-keyword">const</span> handler = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>({}, metaHandler);

    <span class="hljs-keyword">return</span> {
        revoke(){
            target = <span class="hljs-literal">undefined</span>;
        },
        <span class="hljs-attr">proxy</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(target, handler)
    };
}

<span class="hljs-keyword">const</span> o = {};
<span class="hljs-keyword">const</span> {revoke, proxy} = makeCaretaker(o);

proxy.a = <span class="hljs-number">12</span>;

<span class="hljs-built_in">console</span>.log(o.a, proxy.a); <span class="hljs-comment">// 12 12</span>

proxy.b = <span class="hljs-number">37</span>;
<span class="hljs-keyword">delete</span> proxy.a;

revoke();

proxy.b; <span class="hljs-comment">// BOOM! TypeError: target is not a non-null object</span></code></pre>
<p>Il fait mal au cr√¢ne au d√©but celui-l√†, mais apr√®s relecture, on se sent bien.</p>
<p>Pour des raisons par tr√®s int√©ressantes, les proxy r√©vocables sont fournis
directement via</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable">Proxy.revocable</a>,
donc, pas besoin de se fatiguer √† le coder avec toutes les traps ou avec un
meta handler.</p>
<h2 id="conclusion"><a href="#conclusion" class="phenomic-HeadingAnchor">#</a>Conclusion</h2>
<p>Les proxies sont un outil bas niveau et puissant. Avec de grands pouvoirs
viennent de grandes responsabilit√©s, alors comprenez bien cet outil avant de
vouloir l'utiliser partout.</p>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/proxy/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/proxy/</guid><pubDate>Fri, 18 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : symbols]]></title><description><![CDATA[<p>Following its goal of enriching primitive types, ES6 introduces symbols.
Familiar to developers in many langages, especially Ruby, symbols bring us a
step further towards the eradication of <em>stringly-typed programming</em>. Symbols
provide us with a more robust way to encode identifiers.</p>
<h2 id="creating-symbols"><a href="#creating-symbols" class="phenomic-HeadingAnchor">#</a>Creating Symbols</h2>
<p>The <code>Symbol()</code> function lets us create new symbols:</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// A simple symbol</span>
<span class="hljs-keyword">const</span> mySymbol = <span class="hljs-built_in">Symbol</span>();
<span class="hljs-keyword">typeof</span> mySymbol === <span class="hljs-string">'symbol'</span> <span class="hljs-comment">// true</span>

<span class="hljs-comment">// A symbol with a label</span>
<span class="hljs-keyword">const</span> myOtherSymbol = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">"label"</span>);


<span class="hljs-comment">// Each symbol is unique</span>
<span class="hljs-keyword">const</span> yetAnotherSymbol = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">"label"</span>);
yetAnotherSymbol === myOtherSymbol; <span class="hljs-comment">// false</span></code></pre>
<p>Each symbol created with <code>Symbol</code> is both unique and immutable. This allows to
avoid collisions: it's impossible to mistakenly have two identical symbols.</p>
<h2 id="implement-an-enum-with-symbols"><a href="#implement-an-enum-with-symbols" class="phenomic-HeadingAnchor">#</a>Implement an <em>enum</em> with symbols</h2>
<p>Instead of using strings as possible values for an <em>enum</em>, it's possible to
use symbols.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> ANIMAL_DOG = <span class="hljs-built_in">Symbol</span>();
<span class="hljs-keyword">const</span> ANIMAL_CAT = <span class="hljs-built_in">Symbol</span>();

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDescription</span>(<span class="hljs-params">animal</span>) </span>{
  <span class="hljs-keyword">switch</span>(animal) {
    <span class="hljs-keyword">case</span> ANIMAL_DOG:
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Loving animal"</span>;
    <span class="hljs-keyword">case</span> ANIMAL_CAT:
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Evil, sadistic animal"</span>;
  }
}</code></pre>
<p>This way, there is no risk of mistakenly mixing a user-provided string with an
<em>enum</em>. This forces the value through a verifying and parsing stage.</p>
<h2 id="symbols-as-keys"><a href="#symbols-as-keys" class="phenomic-HeadingAnchor">#</a>Symbols as keys</h2>
<p>We can use symbols as a key in an object or in a class.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> myKey = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">"MY_KEY"</span>);

<span class="hljs-keyword">const</span> myMutableObject = {};
myMutableObject[myKey] = <span class="hljs-string">"a value"</span>;

<span class="hljs-comment">// With *computed property keys*</span>
<span class="hljs-keyword">const</span> myObj = {
    [myKey]: <span class="hljs-string">"a value"</span>
}</code></pre>
<p>Due to symbols unicity, no more collisions between the keys of an object.
The user can extend objects without having properties overriden by mistake.</p>
<p>For instance, the iterator on an object (used by <code>for..of</code>), is a property
whose key is a symbol, available through <code>Symbol.iterator</code>.</p>
<p>For instance, an object's iterator (used by <code>for..of</code>) is made available as
the property indexed by <code>Symbol.iterator</code>, a symbol devised for this use.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> myIterableObject = {
  * [<span class="hljs-built_in">Symbol</span>.iterator]() {
    <span class="hljs-keyword">yield</span> <span class="hljs-string">"One"</span>;
    <span class="hljs-keyword">yield</span> <span class="hljs-string">"Two"</span>;
    <span class="hljs-keyword">yield</span> <span class="hljs-string">"Three"</span>;
  }
}

<span class="hljs-comment">// Displays One, Two and Three</span>
<span class="hljs-keyword">for</span>(x <span class="hljs-keyword">of</span> myIterableObject) {
  <span class="hljs-built_in">console</span>.log(x);
}

<span class="hljs-comment">// Blows up with 'TypeError: undefined is not a function'</span>
<span class="hljs-keyword">for</span>(x <span class="hljs-keyword">of</span> {}) {}</code></pre>
<p>Several symbols (called <em>well-known symbols</em>) index behaviour defining
object properties: <code>Symbol.iterator</code> for the iterator on an object's
values, <code>Symbol.hasInstance</code> to alter the result of <code>instanceof</code>, ‚Ä¶</p>
<p>These properties are therefore protected against tampering.</p>
<h3 id="differences-between-symbol-keys-and-string-keys"><a href="#differences-between-symbol-keys-and-string-keys" class="phenomic-HeadingAnchor">#</a>Differences between symbol keys and string keys</h3>
<p>Properties indexed by symbols are not available from the commonly used key or
values functions.</p>
<h4 id="list-symbol-keys"><a href="#list-symbol-keys" class="phenomic-HeadingAnchor">#</a>List symbol keys</h4>
<p>Properties indexed by symbols are not visited by <code>for..in</code>, nor listed by
<code>Object.keys</code>, or <code>Object.getOwnPropertyNames</code>. However, they are listed by
<code>Object.getOwnPropertySymbols</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> myObject = {
  [<span class="hljs-built_in">Symbol</span>()]: <span class="hljs-string">"symbol-keyed value"</span>,
  <span class="hljs-string">"key"</span>: <span class="hljs-string">"string-keyed value"</span>
}

<span class="hljs-built_in">Object</span>.getOwnPropertyNames(myObject) <span class="hljs-comment">// [ "key" ]</span>
<span class="hljs-built_in">Object</span>.getOwnPropertySymbols(myObject) <span class="hljs-comment">// [ Symbol() ]</span></code></pre>
<p>This way, a piece of code written with <code>Object.getOwnPropertyNames</code> -- and
expecting strings -- won't be broken by the use of symbols as keys.</p>
<h4 id="jsonstringify"><a href="#jsonstringify" class="phenomic-HeadingAnchor">#</a><code>JSON.stringify</code></h4>
<p>Symbol-indexed properties are ignored by <code>JSON.stringify</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-built_in">JSON</span>.stringify({
  [<span class="hljs-built_in">Symbol</span>()]: <span class="hljs-string">"symbol-keyed value"</span>,
  <span class="hljs-string">"key"</span>: <span class="hljs-string">"string-keyed value"</span>
}) <span class="hljs-comment">// '{"key":"string-keyed value"}'</span></code></pre>
<h2 id="global-symbol-registry"><a href="#global-symbol-registry" class="phenomic-HeadingAnchor">#</a>Global symbol registry</h2>
<p>Symbols being unique, one cannot create a new symbol that is equal to an
already existing one. To be useful, a symbol must be somehow accessible. It's
also possible to create a symbol in a global registry with <code>Symbol.for</code>, to
make it available from anywhere.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Returns a symbol, creating it if it doesn't already exist</span>
<span class="hljs-keyword">const</span> mySymbol = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">"mySymbol"</span>)

mySymbol === <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">"mySymbol"</span>) <span class="hljs-comment">// true</span>

<span class="hljs-comment">// It's possible to get the key indexing a symbol in the registry</span>
<span class="hljs-built_in">Symbol</span>.keyFor(mySymbol) <span class="hljs-comment">// 'mySymbol'</span>

<span class="hljs-comment">// Symbols not created in the registry are not available in it</span>
<span class="hljs-built_in">Symbol</span>.keyFor(<span class="hljs-built_in">Symbol</span>()) <span class="hljs-comment">// undefined</span></code></pre>
<p><code>Symbol.for</code> allows to share symbols everywhere in the code, including
different execution contexts (different frames).</p>
<h2 id="support"><a href="#support" class="phenomic-HeadingAnchor">#</a>Support</h2>
<p>In browsers, symbols are supported since Chrome 38, Firefox 36, Opera 25 and
Safari 9. Nothing in Internet Explorer. Babel support is limited.</p>
<p>In Node.js, symbols are supported since version <code>0.12</code>.</p>
<p>Some <em>well-known symbols</em> are not available on all platforms. This depends on
implemented features support.</p>
<h2 id="round-up"><a href="#round-up" class="phenomic-HeadingAnchor">#</a>Round up</h2>
<p>Symbols are a way to create unique tokens, which is way more robust than
using strings. Using symbols to implement <em>enums</em> prevents collisions and
unwanted mix-up with unqualified data.</p>
<p>Lastly, symbols as object keys prevent collisions and lets us have
<em>meta-properties</em> cleanly separated from regular, string-indexed properties.
Properties indexed with symbols can't be read, modified or listed by mistake.
This offers some protection against tampering.</p>
<h2 id="further-reading"><a href="#further-reading" class="phenomic-HeadingAnchor">#</a>Further reading</h2>
<ul>
<li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol">MDN documentation on symbols</a></li>
<li><a href="http://www.2ality.com/2014/12/es6-symbols.html">Thorough article on how symbols work and how they can be used</a></li>
</ul>
]]></description><link>http://putaindecode.io/en/articles/js/es2015/symbols/</link><guid isPermaLink="true">http://putaindecode.io/en/articles/js/es2015/symbols/</guid><pubDate>Thu, 17 Dec 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[ES6, ES2015 : les symboles]]></title><description><![CDATA[<p>Dans sa politique d'enrichissement des types primitifs, ES6 introduit les
symboles. Chers aux d√©veloppeurs de nombreux langages, Ruby en t√™te, les
symboles constituent une √©tape de plus vers l'√©radication du <em>stringly-typed
programming</em>. En effet, les symboles fournissent un moyen plus robuste de
repr√©senter des identifiants.</p>
<h2 id="cr√©er-un-symbole"><a href="#cr%C3%A9er-un-symbole" class="phenomic-HeadingAnchor">#</a>Cr√©er un symbole</h2>
<p>La fonction <code>Symbol()</code> permet de cr√©er de nouveaux symboles :</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Un symbole tout b√™te</span>
<span class="hljs-keyword">const</span> mySymbol = <span class="hljs-built_in">Symbol</span>();
<span class="hljs-keyword">typeof</span> mySymbol === <span class="hljs-string">'symbol'</span> <span class="hljs-comment">// true</span>

<span class="hljs-comment">// Un symbole avec une description</span>
<span class="hljs-keyword">const</span> myOtherSymbol = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">"description"</span>);


<span class="hljs-comment">// Chaque symbole est unique</span>
<span class="hljs-keyword">const</span> yetAnotherSymbol = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">"description"</span>);
yetAnotherSymbol === myOtherSymbol; <span class="hljs-comment">// false</span></code></pre>
<p>Chaque symbole cr√©√© avec <code>Symbol</code> est unique et immutable. Cela permet
d'√©viter les collisions : on ne peut pas avoir deux symboles identiques par
erreur.</p>
<h2 id="utiliser-les-symboles-pour-limpl√©mentation-dun-enum"><a href="#utiliser-les-symboles-pour-limpl%C3%A9mentation-dun-enum" class="phenomic-HeadingAnchor">#</a>Utiliser les symboles pour l'impl√©mentation d'un <em>enum</em></h2>
<p>Plut√¥t que d'utiliser des cha√Ænes de caract√®res comme valeurs possible d'un
<em>enum</em>, on peut utiliser des symboles.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> ANIMAL_DOG = <span class="hljs-built_in">Symbol</span>();
<span class="hljs-keyword">const</span> ANIMAL_CAT = <span class="hljs-built_in">Symbol</span>();

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDescription</span>(<span class="hljs-params">animal</span>) </span>{
  <span class="hljs-keyword">switch</span>(animal) {
    <span class="hljs-keyword">case</span> ANIMAL_DOG:
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Loving animal"</span>;
    <span class="hljs-keyword">case</span> ANIMAL_CAT:
        <span class="hljs-keyword">return</span> <span class="hljs-string">"Evil, sadistic animal"</span>;
  }
}</code></pre>
<p>De cette mani√®re, on ne risque pas de m√©langer accidentellement une chaine de
caract√®res fournie par l'utilisateur et la valeur d'un <em>enum</em>. On est oblig√©
de passer par une phase de parsing et de v√©rification.</p>
<h2 id="utiliser-un-symbole-comme-cl√©"><a href="#utiliser-un-symbole-comme-cl%C3%A9" class="phenomic-HeadingAnchor">#</a>Utiliser un symbole comme cl√©</h2>
<p>Il est possible d'employer des symboles comme cl√©s d'un objet ou d'une classe.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> myKey = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">"MY_KEY"</span>);

<span class="hljs-keyword">const</span> myMutableObject = {};
myMutableObject[myKey] = <span class="hljs-string">"a value"</span>;

<span class="hljs-comment">// En utilisant les *computed property keys*</span>
<span class="hljs-keyword">const</span> myObj = {
    [myKey]: <span class="hljs-string">"a value"</span>
}</code></pre>
<p>Gr√¢ce √† l'unicit√© des symboles, plus de probl√®mes de collision entre les cl√©s
d'un objet. On peut laisser l'utilisateur √©tendre des objets sans prendre le
risque d'avoir des propri√©t√©s √©cras√©es par erreur.</p>
<p>Par exemple, l'it√©rateur d'un objet employ√© par <code>for..of</code> est une propri√©t√©
qui a pour cl√© un symbole, accessible via <code>Symbol.iterator</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> myIterableObject = {
  * [<span class="hljs-built_in">Symbol</span>.iterator]() {
    <span class="hljs-keyword">yield</span> <span class="hljs-string">"One"</span>;
    <span class="hljs-keyword">yield</span> <span class="hljs-string">"Two"</span>;
    <span class="hljs-keyword">yield</span> <span class="hljs-string">"Three"</span>;
  }
}

<span class="hljs-comment">// Affichera One, Two et Three</span>
<span class="hljs-keyword">for</span>(x <span class="hljs-keyword">of</span> myIterableObject) {
  <span class="hljs-built_in">console</span>.log(x);
}

<span class="hljs-comment">// Plantera avec 'TypeError: undefined is not a function'</span>
<span class="hljs-keyword">for</span>(x <span class="hljs-keyword">of</span> {}) {}</code></pre>
<p>Diff√©rents symboles (les <em>well-known symbols</em>) sont disponibles pour indexer
des propri√©t√©s qui personnalisent le comportement des objets :
<code>Symbol.iterator</code> pour it√©rer sur les valeurs d'un objet, <code>Symbol.hasInstance</code>
pour modifier le retour de <code>instanceof</code>, ‚Ä¶</p>
<p>Ces propri√©t√©s sont ainsi prot√©g√©es contre tout acc√®s involontaire.</p>
<h3 id="diff√©rences-avec-lutilisation-dune-chaine-de-caract√®res-comme-cl√©"><a href="#diff%C3%A9rences-avec-lutilisation-dune-chaine-de-caract%C3%A8res-comme-cl%C3%A9" class="phenomic-HeadingAnchor">#</a>Diff√©rences avec l'utilisation d'une chaine de caract√®res comme cl√©</h3>
<p>Les propri√©t√©s index√©es par des symboles ne sont pas accessibles depuis les
fonctions habituellement utilis√©es pour it√©rer sur les propri√©t√©s ou les
valeurs.</p>
<h4 id="√ânum√©ration"><a href="#%C3%89num%C3%A9ration" class="phenomic-HeadingAnchor">#</a>√ânum√©ration</h4>
<p>Les propri√©t√©s index√©es par des symboles ne sont pas visit√©es par <code>for..in</code>,
ni list√©es par <code>Object.keys</code> ni <code>Object.getOwnPropertyNames</code>. En revanche,
elles sont list√©es par <code>Object.getOwnPropertySymbols</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> myObject = {
  [<span class="hljs-built_in">Symbol</span>()]: <span class="hljs-string">"symbol-keyed value"</span>,
  <span class="hljs-string">"key"</span>: <span class="hljs-string">"string-keyed value"</span>
}

<span class="hljs-built_in">Object</span>.getOwnPropertyNames(myObject) <span class="hljs-comment">// [ "key" ]</span>
<span class="hljs-built_in">Object</span>.getOwnPropertySymbols(myObject) <span class="hljs-comment">// [ Symbol() ]</span></code></pre>
<p>Ainsi, du code utilisant <code>Object.getOwnPropertyNames</code> et s'attendant √†
recevoir des cha√Ænes de caract√®res ne sera pas cass√© par l'utilisation de
symboles en tant que cl√©s.</p>
<h4 id="jsonstringify"><a href="#jsonstringify" class="phenomic-HeadingAnchor">#</a><code>JSON.stringify</code></h4>
<p>Les propri√©t√©s index√©es par un symbole sont ignor√©es par <code>JSON.stringify</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-built_in">JSON</span>.stringify({
  [<span class="hljs-built_in">Symbol</span>()]: <span class="hljs-string">"symbol-keyed value"</span>,
  <span class="hljs-string">"key"</span>: <span class="hljs-string">"string-keyed value"</span>
}) <span class="hljs-comment">// '{"key":"string-keyed value"}'</span></code></pre>
<h2 id="registre-global-des-symboles"><a href="#registre-global-des-symboles" class="phenomic-HeadingAnchor">#</a>Registre global des symboles</h2>
<p>Un symbole est unique, une fois cr√©√©, il est impossible d'en cr√©√©r un autre
ayant les m√™mes propri√©t√©s. Il faut donc que le symbole cr√©√© soit accessible
d'une mani√®re ou d'une autre pour pouvoir l'employer. En revanche, il est
possible de cr√©er un symbole dans un registre global accessible de n'importe
o√π, gr√¢ce √† <code>Symbol.for</code>.</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// Renvoie un symbole, en le cr√©ant s'il n'existe pas d√©j√†</span>
<span class="hljs-keyword">const</span> mySymbol = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">"mySymbol"</span>)

mySymbol === <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">"mySymbol"</span>) <span class="hljs-comment">// true</span>

<span class="hljs-comment">// Il est possible de r√©cup√©rer la cl√© avec laquelle un symbole a √©t√© ins√©r√©</span>
<span class="hljs-comment">// dans le registre</span>
<span class="hljs-built_in">Symbol</span>.keyFor(mySymbol) <span class="hljs-comment">// 'mySymbol'</span>

<span class="hljs-comment">// Un symbole non cr√©√© dans le registre n'est pas disponible</span>
<span class="hljs-built_in">Symbol</span>.keyFor(<span class="hljs-built_in">Symbol</span>()) <span class="hljs-comment">// undefined</span></code></pre>
<p><code>Symbol.for</code> permet donc de partager des symboles partout dans le code, y
compris dans des contextes d'ex√©cution diff√©rents (diff√©rentes frames).</p>
<h2 id="support"><a href="#support" class="phenomic-HeadingAnchor">#</a>Support</h2>
<p>C√¥t√© navigateur, les symboles sont support√©s depuis Chrome 38, Firefox 36,
Opera 25 et Safari 9. Rien chez Internet Explorer. Le support Babel est
limit√©.</p>
<p>C√¥t√© Node.js, le support des symboles est l√† depuis la version <code>0.12</code>.</p>
<p>Les <em>well-known symbols</em> ne sont pas tous disponibles sur les diff√©rentes
plates-formes, leur pr√©sence d√©pendant des fonctionnalit√©s auxquelles ils sont
li√©s.</p>
<h2 id="pour-r√©sumer"><a href="#pour-r%C3%A9sumer" class="phenomic-HeadingAnchor">#</a>Pour r√©sumer</h2>
<p>Les symboles fournissent un moyen de cr√©er des tokens uniques, ce qui est bien
plus robuste que l'utilisation de cha√Ænes de caract√®res. L'utilisation des
symboles pour repr√©senter les valeurs d'un <em>enum</em> permet d'√©viter les
collisions et le m√©lange avec des donn√©es non qualifi√©es.</p>
<p>En tant que cl√©s d'un objet, les symboles permettent d'√©viter les collisions
et d'avoir des <em>m√©ta-propri√©t√©s</em> s√©par√©es et ind√©pendantes des propri√©t√©s
index√©es par des cl√©s. Les propri√©t√©s index√©es par des symboles ne peuvent pas
√™tre lues, modifi√©es ou list√©es par erreur, ce qui leur offre un certain degr√©
de protection contre des manipulations accidentelles.</p>
<h2 id="pour-aller-plus-loin"><a href="#pour-aller-plus-loin" class="phenomic-HeadingAnchor">#</a>Pour aller plus loin</h2>
<ul>
<li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Symbol">La documentation des symboles sur MDN</a></li>
<li><a href="http://www.2ality.com/2014/12/es6-symbols.html">Un article complet sur le fonctionnement des symboles et leur cas
d'utilisation</a></li>
</ul>
]]></description><link>http://putaindecode.io/fr/articles/js/es2015/symbols/</link><guid isPermaLink="true">http://putaindecode.io/fr/articles/js/es2015/symbols/</guid><pubDate>Thu, 17 Dec 2015 00:00:00 GMT</pubDate></item></channel></rss>