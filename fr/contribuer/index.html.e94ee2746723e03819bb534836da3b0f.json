{"head":{"layout":"Page","comments":true,"title":"Comment contribuer ?","description":"Corriger du contenu rapidement Pour corriger un post de manière simple nous te conseillons l'interface GitHub (via le lien \"Modifier\" en…"},"body":"<div class=\"putainde-Note\">\nCette documentation n'est pas à jour.\n<a href=\"https://github.com/putaindecode/putaindecode.io/issues/531\">\nUne réécriture plus digeste est prévue.\n</a>\n</div>\n<h3 id=\"corriger-du-contenu-rapidement\"><a href=\"#corriger-du-contenu-rapidement\" class=\"phenomic-HeadingAnchor\">#</a>Corriger du contenu rapidement</h3>\n<p>Pour corriger un post de manière simple nous te conseillons l'interface GitHub (via le lien \"Modifier\" en bas des articles).</p>\n<h3 id=\"faire-des-modifications-avec-aperçu-sur-ta-machine\"><a href=\"#faire-des-modifications-avec-aper%C3%A7u-sur-ta-machine\" class=\"phenomic-HeadingAnchor\">#</a>Faire des modifications avec aperçu sur ta machine</h3>\n<p>Forke le projet sur GitHub, puis :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-variable\">$ </span>git clone <span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/github.com/</span>TON_PSEUDO_GITHUB/putaindecode.io.git\n<span class=\"hljs-variable\">$ </span>cd putaindecode.io\n<span class=\"hljs-variable\">$ </span>npm run init\n<span class=\"hljs-variable\">$ </span>npm install\n<span class=\"hljs-variable\">$ </span>npm start</code></pre>\n<p>Si tu as un fork en retard sur notre master, tu peux mettre ta master à jour:</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-symbol\">$</span> git remote add upstream https:<span class=\"hljs-comment\">//github.com/putaindecode/putaindecode.io.git</span>\n<span class=\"hljs-symbol\">$</span> git fetch upstream\n<span class=\"hljs-symbol\">$</span> git checkout master\n<span class=\"hljs-symbol\">$</span> git merge upstream/master</code></pre>\n<p>Ensuite il te faut créer une branche. En préfixe, on recommande les suivants:</p>\n<ul>\n<li><code>fix.</code> pour des patchs</li>\n<li><code>post.</code> pour proposer un post</li>\n<li><code>feature.</code> pour proposer une fonctionnalité</li>\n</ul>\n<p>Exemple :</p>\n<pre><code class=\"hljs language-console\">$ git checkout -<span class=\"hljs-selector-tag\">b</span> fix.nom-pertinent</code></pre>\n<p>Ensuite fait ta popote sur les fichiers nécessaires, puis si tu es flemmard:</p>\n<pre><code class=\"hljs language-console\">$ git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> -A .\n</span>$ git commit -m <span class=\"hljs-string\">\"Correction de XXX dans le post sur YYY\"</span>\n$ git push -u</code></pre>\n<p>Maintenant tu n'as plus qu'à te rendre sur l'interface de GitHub puis à proposer ta PR.</p>\n<p>Cela dit, ci-dessous, nous te conseillons de lire la version beaucoup plus ludique des explications ci-dessus.</p>\n<h2 id=\"github\"><a href=\"#github\" class=\"phenomic-HeadingAnchor\">#</a>GitHub</h2>\n<ul>\n<li>\n<p>Déjà, si t'en as pas, crée toi un compte GitHub (avant qu'on te caillasse),\net vu que tu commences à lire des ressources sur notre site, crois-moi que\ntu vas commencer à le faire chauffer plus vite que prévu.</p>\n</li>\n<li>\n<p>Ensuite, il faut que tu installes tout le nécessaire pour bosser sur un\n<em>repo</em> GitHub (oui on va commencer à utiliser des anglicismes dès maintenant\ndonc habitue-toi y, <em>repo</em> = dépôt de code, comme tu peux le constater, la\nfrancisation, c'est moche), on va te faire un post qui va regrouper tout ce\nqu'il te faut pour installer et configurer Git pour bosser sur GitHub.</p>\n</li>\n<li>\n<p>Après, il faut que tu crées ce qu'on appelle un <em>fork</em> du repo. Un fork\nc'est juste ta propre copie du repo. Bah ouais, tu vas pas directement\ntravailler sur notre repo et nous le crader sans qu'on puisse bouger\nl'orteil. Non monsieur, sur GitHub on est des gens civilisés et on créé sa\npropre copie dans son coin avant de demander à papa si on a le droit\nd'apporter les modifs sur le repo principal.</p>\n</li>\n<li>\n<p>Pour ça, clique sur le bouton <em>Fork</em> en haut à droite du repo. GitHub va\ncréer une copie du repo sur ton propre compte GitHub, où tu pourras\ntravailler tranquillement.</p>\n<figure>\n  <img src=\"fork-button.jpg\" alt=\"Bouton Fork\" />\n  <figcaption>Clique au fond à droite</figcaption>\n</figure>\n</li>\n<li>\n<p>Maintenant que t'as enfin notre magnifique repo dans ton compte, tu devrais\nte sentir honoré. Une fois que t'as appelé toute ta famille et les 3\npéquenauds qui te servent d'amis, tu dois pouvoir y coder dessus sur ton PC.\nOn va partir du principe que tu t'appelles Marc. Et que ton nom c'est\nAssin. T'as donc choisi comme pseudo GitHub <code>marcassin</code> (oui t'aurais dû\nréfléchir toi aussi). Donc tu te débrouilles pour aller dans un dossier vide\net tu vas cloner notre repo. Cloner = faire une copie d'un repo distant (sur\nles serveurs de GitHub par exemple) en local (ton vieux Pentium II sous XP\ndans notre cas). Ensuite il faut que tu te rendes dans ce dossier en ligne\nde commande (sous Windows tu y vas avec l'invite de commande mais on te\nprévient qu'on va pas être copains longtemps, trouve un OS décent putain,\nsous Mac OS X tu utilises le terminal, et sous Linux je pense qu'on n'a pas à\nt'expliquer).</p>\n<pre><code class=\"hljs language-console\">$ git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">https</span>://github.com/marcassin/putaindecode.io.git putaindecode</code></pre>\n</li>\n<li>\n<p>Ensuite tu dois ajouter ce qu'on appelle une remote. Une remote c'est une\nréférence du repo principal, le beau, le grand, le nôtre. En gros, ça va te\nservir que si tu fais une modification ou une contribution sur notre site\naujourd'hui, et que dans un mois tu veuilles encore en faire, tu pourras\nfacilement rattraper tout ce qu'on aura fait entre temps. La remote en\nrapport avec le repo principal, on l'appelle souvent <em>upstream</em>.</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-symbol\">$</span> cd putaindecode.io\n<span class=\"hljs-symbol\">$</span> git remote add upstream https:<span class=\"hljs-comment\">//github.com/putaindecode/putaindecode.io.git</span>\n<span class=\"hljs-symbol\">$</span> git fetch upstream</code></pre>\n</li>\n<li>\n<p>Alors là, normalement, t'as le dossier propre et frais, pêché du matin. Vu\nque notre site pète la classe, on l'a fait en utilisant\n<a href=\"https://github.com/gulpjs/gulp\">Gulp</a>.\nIl te faudra donc installer les dépendances, tu verras c'est simple comme bonjour.\nPour faire ça, tu vas lire le\n<a href=\"https://github.com/putaindecode/putaindecode.io#readme\">README.md</a>\nà la racine du repo. On fait exprès de pas te le dire ici parce\nque c'est un peu une convention pour tous les projets Open Source, et que ça\nte fait pas de mal de commencer à apprendre à bien bosser.</p>\n</li>\n<li>\n<p>Note: Si tu avais déjà récupéré le repo, il te faudra juste récupérer les\nderniers changements sur une branche propre</p>\n<pre><code class=\"hljs language-console\">$ git checkout <span class=\"hljs-keyword\">master</span>\n<span class=\"hljs-title\">$</span> git fetch upstream\n$ git merge upstream/<span class=\"hljs-literal\">master</span></code></pre>\n<p>Regarde quand même le README et fait la manip' de mise à jour au cas où on aurait\nchangé quelques trucs par-ci, par-là.</p>\n</li>\n<li>\n<p>Une fois ton site tout installé, t'as plus qu'à aller dans ton dossier grâce\nà la ligne de commande, et à taper <code>$ npm start</code>, tu verras quelques\ntrucs s'exécuter, ne t'inquiète pas. À la fin du processus, ça\ndevrait te lancer le site en local dans le browser. Là, j'espère que tu te\nrends compte qu'avec une seule ligne de commande on t'a fait tourner un site\ncomplet. Et là on te voit déjà en train de baver et te rappeler tes longues\nsoirées en train d'installer PHP, MySQL, un WordPress, la bonne version des\nplugins, de la conf à n'en plus finir... ah qu'est-ce que tu pouvais être\nniais. Ça a quand même bien plus la classe notre solution, non ?</p>\n</li>\n<li>\n<p>Maintenant que t'as tout, t'as plus qu'à lancer <del>notepad++</del> ton éditeur\nfavori et te préparer à modifier ou proposer les fichiers que tu veux. Ce\nque t'as à retenir, c'est que tu vas surtout bosser dans le dossier <code>/src</code></p>\n</li>\n</ul>\n<h2 id=\"correction-dun-post-existant\"><a href=\"#correction-dun-post-existant\" class=\"phenomic-HeadingAnchor\">#</a>Correction d'un post existant</h2>\n<p>Bon ok, on a compris, t'es timide, tu te sens pas encore prêt à nous écrire un\nmagnifique post sur ton tout dernier projet, tu préfères juste nous aider à\naméliorer notre contenu. Bah on te remercie quand même tu vois, parce qu'on\nest des types sympas.</p>\n<ul>\n<li>\n<p>Alors déjà, on n'aime pas juste donner une liste d'ordres sans expliquer pour\nque tu puisses comprendre ce que tu fais. Donc notre site, il a été fait\nà la main (on a pondu un générateur de site statique bien pimpé, parce que oui,\ny'a pas que Wordpress pour faire un site) en se basant sur gulp\n(un esclave qui te permet d'éxécuter des tâches répétitives en JavaScript)\net quelques autres truc cools. Tu pourrais éventuellement jeter un coup d'œil\n<a href=\"https://github.com/putaindecode/putaindecode.io/blob/master/package.json\">aux dépendances du projet</a>,\nhistoire de savoir de quoi on cause.</p>\n</li>\n<li>\n<p>Tous nos posts sont contenus dans <code>content/</code>. Si jamais c'est sur\nautre chose qu'un post, farfouille un peu et tu trouveras, les noms des\ndossiers sont assez explicites et de toute façon les URLs sur notre site\nressemblent bizarrement (en vrai c'est pas bizarre hein, t'avais compris)\naux noms des dossiers.</p>\n</li>\n<li>\n<p>Donc, une fois le fichier trouvé, tu remarqueras que la syntaxe à\nl'intérieur, c'est pas du HTML. C'est un truc bizzare avec des dièses et des\nétoiles. On appelle ça du\n<a href=\"http://fr.wikipedia.org/wiki/Markdown\"><em>Markdown</em></a>. On va te laisser aller\nchercher si tu veux connaitre plus en détail. Mais normalement en voyant le\nreste du post autour de toi, tu devrais comprendre assez vite. Tu peux\ntoujours faire du HTML, mais franchement, le Markdown a été créé pour ce\ngenre de tâches, c'est un bon moment pour l'apprendre.</p>\n</li>\n<li>\n<p>Avant de faire les modifications direct dans le fichier, on va te demander\nde faire une branche, c'est une bonne pratique et ça nous permettra de voir\nexactement ce que t'auras modifié, c'est beaucoup plus simple. Du coup tu\nfais simplement un :</p>\n<pre><code class=\"hljs language-console\">$ git checkout -<span class=\"hljs-selector-tag\">b</span> fix.nom-du-post</code></pre>\n</li>\n<li>\n<p>Fais les modifications que tu veux dans le fichier, là on ne peut pas t'aider,\nc'est à toi de jouer.</p>\n</li>\n<li>\n<p>Normalement si t'avais bien lancé le <code>npm start</code> tout à l'heure, y'a un\nprocessus <em>watch</em> (en gros un truc qui surveille ton projet) qui est lancé\net qui détecte que t'as changé un fichier, du coup, grâce au watch couplé à\nun processus appelé <em>livereload</em> ton navigateur va rafraîchir les fichiers\nnécessaires en direct. T'as rien à faire, c'est magique. Enfin si, tu dois juste\nretourner dans ton browser, ça devrait déjà être à jour.</p>\n</li>\n<li>\n<p>Une fois que tout est bon, tu peux passer à l'étape de validation de tes\nmodifications (étape commune pour la modification d'un post existant ou la\nproposition d'un nouveau)</p>\n</li>\n</ul>\n<h2 id=\"proposition-dun-nouveau-post\"><a href=\"#proposition-dun-nouveau-post\" class=\"phenomic-HeadingAnchor\">#</a>Proposition d'un nouveau post</h2>\n<ul>\n<li>\n<p>Alors pour proposer un nouveau post déjà, il te faut une idée. Et on te\nprévient que si tu nous sors un post sur la liste des plugins jQuery les\nplus en vogue cette semaine, on va te trouver. On va chercher ton IP, on va\ntracer ton adresse, et on va te trouver. Et tu vas comprendre que parmi\nnous, y'a des types qui sont pas du tout copains avec jQuery et qui sont pas\ntendres du tout.\nBon du coup quand t'as ton idée, <a href=\"https://github.com/putaindecode/putaindecode.io/issues/new\">tu la proposes directement comme issue</a>\nafin de voir si ça intéresse du monde.</p>\n</li>\n<li>\n<p>Il faut aussi que tu fasses attention à ne pas bosser sur le même post que\nquelqu'un d'autre et pour ça tu dois aller jeter un coup d'oeil du côté des\nissues en cours avec le label <code>post</code>. Allez, on est sympa, t'as <a href=\"https://github.com/putaindecode/putaindecode.io/issues?labels=post&#x26;page=1&#x26;state=open\">le\nlien</a>.</p>\n</li>\n<li>\n<p>Bref, une fois ton idée trouvée, il faut que tu crées le post pour pouvoir\ncommencer à écrire dans le fichier. Tout d'abord tu vas devoir créer une\nnouvelle branche. C'est une pratique qu'on demande à tout le monde, même\nnous en interne on bosse sur des branches. Donc tout d'abord :</p>\n<pre><code class=\"hljs language-console\">$ git checkout -b <span class=\"hljs-built_in\">post</span>.titre-court-du-<span class=\"hljs-built_in\">post</span></code></pre>\n<p>Ensuite il va falloir que tu crées les fichiers nécessaires pour le brouillon\ndu post.\nPour ça, tu vas dans <code>content/</code> et tu regardes comment ça se passe.\nC'est plutôt simple. Tu créés un dossier avec le nom qui va bien avec un fichier\n<code>.jade</code> pour les metas de l'article, et un <code>.md</code> pour le contenu.</p>\n</li>\n<li>\n<p>Tu peux maintenant éditer ton fichier (en MarkDown) dans le fichier .md,\nAmuse-toi, créé ton contenu, rédige bien tout comme tu veux.</p>\n</li>\n<li>\n<p>Tu devrais pouvoir te balader sur le site et trouver ton article sur la page\ndes articles.\nAvec la tâche <code>$ npm start</code> lancée normalement tout (ou presque) se rafraîchira\nautomatiquement.\nSi ce n'est pas le cas, relance la tâche <code>$ npm start</code>.\nSi là tu as une erreur qui t'échappes, on t'invite à\n<a href=\"https://github.com/putaindecode/putaindecode.io/issues/new\">ouvrir une issue</a>.</p>\n</li>\n<li>\n<p>En l'état, tu devrais pouvoir consulter sur le site lancé localement ton post,\nvoir s'il sort correctement et s'il est présentable à ton goût.</p>\n</li>\n<li>\n<p>Une fois que tout est bon, tu peux passer à l'étape de validation de tes\nmodifications (étape commune pour la modification d'un post existant ou la\nproposition d'un nouveau)</p>\n</li>\n</ul>\n<h2 id=\"validation-de-tes-modifications\"><a href=\"#validation-de-tes-modifications\" class=\"phenomic-HeadingAnchor\">#</a>Validation de tes modifications</h2>\n<ul>\n<li>\n<p>Il faut tout d'abord pousser tes modifications sur ton <code>fork</code>. Pour ça on va\nd'abord ajouter les fichier que tu as modifié à l'index de fichiers à\ncommit. Tu peux faire ça tout simplement avec un :</p>\n<pre><code class=\"hljs language-console\">$ git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> -A content/fr/articles/nom-du-post</span></code></pre>\n<p>Cette commande ajoute tous les fichiers dans le dossier que tu as créé.\nSi tu as ajouté des fichiers à l'extérieur de ce dossier, tu devras les\najouter. Exemple :</p>\n<pre><code class=\"hljs language-console\">$ git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> images/memes/trollface.jpg</span></code></pre>\n<p>Ensuite on va dire à git de valider ces modifications de code :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-variable\">$ </span>git commit -m <span class=\"hljs-string\">\"Un petit message sympa expliquant le correctif/post\"</span></code></pre>\n<p>Et on va finir en disant qu'on veut envoyer tout ça sur ton fork qui est\nsitué sur GitHub :</p>\n<pre><code class=\"hljs language-console\">$ git <span class=\"hljs-keyword\">push </span>-u</code></pre>\n</li>\n<li>\n<p>Voila ! Si tu vas voir ton <code>fork</code> sur GitHub tu verras ton commit et les\nmodifications que tu as apportées normalement. Il ne te reste plus qu'à nous\nsoumettre ces modifications. Pour ça tu vas faire ce qu'on appelle une Pull\nRequest (PR)</p>\n</li>\n<li>\n<p>Il te suffit de cliquer sur le bouton vert qui représente 2 flèches en sens\ninverse à côté du nom de ta branche en dessous du nombre de commits /\nbranches / etc.</p>\n<figure>\n  <img src=\"pull-request-button.jpg\" alt=\"Bouton Pull Request\" />\n  <figcaption>C'est bon tu le vois là le bouton ?</figcaption>\n</figure>\n</li>\n<li>\n<p>Sélectionne les bonnes branches et ajoute-nous un beau titre et une belle\ndescription de Pull Request en essayant au moins de commencer par <code>Post: Nom du post</code>\nou <code>Fix: Nom du post</code></p>\n</li>\n<li>\n<p>Et voilà ! Tu n'as qu'à attendre de nos nouvelles maintenant. D'ailleurs au\npassage, si tu veux, tu peux en profiter pour nous suivre <a href=\"https://twitter.com/putaindecode\">sur\ntwitter</a>, et tu pourras nous lâcher un\nmessage avec ta PR ou ton issue en lien, histoire de nous mettre la pression.</p>\n</li>\n</ul>\n<h2 id=\"hey--tu-veux-mieux-comprendre-git-\"><a href=\"#hey--tu-veux-mieux-comprendre-git-\" class=\"phenomic-HeadingAnchor\">#</a>Hey ! Tu veux mieux comprendre Git ?</h2>\n<p>Pour découvrir Git plus en détails, on t'invite à lire notre article\n<a href=\"/fr/articles/git/\">Versionner avec Git</a></p>\n","rawBody":"\n<div class=\"putainde-Note\">\nCette documentation n'est pas à jour.\n<a href=\"https://github.com/putaindecode/putaindecode.io/issues/531\">\nUne réécriture plus digeste est prévue.\n</a>\n</div>\n\n### Corriger du contenu rapidement\n\nPour corriger un post de manière simple nous te conseillons l'interface GitHub (via le lien \"Modifier\" en bas des articles).\n\n### Faire des modifications avec aperçu sur ta machine\n\nForke le projet sur GitHub, puis :\n\n```console\n$ git clone https://github.com/TON_PSEUDO_GITHUB/putaindecode.io.git\n$ cd putaindecode.io\n$ npm run init\n$ npm install\n$ npm start\n```\n\nSi tu as un fork en retard sur notre master, tu peux mettre ta master à jour:\n\n```console\n$ git remote add upstream https://github.com/putaindecode/putaindecode.io.git\n$ git fetch upstream\n$ git checkout master\n$ git merge upstream/master\n```\n\nEnsuite il te faut créer une branche. En préfixe, on recommande les suivants:\n\n- `fix.` pour des patchs\n- `post.` pour proposer un post\n- `feature.` pour proposer une fonctionnalité\n\nExemple :\n\n```console\n$ git checkout -b fix.nom-pertinent\n```\n\nEnsuite fait ta popote sur les fichiers nécessaires, puis si tu es flemmard:\n\n```console\n$ git add -A .\n$ git commit -m \"Correction de XXX dans le post sur YYY\"\n$ git push -u\n```\n\nMaintenant tu n'as plus qu'à te rendre sur l'interface de GitHub puis à proposer ta PR.\n\nCela dit, ci-dessous, nous te conseillons de lire la version beaucoup plus ludique des explications ci-dessus.\n\n## GitHub\n\n* Déjà, si t'en as pas, crée toi un compte GitHub (avant qu'on te caillasse),\n  et vu que tu commences à lire des ressources sur notre site, crois-moi que\n  tu vas commencer à le faire chauffer plus vite que prévu.\n\n* Ensuite, il faut que tu installes tout le nécessaire pour bosser sur un\n  *repo* GitHub (oui on va commencer à utiliser des anglicismes dès maintenant\n  donc habitue-toi y, *repo* = dépôt de code, comme tu peux le constater, la\n  francisation, c'est moche), on va te faire un post qui va regrouper tout ce\n  qu'il te faut pour installer et configurer Git pour bosser sur GitHub.\n\n* Après, il faut que tu crées ce qu'on appelle un *fork* du repo. Un fork\n  c'est juste ta propre copie du repo. Bah ouais, tu vas pas directement\n  travailler sur notre repo et nous le crader sans qu'on puisse bouger\n  l'orteil. Non monsieur, sur GitHub on est des gens civilisés et on créé sa\n  propre copie dans son coin avant de demander à papa si on a le droit\n  d'apporter les modifs sur le repo principal.\n\n* Pour ça, clique sur le bouton *Fork* en haut à droite du repo. GitHub va\n  créer une copie du repo sur ton propre compte GitHub, où tu pourras\n  travailler tranquillement.\n\n  <figure>\n    <img src=\"fork-button.jpg\" alt=\"Bouton Fork\" />\n    <figcaption>Clique au fond à droite</figcaption>\n  </figure>\n\n* Maintenant que t'as enfin notre magnifique repo dans ton compte, tu devrais\n  te sentir honoré. Une fois que t'as appelé toute ta famille et les 3\n  péquenauds qui te servent d'amis, tu dois pouvoir y coder dessus sur ton PC.\n  On va partir du principe que tu t'appelles Marc. Et que ton nom c'est\n  Assin. T'as donc choisi comme pseudo GitHub `marcassin` (oui t'aurais dû\n  réfléchir toi aussi). Donc tu te débrouilles pour aller dans un dossier vide\n  et tu vas cloner notre repo. Cloner = faire une copie d'un repo distant (sur\n  les serveurs de GitHub par exemple) en local (ton vieux Pentium II sous XP\n  dans notre cas). Ensuite il faut que tu te rendes dans ce dossier en ligne\n  de commande (sous Windows tu y vas avec l'invite de commande mais on te\n  prévient qu'on va pas être copains longtemps, trouve un OS décent putain,\n  sous Mac OS X tu utilises le terminal, et sous Linux je pense qu'on n'a pas à\n  t'expliquer).\n\n  ```console\n  $ git clone https://github.com/marcassin/putaindecode.io.git putaindecode\n  ```\n\n* Ensuite tu dois ajouter ce qu'on appelle une remote. Une remote c'est une\n  référence du repo principal, le beau, le grand, le nôtre. En gros, ça va te\n  servir que si tu fais une modification ou une contribution sur notre site\n  aujourd'hui, et que dans un mois tu veuilles encore en faire, tu pourras\n  facilement rattraper tout ce qu'on aura fait entre temps. La remote en\n  rapport avec le repo principal, on l'appelle souvent *upstream*.\n\n  ```console\n  $ cd putaindecode.io\n  $ git remote add upstream https://github.com/putaindecode/putaindecode.io.git\n  $ git fetch upstream\n  ```\n\n* Alors là, normalement, t'as le dossier propre et frais, pêché du matin. Vu\n  que notre site pète la classe, on l'a fait en utilisant\n  [Gulp](https://github.com/gulpjs/gulp).\n  Il te faudra donc installer les dépendances, tu verras c'est simple comme bonjour.\n  Pour faire ça, tu vas lire le\n  [README.md](https://github.com/putaindecode/putaindecode.io#readme)\n  à la racine du repo. On fait exprès de pas te le dire ici parce\n  que c'est un peu une convention pour tous les projets Open Source, et que ça\n  te fait pas de mal de commencer à apprendre à bien bosser.\n\n* Note: Si tu avais déjà récupéré le repo, il te faudra juste récupérer les\n  derniers changements sur une branche propre\n\n  ```console\n  $ git checkout master\n  $ git fetch upstream\n  $ git merge upstream/master\n  ```\n\n  Regarde quand même le README et fait la manip' de mise à jour au cas où on aurait\n  changé quelques trucs par-ci, par-là.\n\n* Une fois ton site tout installé, t'as plus qu'à aller dans ton dossier grâce\n  à la ligne de commande, et à taper `$ npm start`, tu verras quelques\n  trucs s'exécuter, ne t'inquiète pas. À la fin du processus, ça\n  devrait te lancer le site en local dans le browser. Là, j'espère que tu te\n  rends compte qu'avec une seule ligne de commande on t'a fait tourner un site\n  complet. Et là on te voit déjà en train de baver et te rappeler tes longues\n  soirées en train d'installer PHP, MySQL, un WordPress, la bonne version des\n  plugins, de la conf à n'en plus finir... ah qu'est-ce que tu pouvais être\n  niais. Ça a quand même bien plus la classe notre solution, non ?\n\n* Maintenant que t'as tout, t'as plus qu'à lancer ~~notepad++~~ ton éditeur\n  favori et te préparer à modifier ou proposer les fichiers que tu veux. Ce\n  que t'as à retenir, c'est que tu vas surtout bosser dans le dossier `/src`\n\n## Correction d'un post existant\n\nBon ok, on a compris, t'es timide, tu te sens pas encore prêt à nous écrire un\nmagnifique post sur ton tout dernier projet, tu préfères juste nous aider à\naméliorer notre contenu. Bah on te remercie quand même tu vois, parce qu'on\nest des types sympas.\n\n* Alors déjà, on n'aime pas juste donner une liste d'ordres sans expliquer pour\n  que tu puisses comprendre ce que tu fais. Donc notre site, il a été fait\n  à la main (on a pondu un générateur de site statique bien pimpé, parce que oui,\n  y'a pas que Wordpress pour faire un site) en se basant sur gulp\n  (un esclave qui te permet d'éxécuter des tâches répétitives en JavaScript)\n  et quelques autres truc cools. Tu pourrais éventuellement jeter un coup d'œil\n  [aux dépendances du projet](https://github.com/putaindecode/putaindecode.io/blob/master/package.json),\n  histoire de savoir de quoi on cause.\n\n* Tous nos posts sont contenus dans `content/`. Si jamais c'est sur\n  autre chose qu'un post, farfouille un peu et tu trouveras, les noms des\n  dossiers sont assez explicites et de toute façon les URLs sur notre site\n  ressemblent bizarrement (en vrai c'est pas bizarre hein, t'avais compris)\n  aux noms des dossiers.\n\n* Donc, une fois le fichier trouvé, tu remarqueras que la syntaxe à\n  l'intérieur, c'est pas du HTML. C'est un truc bizzare avec des dièses et des\n  étoiles. On appelle ça du\n  [*Markdown*](http://fr.wikipedia.org/wiki/Markdown). On va te laisser aller\n  chercher si tu veux connaitre plus en détail. Mais normalement en voyant le\n  reste du post autour de toi, tu devrais comprendre assez vite. Tu peux\n  toujours faire du HTML, mais franchement, le Markdown a été créé pour ce\n  genre de tâches, c'est un bon moment pour l'apprendre.\n\n* Avant de faire les modifications direct dans le fichier, on va te demander\n  de faire une branche, c'est une bonne pratique et ça nous permettra de voir\n  exactement ce que t'auras modifié, c'est beaucoup plus simple. Du coup tu\n  fais simplement un :\n\n  ```console\n  $ git checkout -b fix.nom-du-post\n  ```\n\n* Fais les modifications que tu veux dans le fichier, là on ne peut pas t'aider,\n  c'est à toi de jouer.\n\n* Normalement si t'avais bien lancé le `npm start` tout à l'heure, y'a un\n  processus *watch* (en gros un truc qui surveille ton projet) qui est lancé\n  et qui détecte que t'as changé un fichier, du coup, grâce au watch couplé à\n  un processus appelé *livereload* ton navigateur va rafraîchir les fichiers\n  nécessaires en direct. T'as rien à faire, c'est magique. Enfin si, tu dois juste\n  retourner dans ton browser, ça devrait déjà être à jour.\n\n* Une fois que tout est bon, tu peux passer à l'étape de validation de tes\n  modifications (étape commune pour la modification d'un post existant ou la\n  proposition d'un nouveau)\n\n## Proposition d'un nouveau post\n\n* Alors pour proposer un nouveau post déjà, il te faut une idée. Et on te\n  prévient que si tu nous sors un post sur la liste des plugins jQuery les\n  plus en vogue cette semaine, on va te trouver. On va chercher ton IP, on va\n  tracer ton adresse, et on va te trouver. Et tu vas comprendre que parmi\n  nous, y'a des types qui sont pas du tout copains avec jQuery et qui sont pas\n  tendres du tout.\n  Bon du coup quand t'as ton idée, [tu la proposes directement comme issue](https://github.com/putaindecode/putaindecode.io/issues/new)\n  afin de voir si ça intéresse du monde.\n\n* Il faut aussi que tu fasses attention à ne pas bosser sur le même post que\n  quelqu'un d'autre et pour ça tu dois aller jeter un coup d'oeil du côté des\n  issues en cours avec le label `post`. Allez, on est sympa, t'as [le\n  lien](https://github.com/putaindecode/putaindecode.io/issues?labels=post&page=1&state=open).\n\n* Bref, une fois ton idée trouvée, il faut que tu crées le post pour pouvoir\n  commencer à écrire dans le fichier. Tout d'abord tu vas devoir créer une\n  nouvelle branche. C'est une pratique qu'on demande à tout le monde, même\n  nous en interne on bosse sur des branches. Donc tout d'abord :\n\n  ```console\n  $ git checkout -b post.titre-court-du-post\n  ```\n\n  Ensuite il va falloir que tu crées les fichiers nécessaires pour le brouillon\n  du post.\n  Pour ça, tu vas dans `content/` et tu regardes comment ça se passe.\n  C'est plutôt simple. Tu créés un dossier avec le nom qui va bien avec un fichier\n  `.jade` pour les metas de l'article, et un `.md` pour le contenu.\n\n* Tu peux maintenant éditer ton fichier (en MarkDown) dans le fichier .md,\n  Amuse-toi, créé ton contenu, rédige bien tout comme tu veux.\n\n* Tu devrais pouvoir te balader sur le site et trouver ton article sur la page\n  des articles.\n  Avec la tâche `$ npm start` lancée normalement tout (ou presque) se rafraîchira\n  automatiquement.\n  Si ce n'est pas le cas, relance la tâche `$ npm start`.\n  Si là tu as une erreur qui t'échappes, on t'invite à\n  [ouvrir une issue](https://github.com/putaindecode/putaindecode.io/issues/new).\n\n* En l'état, tu devrais pouvoir consulter sur le site lancé localement ton post,\n  voir s'il sort correctement et s'il est présentable à ton goût.\n\n* Une fois que tout est bon, tu peux passer à l'étape de validation de tes\n  modifications (étape commune pour la modification d'un post existant ou la\n  proposition d'un nouveau)\n\n## Validation de tes modifications\n\n* Il faut tout d'abord pousser tes modifications sur ton `fork`. Pour ça on va\n  d'abord ajouter les fichier que tu as modifié à l'index de fichiers à\n  commit. Tu peux faire ça tout simplement avec un :\n\n  ```console\n  $ git add -A content/fr/articles/nom-du-post\n  ```\n\n  Cette commande ajoute tous les fichiers dans le dossier que tu as créé.\n  Si tu as ajouté des fichiers à l'extérieur de ce dossier, tu devras les\n  ajouter. Exemple :\n\n  ```console\n  $ git add images/memes/trollface.jpg\n  ```\n\n  Ensuite on va dire à git de valider ces modifications de code :\n\n  ```console\n  $ git commit -m \"Un petit message sympa expliquant le correctif/post\"\n  ```\n\n  Et on va finir en disant qu'on veut envoyer tout ça sur ton fork qui est\n  situé sur GitHub :\n\n  ```console\n  $ git push -u\n  ```\n\n* Voila ! Si tu vas voir ton `fork` sur GitHub tu verras ton commit et les\n  modifications que tu as apportées normalement. Il ne te reste plus qu'à nous\n  soumettre ces modifications. Pour ça tu vas faire ce qu'on appelle une Pull\n  Request (PR)\n\n* Il te suffit de cliquer sur le bouton vert qui représente 2 flèches en sens\n  inverse à côté du nom de ta branche en dessous du nombre de commits /\n  branches / etc.\n\n  <figure>\n    <img src=\"pull-request-button.jpg\" alt=\"Bouton Pull Request\" />\n    <figcaption>C'est bon tu le vois là le bouton ?</figcaption>\n  </figure>\n\n* Sélectionne les bonnes branches et ajoute-nous un beau titre et une belle\n  description de Pull Request en essayant au moins de commencer par `Post: Nom du post`\n  ou `Fix: Nom du post`\n\n* Et voilà ! Tu n'as qu'à attendre de nos nouvelles maintenant. D'ailleurs au\n  passage, si tu veux, tu peux en profiter pour nous suivre [sur\n  twitter](https://twitter.com/putaindecode), et tu pourras nous lâcher un\n  message avec ta PR ou ton issue en lien, histoire de nous mettre la pression.\n\n## Hey ! Tu veux mieux comprendre Git ?\n\nPour découvrir Git plus en détails, on t'invite à lire notre article\n[Versionner avec Git](/fr/articles/git/)\n","__filename":"fr/contribuer/index.md","__url":"/fr/contribuer/","__resourceUrl":"/fr/contribuer/index.html","__dataUrl":"/fr/contribuer/index.html.e94ee2746723e03819bb534836da3b0f.json"}