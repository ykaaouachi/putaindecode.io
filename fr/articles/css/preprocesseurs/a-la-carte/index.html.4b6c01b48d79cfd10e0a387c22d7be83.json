{"head":{"layout":"Post","comments":true,"date":"2014-05-20","title":"Faire son pr√©processeur CSS √† la carte","tags":["css","preprocesseur","postprocesseur"],"authors":["MoOx"],"description":"Apr√®s vous avoir fait un petit √©tat de l'art des pr√©processeurs CSS historiques et vous avoir parl√© des postprocesseurs, je me dois de vous‚Ä¶"},"body":"<p>Apr√®s vous avoir fait un petit <a href=\"/fr/articles/css/preprocesseurs/\">√©tat de l'art des pr√©processeurs CSS historiques</a>\net vous avoir parl√© <a href=\"/fr/articles/css/preprocesseurs/\">des postprocesseurs</a>,\nje me dois de vous montrer le chemin qui me semble le plus pertinent aujourd'hui,\nen 2014, maintenant que <a href=\"http://www.w3.org/standards/techs/css#cr\">les sp√©cifications CSS sont d√©coup√©es en modules</a>\nqui peuvent du coup avancer (plus rapidement) chacune de leur c√¥t√©.</p>\n<p>Bon apr√®s faut avouer que chez {p!} on fait genre on est des hipsters hackers,\ndu coup quand on voit que <a href=\"http://blog.kaelig.fr/post/85546040569/net-awards-sass-game-changer-of-the-year\">Sass est le game changer of the year</a>\net que tout le monde l'adopte, on se doit de rester hipster.\nDu coup on est oblig√©s de passer √† autre chose.</p>\n<p><strong>Mise √† jour du 11 d√©cembre 2014:</strong> <em>depuis le temps o√π j'ai r√©dig√© cette article, j'ai travaill√© sur un transpileur CSS future-proof, bas√© sur PostCSS. Je vous invite √† jeter au project <strong><a href=\"https://cssnext.github.io/\">cssnext</a></strong>.</em></p>\n<h2 id=\"pr√©-ou-postprocesseurs-\"><a href=\"#pr%C3%A9-ou-postprocesseurs-\" class=\"phenomic-HeadingAnchor\">#</a>Pr√© ou postprocesseurs ?</h2>\n<p>Je vais ici utiliser le mot pr√©processeur, alors que certains trouveront postprocesseurs plus pertinent,\ncar pour moi le pr√©processing reste simplement une √©tape avant le <em>processing</em>\nde nos feuilles de styles par les navigateurs.</p>\n<p>Cela dit il faut bien distinguer les √©tapes :</p>\n<ol>\n<li>Preprocessing d'un langage sp√©cifique (Sass, Stylus*) ou superset du langage CSS (Scss, Less);</li>\n<li>Preprocessing d'un fichier respectant la syntaxe CSS;</li>\n<li>Processing par le navigateur</li>\n</ol>\n<p>Revenons rapidement sur ces 3 points :</p>\n<h3 id=\"preprocessing-via-langage-d√©di√©\"><a href=\"#preprocessing-via-langage-d%C3%A9di%C3%A9\" class=\"phenomic-HeadingAnchor\">#</a>Preprocessing via langage d√©di√©</h3>\n<p>Ici je parle d'un langage, car superset ou pas, on a des √©l√©ments nouveaux,\nincompr√©hensibles par le navigateur (ex: <code>@if</code>, <code>@foreach</code>...).</p>\n<p>Note: Je case Stylus dans le langage sp√©cifique car il n'est pas vraiment compatible,\nne tol√©rant pas l'indentation :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.Block</span> { <span class=\"hljs-attribute\">prop</span>: value }\n\n  <span class=\"hljs-selector-class\">.Block-element</span> { <span class=\"hljs-attribute\">prop</span>: value }\n\n<span class=\"hljs-comment\">/* üí• BOOM ! CA PAS MARCHER EN STYLUS */</span></code></pre>\n<h3 id=\"pr√©processing-futureprooffallback\"><a href=\"#pr%C3%A9processing-futureprooffallback\" class=\"phenomic-HeadingAnchor\">#</a>Pr√©processing futureproof/fallback</h3>\n<p>Ici on conserve la syntaxe CSS, le parsing est donc simple est connu.\nMais attention on peut avoir un r√©sultat non compr√©hensible par certains navigateurs\n(ex: unit√© REM sur IE 8, variables CSS...).</p>\n<p>√Ä la diff√©rence de la solution du dessus, on reste ici avec un langage √† la syntaxe simple\net connue, avec des sp√©cifications (en brouillon ou pas).</p>\n<p>D√®s que c'est possible on va rendre le CSS encore plus compatible en ajoutant\ndes fallbacks (roues de secours) √† tout va.\nAinsi par exemple pour assurer une utilisation de l'unit√© REM, on peut (en roue de secours)\ndoubler nos valeurs en <code>px</code>.\nAutre exemple avec les variables CSS natives¬†: on peut (pour une utilisation simpliste)\nfaire un pr√©rendu et mettre des roues de secours l√† o√π c'est possible.</p>\n<h3 id=\"processing-par-le-navigateur\"><a href=\"#processing-par-le-navigateur\" class=\"phenomic-HeadingAnchor\">#</a>Processing par le navigateur</h3>\n<p>Ici on a blind√© notre feuille de fallback, on est (en th√©orie) sens√© avoir un support \"au mieux\".</p>\n<h2 id=\"cr√©er-un-pr√©processeur-css\"><a href=\"#cr%C3%A9er-un-pr%C3%A9processeur-css\" class=\"phenomic-HeadingAnchor\">#</a>Cr√©er un pr√©processeur CSS</h2>\n<p>Allons √† l'essentiel : pour cr√©er votre pr√©processeur on va utiliser une biblioth√®que.\n√Ä ce jour nous avons le choix entre <a href=\"https://github.com/reworkcss/rework\">Rework</a>\nou <a href=\"https://github.com/ai/postcss\">PostCSS</a> qui permettent d'inspecter et de manipuler nos CSS.\nTout deux sont des biblioth√®ques √©crites en JavaScript (NodeJs).</p>\n<p>Pour la petite histoire, Autoprefixer est √† l'origine de PostCSS. En effet les\npremi√®res versions utilisaient Rework, mais √† cause de limitation dues √† l'API de Rework,\nl'auteur d'Autoprefixer a d√©cid√© de cr√©er son propre moteur, qui a une API presque\nplus sympa il faut le dire (il faudra voir comment √©volue Rework).</p>\n<p>D'un autre c√¥t√© Rework √©tant plus ancien, il poss√®de un √©cosyst√®me plus fourni et r√©pondra\ndonc mieux √† nos besoins.</p>\n<p>Cela √©tant dit, avec l'approche futureproof nous pourrons switcher de Rework √† PostCSS\nsans probl√®me et surtout sans toucher √† nos feuilles de styles.\nIl suffira de trouver un plugin √©quivalent (ex: rework-vars et postcss-vars font la m√™me chose).</p>\n<p>Pour des raisons d'√©cosyst√®me, je partirai sur Rework histoire de ne pas r√©inventer la roue.</p>\n<h2 id=\"cr√©er-un-pr√©processeur-css-avec-rework\"><a href=\"#cr%C3%A9er-un-pr%C3%A9processeur-css-avec-rework\" class=\"phenomic-HeadingAnchor\">#</a>Cr√©er un pr√©processeur CSS avec Rework</h2>\n<p>Rework prend une cha√Æne CSS en entr√©e, produit un AST (arbre de syntaxe abtrait)\nde notre CSS et nous fournis une API pour le manipuler.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> rework = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework\"</span>)\n<span class=\"hljs-keyword\">var</span> unPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework-BIDULE\"</span>)\n<span class=\"hljs-comment\">// usage simple</span>\n<span class=\"hljs-keyword\">var</span> css = rework(<span class=\"hljs-string\">\"html { font-size: 2rem}\"</span>).use(unPlugin).toString()</code></pre>\n<h3 id=\"plugin-rework\"><a href=\"#plugin-rework\" class=\"phenomic-HeadingAnchor\">#</a>Plugin Rework</h3>\n<p>Un plugin Rework n'est rien d'autre qu'une fonction JavaScript.\nL'exemple suivant remplacera toutes les couleurs de texte par du noir.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> monPlugin = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">plugin</span>(<span class=\"hljs-params\">ast, reworkInstance</span>) </span>{\n  ast.rules.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">rule</span>) </span>{\n    <span class=\"hljs-comment\">// dans notre cas on ne veut que travailler sur des r√®gles</span>\n    <span class=\"hljs-keyword\">if</span> (rule.type !== <span class=\"hljs-string\">\"rule\"</span>) <span class=\"hljs-keyword\">return</span>\n\n    rule.declarations.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">declaration, index</span>) </span>{\n      <span class=\"hljs-keyword\">if</span> (declaration.property === <span class=\"hljs-string\">\"color\"</span>) {\n        declaration.value = <span class=\"hljs-string\">'#000'</span>\n      }\n    })\n  })\n}</code></pre>\n<p>Il est certain que l'exemple ci-dessus ne doit pas vous exciter beaucoup. Moi non plus.\nJe n'ai d'ailleurs pas du tout accroch√© lorsque Rework est apparu par manque de compr√©hension.\n<strong>Ou plut√¥t par manque d'imagination</strong>.</p>\n<p>Pour un exemple plus costaud je vous invite √† regarder le code <a href=\"https://github.com/reworkcss/rework-vars/blob/master/index.js\">rework-vars</a>.</p>\n<h2 id=\"lecosyst√®me-rework\"><a href=\"#lecosyst%C3%A8me-rework\" class=\"phenomic-HeadingAnchor\">#</a>L'Ecosyst√®me Rework</h2>\n<p>Heureusement pour nous, nous avons un √©cosyst√®me. Donc pour un usage classique (√©crire\ndu CSS futureproof ou ajouter quelques petites am√©liorations) il n'y aura pas besoin\nd'√©crire de plugin, juste en utiliser fera l'affaire.</p>\n<h3 id=\"plugins-rework-natif\"><a href=\"#plugins-rework-natif\" class=\"phenomic-HeadingAnchor\">#</a>Plugins Rework natif</h3>\n<p>Rework embarque en natif quelques plugins. Il faudra tout de m√™me les activer (on voit comment juste apr√®s).</p>\n<ul>\n<li><a href=\"https://github.com/reworkcss/rework#extend\">extend</a>: Permet d'h√©riter d'un s√©lecteur (<code>@extend</code> quoi).</li>\n<li><a href=\"https://github.com/reworkcss/rework#ease\">ease</a>: Ajout un paquet de fonctions d'easing pour les animations et transitions.</li>\n<li><a href=\"https://github.com/reworkcss/rework#at2x\">at2x</a>: Gestion automatique des images <code>@2x</code>.</li>\n<li><a href=\"https://github.com/reworkcss/rework#prefixselectorsstring\">prefixSelectors</a>: Permet de pr√©fixer vos s√©lecteurs.</li>\n<li><a href=\"https://github.com/reworkcss/rework#colors\">colors</a>: Explication par l'exemple : <code>rgba(#fc0, .5)</code>.</li>\n<li><a href=\"https://github.com/reworkcss/rework#mixinobject\">mixin</a>: Faire ses propres mixins via des fonctions JavaScript.</li>\n<li><a href=\"https://github.com/reworkcss/rework#functionobject\">function</a>: Ajouter ses propres fonctions CSS.</li>\n<li><a href=\"https://github.com/reworkcss/rework#references\">references</a>: Permet de faire r√©f√©rence √† des valeurs de propri√©t√©s (ex: <code>height: @width</code>)</li>\n<li><a href=\"https://github.com/reworkcss/rework#urlfn\">url</a>: R√©√©crire les <code>url()</code>s via une fonction JavaScript.</li>\n<li><a href=\"https://github.com/reworkcss/rework#inlinedir\">inline</a>: Inliner des ressources via des datauri.</li>\n</ul>\n<h3 id=\"plugins-rework-npm\"><a href=\"#plugins-rework-npm\" class=\"phenomic-HeadingAnchor\">#</a>Plugins Rework NPM</h3>\n<p>On a d√©j√† plus d'une soixantaine de <a href=\"https://www.npmjs.org/search?q=rework\">plugins Rework disponible sur NPM</a> en plus des plugins natifs.</p>\n<h4 id=\"ajouter-des-fallbacks\"><a href=\"#ajouter-des-fallbacks\" class=\"phenomic-HeadingAnchor\">#</a>Ajouter des fallbacks</h4>\n<p>Si vous souhaitez √©crire des CSS sans pour autant vous limiter √† certaines impl√©mentations, ces plugins devraient vous plaire.</p>\n<h5 id=\"rework-vars\"><a href=\"#rework-vars\" class=\"phenomic-HeadingAnchor\">#</a>rework-vars</h5>\n<p><a href=\"https://github.com/reworkcss/rework-vars\">rework-vars</a>\npermet un usage des <a href=\"http://www.w3.org/TR/css-variables/\">variables CSS</a>.\nCe plugin est (pour l'instant) restreint aux d√©clarations √† la racine (<code>:root</code>).\nCela permet toutefois un usage classique de variables globales.\nEt de se s√©parer de Sass ou Less si on utilise pas beaucoup plus que des variables.</p>\n<h5 id=\"rework-calc\"><a href=\"#rework-calc\" class=\"phenomic-HeadingAnchor\">#</a>rework-calc</h5>\n<p><a href=\"https://github.com/reworkcss/rework-calc\">rework-calc</a>\najoute les r√©sultats des op√©rations <code>calc()</code> quand c'est possible (m√™me unit√©).\nTr√®s pratique sp√©cialement coupl√© avec rework-vars pour ajouter un peu de math via vos variables.</p>\n<h5 id=\"rework-npm\"><a href=\"#rework-npm\" class=\"phenomic-HeadingAnchor\">#</a>rework-npm</h5>\n<p><a href=\"https://github.com/conradz/rework-npm\">rework-npm</a>\nnous parse <code>@import</code> comme on l'aime.\nPeut taper dans votre dossier de sources ou en plus dans <code>node_modules</code>\n(pratique pour utiliser <a href=\"https://www.npmjs.org/package/normalize.css\">normalize.css</a>\n<a href=\"/fr/articles/npm/frontend/\">via npm</a> par exemple).\nIl existe aussi <a href=\"https://github.com/simme/rework-importer\">rework-importer</a> qui am√®ne quelques diff√©rences de syntaxe.</p>\n<h5 id=\"rework-rem-fallback\"><a href=\"#rework-rem-fallback\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"https://github.com/ctalkington/rework-rem-fallback\">rework-rem-fallback</a></h5>\n<p><a href=\"https://github.com/ctalkington/rework-rem-fallback\">rework-rem-fallback</a>\najoute un fallback sur les unit√©s REM. Pratique si vous voulez utiliser REM mais\nque vous devez supporter IE 8.</p>\n<h5 id=\"rework-color-function\"><a href=\"#rework-color-function\" class=\"phenomic-HeadingAnchor\">#</a>rework-color-function</h5>\n<p><a href=\"https://github.com/ianstormtaylor/rework-color-function\">rework-color-function</a> permet\nde manipuler les couleurs via\n<a href=\"http://dev.w3.org/csswg/css-color/#modifying-colors\">les nouvelles fonctions en cours de sp√©cifications</a>\n(hue, saturation, lightness, whiteness, blackness, tint, shade, blend, blenda, contrast).</p>\n<h5 id=\"rework-mixin-opacity\"><a href=\"#rework-mixin-opacity\" class=\"phenomic-HeadingAnchor\">#</a>rework-mixin-opacity</h5>\n<p><a href=\"https://github.com/reworkcss/rework-mixin-opacity\">rework-mixin-opacity</a> ajoute l'<code>opacity</code> pour IE 8.</p>\n<h4 id=\"am√©liorer-un-peu-vos-feuilles-de-styles\"><a href=\"#am%C3%A9liorer-un-peu-vos-feuilles-de-styles\" class=\"phenomic-HeadingAnchor\">#</a>Am√©liorer un peu vos feuilles de styles</h4>\n<p>Sans pour autant partir en vrille vers des <code>@if</code> ou <code>@each</code>, voici quelques plugins\nqui peuvent ajouter un peu de beurre dans les √©pinards¬†:</p>\n<h5 id=\"rework-parent\"><a href=\"#rework-parent\" class=\"phenomic-HeadingAnchor\">#</a>rework-parent</h5>\n<p><a href=\"https://github.com/fgnass/rework-parent\">rework-parent</a> permet de r√©f√©rencer le s√©lecteur pr√©c√©dent via <code>&#x26;</code>. Pratique dans pour les media-queries ou pour les √©tats (:hover etc).</p>\n<h5 id=\"rework-breakpoints\"><a href=\"#rework-breakpoints\" class=\"phenomic-HeadingAnchor\">#</a>rework-breakpoints</h5>\n<p><a href=\"https://github.com/reworkcss/rework-breakpoints\">rework-breakpoints</a> permet de sp√©cifier des media-queries via des breakpoints pr√©d√©finis. Pratique en attendant un plugin g√©rant les <a href=\"http://dev.w3.org/csswg/mediaqueries4/#custom-mq\"><code>@custom-media</code></a>.</p>\n<h5 id=\"rework-hex-alpha\"><a href=\"#rework-hex-alpha\" class=\"phenomic-HeadingAnchor\">#</a>rework-hex-alpha</h5>\n<p><a href=\"https://github.com/ianstormtaylor/rework-hex-alpha\">rework-hex-alpha</a> permet de sp√©cifier des couleurs avec alpha sous la forme #rrggbbaa.</p>\n<h5 id=\"rework-clearfix\"><a href=\"#rework-clearfix\" class=\"phenomic-HeadingAnchor\">#</a>rework-clearfix</h5>\n<p><a href=\"https://github.com/fgnass/rework-clearfix\">rework-clearfix</a> permet d'utiliser <code>clear: fix</code> via l'insertion automatique du <a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\">micro clearfix de @necolas</a>.</p>\n<h5 id=\"rework-assets\"><a href=\"#rework-assets\" class=\"phenomic-HeadingAnchor\">#</a>rework-assets</h5>\n<p><a href=\"https://github.com/conradz/rework-assets\">rework-assets</a> permet de copier les assets r√©f√©renc√©s. Pratique avec rework-npm et des modules externes.</p>\n<h5 id=\"rework-namespace-css\"><a href=\"#rework-namespace-css\" class=\"phenomic-HeadingAnchor\">#</a>rework-namespace-css</h5>\n<p><a href=\"https://github.com/geordiemhall/rework-namespace-css\">rework-namespace-css</a> permet de namespacer vos CSS par une classe sur <code>&#x3C;html></code>.</p>\n<h5 id=\"rework-namespace\"><a href=\"#rework-namespace\" class=\"phenomic-HeadingAnchor\">#</a>rework-namespace</h5>\n<p><a href=\"https://github.com/kristoferjoseph/rework-namespace\">rework-namespace</a> permet de namespacer vos CSS par un pr√©fixe. Pratique avec <a href=\"/fr/articles/css/bem/\">BEM</a> lorsque vous pr√©fixez par votre <code>.org-</code>.</p>\n<h5 id=\"rework-classmap\"><a href=\"#rework-classmap\" class=\"phenomic-HeadingAnchor\">#</a>rework-classmap</h5>\n<p><a href=\"https://github.com/andreypopp/rework-classmap\">rework-classmap</a> permet de renommer des classes via du mapping. Avec √ßa on pourrait presque avoir un code Bootstrap propre.</p>\n<h5 id=\"rework-palette\"><a href=\"#rework-palette\" class=\"phenomic-HeadingAnchor\">#</a>rework-palette</h5>\n<p><a href=\"https://github.com/fgnass/rework-palette\">rework-palette</a> permet d'ajouter une palette de couleur personnalis√©e (via des noms de couleurs).</p>\n<h5 id=\"rework-deduplicate\"><a href=\"#rework-deduplicate\" class=\"phenomic-HeadingAnchor\">#</a>rework-deduplicate</h5>\n<p><a href=\"https://github.com/kristoferjoseph/rework-deduplicate\">rework-deduplicate</a> permet de supprimer les r√®gles dupliqu√©es.</p>\n<h5 id=\"rework-split-media\"><a href=\"#rework-split-media\" class=\"phenomic-HeadingAnchor\">#</a>rework-split-media</h5>\n<p><a href=\"https://github.com/reworkcss/split-media\">rework-split-media</a> permet de couper les contenus des media queries dans d'autres fichiers.</p>\n<h5 id=\"rework-move-media\"><a href=\"#rework-move-media\" class=\"phenomic-HeadingAnchor\">#</a>rework-move-media</h5>\n<p><a href=\"https://github.com/reworkcss/rework-move-media\">rework-move-media</a> permet de regrouper les contenus des media queries. Pas tr√®s utile car gzip fera aussi bien.</p>\n<h4 id=\"au-del√†-du-pr√©processing\"><a href=\"#au-del%C3%A0-du-pr%C3%A9processing\" class=\"phenomic-HeadingAnchor\">#</a>Au del√† du pr√©processing</h4>\n<p>En utilisant le parser Rework, on peut faire plus que des ajustements ou du remplacement: on peut balancer des erreurs.</p>\n<ul>\n<li><a href=\"https://github.com/reworkcss/rework-ie-limits\">rework-ie-limits</a>: pr√©vient si vos CSS d√©passent la limite de 4095 selectors (limite pour IE &#x3C; 10).</li>\n<li><a href=\"https://github.com/suitcss/rework-suit-conformance\">rework-suit-conformance</a>: permet de v√©rifier que votre code suit bien les <a href=\"https://github.com/suitcss/suit/tree/master/doc\">conventions SUIT</a> (pour peu que vous les suiviez).</li>\n</ul>\n<p>En partant dans d'autres directions on pourrait r√©aliser des statistiques sur\nnos CSS (nombre de s√©lecteurs, de couleurs utilis√©es etc) comme le fait <a href=\"http://www.cssstats.com/\">CSS Stats</a>.</p>\n<p>Retrouvrez en plus de la recherche via npm (qui sera la plus √† jour), <a href=\"https://github.com/reworkcss/rework/wiki/Plugins-and-Utilities\">une liste des plugins et utilitaires sur le wiki de Rework</a>.</p>\n<h2 id=\"mise-en-place-de-rework-pour-faire-votre-pr√©processeur-en-moins-de-5-min\"><a href=\"#mise-en-place-de-rework-pour-faire-votre-pr%C3%A9processeur-en-moins-de-5-min\" class=\"phenomic-HeadingAnchor\">#</a>Mise en place de Rework pour faire votre pr√©processeur en moins de 5 min</h2>\n<p>Maintenant que nous avons vu comment utiliser Rework et quels sont les plugins\nles plus sympas, on se faire un petit fichier pour automatiser tout ce process.</p>\n<p>Plut√¥t que de r√©inventer la roue comme l'a fait <a href=\"http://pleeease.io/\">Pleeease</a> (en g√©rant un watcher et tout le tralala),\non va plut√¥t partir comme <a href=\"http://myth.io/\">Myth.io</a> ou <a href=\"https://github.com/visionmedia/styl\">Styl</a> (successeur spirituel de Stylus)\nqui se concentrent sur le rendu et non le workflow pour g√©n√©rer ce rendu.</p>\n<p>Nous allons donc faire simple et efficace avec une task <a href=\"/fr/articles/js/gulp/\">gulp</a>.\nCeci pourrait bien entendu √™tre aussi bien fait avec grunt ou m√™me make et <a href=\"https://github.com/facebook/watchman\">watchman</a>.</p>\n<pre><code class=\"hljs language-console\">$ <span class=\"hljs-keyword\">mkdir</span> monrework &#x26;&#x26; <span class=\"hljs-keyword\">cd</span> monrework\n\n# <span class=\"hljs-keyword\">on</span> cr√©<span class=\"hljs-keyword\">e</span> un package.json pour sauvegarder les r√©f√©rences <span class=\"hljs-keyword\">des</span> paquets <span class=\"hljs-keyword\">qu</span>'<span class=\"hljs-keyword\">on</span> va utiliser\n$ npm init\n\n# <span class=\"hljs-keyword\">on</span> install gulp, autoprefixer et rework &#x26; co <span class=\"hljs-keyword\">en</span> les sauvegardants dans <span class=\"hljs-keyword\">la</span> partie <span class=\"hljs-string\">\"devDependencies\"</span>\n$ npm i -<span class=\"hljs-keyword\">D</span> minimist gulp gulp-util gulp-plumber gulp-autoprefixer gulp-rework rework-npm rework-vars rework-calc rework-color-function rework-rem-fallback rework-parent rework-ie-limits\n\n# <span class=\"hljs-keyword\">on</span> cr√©√© notre fichier vide\n$ <span class=\"hljs-keyword\">mkdir</span> src &#x26;&#x26; <span class=\"hljs-keyword\">mkdir</span> src/styles &#x26;&#x26; touch src/styles/index.css</code></pre>\n<p>Ensuite il nous reste √† faire notre petit <code>Gulpfile.js</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> options = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"minimist\"</span>)(process.argv.slice(<span class=\"hljs-number\">2</span>))\n<span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp\"</span>)\n<span class=\"hljs-keyword\">var</span> util = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-util\"</span>)\n<span class=\"hljs-keyword\">var</span> plumber = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-plumber\"</span>)\n<span class=\"hljs-keyword\">var</span> rework = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-rework\"</span>)\n\n<span class=\"hljs-keyword\">var</span> reworkPlugins = {\n  <span class=\"hljs-attr\">atimport</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework-npm\"</span>),\n  <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework-parent\"</span>),\n  <span class=\"hljs-attr\">vars</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework-vars\"</span>),\n  <span class=\"hljs-attr\">calc</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework-calc\"</span>),\n  <span class=\"hljs-attr\">colorFn</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework-color-function\"</span>),\n  <span class=\"hljs-attr\">remFallback</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework-rem-fallback\"</span>),\n  <span class=\"hljs-attr\">ieLimits</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"rework-ie-limits\"</span>)\n}\n<span class=\"hljs-keyword\">var</span> autoprefixer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-autoprefixer\"</span>)\n\ngulp.task(<span class=\"hljs-string\">\"styles\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// ici on prend toutes les CSS √† la racine</span>\n  <span class=\"hljs-comment\">// on consid√®re que celles dans des sous dossiers sont √† importer</span>\n  <span class=\"hljs-keyword\">return</span> gulp.src(<span class=\"hljs-string\">\"./src/styles/*.css\"</span>)\n    .pipe(opts.production ? plumber() : util.noop())\n    .pipe(rework(\n      reworkPlugins.atimport({<span class=\"hljs-attr\">dir</span>: <span class=\"hljs-string\">\"./src/styles/\"</span>}),\n      rework.colors(),\n      rework.references(),\n      rework.ease(),\n      rework.inline,\n      reworkPlugins.parent,\n      reworkPlugins.vars(), <span class=\"hljs-comment\">// notez que certains plugins n√©cessitent d'√™tre √©xecut√©s (retournant une fonction dynamique)</span>\n      reworkPlugins.calc,\n      reworkPlugins.colorFn,\n      reworkPlugins.remFallback(),\n      reworkPlugins.ieLimits\n    ))\n    .pipe(autoprefixer())\n    .pipe(gulp.dest(<span class=\"hljs-string\">\"./dist/styles\"</span>))\n})\n\ngulp.task(<span class=\"hljs-string\">\"default\"</span>, [<span class=\"hljs-string\">\"styles\"</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp.watch(<span class=\"hljs-string\">\"./src/css/**/*\"</span>, [<span class=\"hljs-string\">\"styles\"</span>])\n})</code></pre>\n<p>Ensuite il ne reste plus qu'√† lancer Gulp au besoin qui s'occupera d'√©xecuter le preprocessing\nau d√©marrage et lors des changements de fichiers.\nIl ne reste plus grand chose √† faire si ce n'est ajouter livereload en plus pour avoir le petit process aux petits oignons.</p>\n<pre><code class=\"hljs language-console\">$ gulp\n[gulp] <span class=\"hljs-symbol\">Using</span> gulpfile ~/<span class=\"hljs-symbol\">Development</span>/monrework/<span class=\"hljs-symbol\">Gulpfile</span>.js\n[gulp] <span class=\"hljs-symbol\">Starting</span> <span class=\"hljs-string\">'styles'</span>...\n[gulp] <span class=\"hljs-symbol\">Finished</span> <span class=\"hljs-string\">'styles'</span> after <span class=\"hljs-number\">49</span> ms\n[gulp] <span class=\"hljs-symbol\">Starting</span> <span class=\"hljs-string\">'default'</span>...\n[gulp] <span class=\"hljs-symbol\">Finished</span> <span class=\"hljs-string\">'default'</span> after <span class=\"hljs-number\">4.16</span> ms</code></pre>\n<p>Le watch est lanc√©, on peut remplir notre fichier CSS</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-pseudo\">:root</span> {\n\t<span class=\"hljs-attribute\">--fontSize</span>: <span class=\"hljs-number\">1rem</span>;\n\t<span class=\"hljs-attribute\">--lineHeight</span>: <span class=\"hljs-number\">1.5rem</span>;\n\t<span class=\"hljs-attribute\">--color-highlight</span>: <span class=\"hljs-built_in\">rgba</span>(#f00, .8);\n}\n\n<span class=\"hljs-selector-tag\">html</span> {\n\t<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n\t<span class=\"hljs-attribute\">height</span>: @width;\n\t<span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">var</span>(--fontSize)\n}\n\n<span class=\"hljs-selector-tag\">p</span> {\n\t<span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-built_in\">calc</span>(var(--lineHeight) / <span class=\"hljs-number\">2</span>) <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-selector-tag\">a</span> {\n\t<span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--color-highlight);\n\t<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">500ms</span> ease-out-back;\n}\n\n&#x26;<span class=\"hljs-selector-pseudo\">:hover</span> {\n\t<span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">color</span>(var(--color-highlight) <span class=\"hljs-built_in\">lightness</span>(-10%));\n\t<span class=\"hljs-attribute\">trasnform</span>: <span class=\"hljs-built_in\">rotate</span>(1deg);\n}</code></pre>\n<p>Et on obtiendra</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">html</span> {\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1rem</span>;\n}\n\n<span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">12px</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0.75rem</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-selector-tag\">a</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(255, 0, 0, .8);\n  <span class=\"hljs-attribute\">-webkit-transition</span>: all <span class=\"hljs-number\">500ms</span> <span class=\"hljs-built_in\">cubic-bezier</span>(0.175, 0.885, 0.320, 1.275);\n  <span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">500ms</span> <span class=\"hljs-built_in\">cubic-bezier</span>(0.175, 0.885, 0.320, 1.275);\n}\n\n<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(204, 0, 0, 0.8);\n  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(1deg);\n}</code></pre>\n<p>Gardez bien en t√™te qu'avec le code CSS d'origine, vous avez (en majeur partie) un code futureproof.\nD'ici quelques temps on pourra supprimer une grande partie des plugins et les navigateurs prendront le relais üòâ.</p>\n<p><strong>Bon alors, on Less tomber Sass ?</strong></p>\n","rawBody":"\nApr√®s vous avoir fait un petit [√©tat de l'art des pr√©processeurs CSS historiques](/fr/articles/css/preprocesseurs/)\net vous avoir parl√© [des postprocesseurs](/fr/articles/css/preprocesseurs/),\nje me dois de vous montrer le chemin qui me semble le plus pertinent aujourd'hui,\nen 2014, maintenant que [les sp√©cifications CSS sont d√©coup√©es en modules](http://www.w3.org/standards/techs/css#cr)\nqui peuvent du coup avancer (plus rapidement) chacune de leur c√¥t√©.\n\nBon apr√®s faut avouer que chez {p!} on fait genre on est des hipsters hackers,\ndu coup quand on voit que [Sass est le game changer of the year](http://blog.kaelig.fr/post/85546040569/net-awards-sass-game-changer-of-the-year)\n et que tout le monde l'adopte, on se doit de rester hipster.\nDu coup on est oblig√©s de passer √† autre chose.\n\n**Mise √† jour du 11 d√©cembre 2014:** _depuis le temps o√π j'ai r√©dig√© cette article, j'ai travaill√© sur un transpileur CSS future-proof, bas√© sur PostCSS. Je vous invite √† jeter au project **[cssnext](https://cssnext.github.io/)**._\n\n## Pr√© ou postprocesseurs ?\n\nJe vais ici utiliser le mot pr√©processeur, alors que certains trouveront postprocesseurs plus pertinent,\ncar pour moi le pr√©processing reste simplement une √©tape avant le _processing_\nde nos feuilles de styles par les navigateurs.\n\nCela dit il faut bien distinguer les √©tapes :\n\n1. Preprocessing d'un langage sp√©cifique (Sass, Stylus*) ou superset du langage CSS (Scss, Less);\n2. Preprocessing d'un fichier respectant la syntaxe CSS;\n3. Processing par le navigateur\n\nRevenons rapidement sur ces 3 points :\n\n### Preprocessing via langage d√©di√©\n\nIci je parle d'un langage, car superset ou pas, on a des √©l√©ments nouveaux,\nincompr√©hensibles par le navigateur (ex: `@if`, `@foreach`...).\n\nNote: Je case Stylus dans le langage sp√©cifique car il n'est pas vraiment compatible,\nne tol√©rant pas l'indentation :\n\n```css\n.Block { prop: value }\n\n  .Block-element { prop: value }\n\n/* üí• BOOM ! CA PAS MARCHER EN STYLUS */\n```\n\n### Pr√©processing futureproof/fallback\n\nIci on conserve la syntaxe CSS, le parsing est donc simple est connu.\nMais attention on peut avoir un r√©sultat non compr√©hensible par certains navigateurs\n(ex: unit√© REM sur IE 8, variables CSS...).\n\n√Ä la diff√©rence de la solution du dessus, on reste ici avec un langage √† la syntaxe simple\net connue, avec des sp√©cifications (en brouillon ou pas).\n\nD√®s que c'est possible on va rendre le CSS encore plus compatible en ajoutant\ndes fallbacks (roues de secours) √† tout va.\nAinsi par exemple pour assurer une utilisation de l'unit√© REM, on peut (en roue de secours)\ndoubler nos valeurs en `px`.\nAutre exemple avec les variables CSS natives¬†: on peut (pour une utilisation simpliste)\nfaire un pr√©rendu et mettre des roues de secours l√† o√π c'est possible.\n\n### Processing par le navigateur\n\nIci on a blind√© notre feuille de fallback, on est (en th√©orie) sens√© avoir un support \"au mieux\".\n\n## Cr√©er un pr√©processeur CSS\n\nAllons √† l'essentiel : pour cr√©er votre pr√©processeur on va utiliser une biblioth√®que.\n√Ä ce jour nous avons le choix entre [Rework](https://github.com/reworkcss/rework)\n ou [PostCSS](https://github.com/ai/postcss) qui permettent d'inspecter et de manipuler nos CSS.\nTout deux sont des biblioth√®ques √©crites en JavaScript (NodeJs).\n\nPour la petite histoire, Autoprefixer est √† l'origine de PostCSS. En effet les\npremi√®res versions utilisaient Rework, mais √† cause de limitation dues √† l'API de Rework,\nl'auteur d'Autoprefixer a d√©cid√© de cr√©er son propre moteur, qui a une API presque\nplus sympa il faut le dire (il faudra voir comment √©volue Rework).\n\nD'un autre c√¥t√© Rework √©tant plus ancien, il poss√®de un √©cosyst√®me plus fourni et r√©pondra\ndonc mieux √† nos besoins.\n\nCela √©tant dit, avec l'approche futureproof nous pourrons switcher de Rework √† PostCSS\n sans probl√®me et surtout sans toucher √† nos feuilles de styles.\nIl suffira de trouver un plugin √©quivalent (ex: rework-vars et postcss-vars font la m√™me chose).\n\nPour des raisons d'√©cosyst√®me, je partirai sur Rework histoire de ne pas r√©inventer la roue.\n\n## Cr√©er un pr√©processeur CSS avec Rework\n\nRework prend une cha√Æne CSS en entr√©e, produit un AST (arbre de syntaxe abtrait)\nde notre CSS et nous fournis une API pour le manipuler.\n\n```js\nvar rework = require(\"rework\")\nvar unPlugin = require(\"rework-BIDULE\")\n// usage simple\nvar css = rework(\"html { font-size: 2rem}\").use(unPlugin).toString()\n```\n\n### Plugin Rework\n\nUn plugin Rework n'est rien d'autre qu'une fonction JavaScript.\nL'exemple suivant remplacera toutes les couleurs de texte par du noir.\n\n```js\nvar monPlugin = function plugin(ast, reworkInstance) {\n  ast.rules.forEach(function (rule) {\n    // dans notre cas on ne veut que travailler sur des r√®gles\n    if (rule.type !== \"rule\") return\n\n    rule.declarations.forEach(function (declaration, index) {\n      if (declaration.property === \"color\") {\n        declaration.value = '#000'\n      }\n    })\n  })\n}\n```\n\nIl est certain que l'exemple ci-dessus ne doit pas vous exciter beaucoup. Moi non plus.\nJe n'ai d'ailleurs pas du tout accroch√© lorsque Rework est apparu par manque de compr√©hension.\n**Ou plut√¥t par manque d'imagination**.\n\nPour un exemple plus costaud je vous invite √† regarder le code [rework-vars](https://github.com/reworkcss/rework-vars/blob/master/index.js).\n\n## L'Ecosyst√®me Rework\n\nHeureusement pour nous, nous avons un √©cosyst√®me. Donc pour un usage classique (√©crire\ndu CSS futureproof ou ajouter quelques petites am√©liorations) il n'y aura pas besoin\nd'√©crire de plugin, juste en utiliser fera l'affaire.\n\n### Plugins Rework natif\n\nRework embarque en natif quelques plugins. Il faudra tout de m√™me les activer (on voit comment juste apr√®s).\n\n- [extend](https://github.com/reworkcss/rework#extend): Permet d'h√©riter d'un s√©lecteur (`@extend` quoi).\n- [ease](https://github.com/reworkcss/rework#ease): Ajout un paquet de fonctions d'easing pour les animations et transitions.\n- [at2x](https://github.com/reworkcss/rework#at2x): Gestion automatique des images `@2x`.\n- [prefixSelectors](https://github.com/reworkcss/rework#prefixselectorsstring): Permet de pr√©fixer vos s√©lecteurs.\n- [colors](https://github.com/reworkcss/rework#colors): Explication par l'exemple : `rgba(#fc0, .5)`.\n- [mixin](https://github.com/reworkcss/rework#mixinobject): Faire ses propres mixins via des fonctions JavaScript.\n- [function](https://github.com/reworkcss/rework#functionobject): Ajouter ses propres fonctions CSS.\n- [references](https://github.com/reworkcss/rework#references): Permet de faire r√©f√©rence √† des valeurs de propri√©t√©s (ex: `height: @width`)\n- [url](https://github.com/reworkcss/rework#urlfn): R√©√©crire les `url()`s via une fonction JavaScript.\n- [inline](https://github.com/reworkcss/rework#inlinedir): Inliner des ressources via des datauri.\n\n### Plugins Rework NPM\n\nOn a d√©j√† plus d'une soixantaine de [plugins Rework disponible sur NPM](https://www.npmjs.org/search?q=rework) en plus des plugins natifs.\n\n#### Ajouter des fallbacks\n\nSi vous souhaitez √©crire des CSS sans pour autant vous limiter √† certaines impl√©mentations, ces plugins devraient vous plaire.\n\n##### rework-vars\n\n[rework-vars](https://github.com/reworkcss/rework-vars)\npermet un usage des [variables CSS](http://www.w3.org/TR/css-variables/).\nCe plugin est (pour l'instant) restreint aux d√©clarations √† la racine (`:root`).\nCela permet toutefois un usage classique de variables globales.\nEt de se s√©parer de Sass ou Less si on utilise pas beaucoup plus que des variables.\n\n##### rework-calc\n\n[rework-calc](https://github.com/reworkcss/rework-calc)\najoute les r√©sultats des op√©rations `calc()` quand c'est possible (m√™me unit√©).\nTr√®s pratique sp√©cialement coupl√© avec rework-vars pour ajouter un peu de math via vos variables.\n\n##### rework-npm\n\n[rework-npm](https://github.com/conradz/rework-npm)\nnous parse `@import` comme on l'aime.\nPeut taper dans votre dossier de sources ou en plus dans `node_modules`\n(pratique pour utiliser [normalize.css](https://www.npmjs.org/package/normalize.css)\n[via npm](/fr/articles/npm/frontend/) par exemple).\nIl existe aussi [rework-importer](https://github.com/simme/rework-importer) qui am√®ne quelques diff√©rences de syntaxe.\n\n##### [rework-rem-fallback](https://github.com/ctalkington/rework-rem-fallback)\n\n[rework-rem-fallback](https://github.com/ctalkington/rework-rem-fallback)\najoute un fallback sur les unit√©s REM. Pratique si vous voulez utiliser REM mais\nque vous devez supporter IE 8.\n\n##### rework-color-function\n\n[rework-color-function](https://github.com/ianstormtaylor/rework-color-function) permet\nde manipuler les couleurs via\n[les nouvelles fonctions en cours de sp√©cifications](http://dev.w3.org/csswg/css-color/#modifying-colors)\n(hue, saturation, lightness, whiteness, blackness, tint, shade, blend, blenda, contrast).\n\n##### rework-mixin-opacity\n\n[rework-mixin-opacity](https://github.com/reworkcss/rework-mixin-opacity) ajoute l'`opacity` pour IE 8.\n\n#### Am√©liorer un peu vos feuilles de styles\n\nSans pour autant partir en vrille vers des `@if` ou `@each`, voici quelques plugins\nqui peuvent ajouter un peu de beurre dans les √©pinards¬†:\n\n##### rework-parent\n[rework-parent](https://github.com/fgnass/rework-parent) permet de r√©f√©rencer le s√©lecteur pr√©c√©dent via `&`. Pratique dans pour les media-queries ou pour les √©tats (:hover etc).\n\n##### rework-breakpoints\n[rework-breakpoints](https://github.com/reworkcss/rework-breakpoints) permet de sp√©cifier des media-queries via des breakpoints pr√©d√©finis. Pratique en attendant un plugin g√©rant les [`@custom-media`](http://dev.w3.org/csswg/mediaqueries4/#custom-mq).\n\n##### rework-hex-alpha\n[rework-hex-alpha](https://github.com/ianstormtaylor/rework-hex-alpha) permet de sp√©cifier des couleurs avec alpha sous la forme #rrggbbaa.\n\n##### rework-clearfix\n[rework-clearfix](https://github.com/fgnass/rework-clearfix) permet d'utiliser `clear: fix` via l'insertion automatique du [micro clearfix de @necolas](http://nicolasgallagher.com/micro-clearfix-hack/).\n\n##### rework-assets\n[rework-assets](https://github.com/conradz/rework-assets) permet de copier les assets r√©f√©renc√©s. Pratique avec rework-npm et des modules externes.\n\n##### rework-namespace-css\n[rework-namespace-css](https://github.com/geordiemhall/rework-namespace-css) permet de namespacer vos CSS par une classe sur `<html>`.\n\n##### rework-namespace\n[rework-namespace](https://github.com/kristoferjoseph/rework-namespace) permet de namespacer vos CSS par un pr√©fixe. Pratique avec [BEM](/fr/articles/css/bem/) lorsque vous pr√©fixez par votre `.org-`.\n\n##### rework-classmap\n[rework-classmap](https://github.com/andreypopp/rework-classmap) permet de renommer des classes via du mapping. Avec √ßa on pourrait presque avoir un code Bootstrap propre.\n\n##### rework-palette\n[rework-palette](https://github.com/fgnass/rework-palette) permet d'ajouter une palette de couleur personnalis√©e (via des noms de couleurs).\n\n##### rework-deduplicate\n[rework-deduplicate](https://github.com/kristoferjoseph/rework-deduplicate) permet de supprimer les r√®gles dupliqu√©es.\n\n##### rework-split-media\n[rework-split-media](https://github.com/reworkcss/split-media) permet de couper les contenus des media queries dans d'autres fichiers.\n\n##### rework-move-media\n[rework-move-media](https://github.com/reworkcss/rework-move-media) permet de regrouper les contenus des media queries. Pas tr√®s utile car gzip fera aussi bien.\n\n\n#### Au del√† du pr√©processing\n\nEn utilisant le parser Rework, on peut faire plus que des ajustements ou du remplacement: on peut balancer des erreurs.\n\n- [rework-ie-limits](https://github.com/reworkcss/rework-ie-limits): pr√©vient si vos CSS d√©passent la limite de 4095 selectors (limite pour IE < 10).\n- [rework-suit-conformance](https://github.com/suitcss/rework-suit-conformance): permet de v√©rifier que votre code suit bien les [conventions SUIT](https://github.com/suitcss/suit/tree/master/doc) (pour peu que vous les suiviez).\n\nEn partant dans d'autres directions on pourrait r√©aliser des statistiques sur\nnos CSS (nombre de s√©lecteurs, de couleurs utilis√©es etc) comme le fait [CSS Stats](http://www.cssstats.com/).\n\nRetrouvrez en plus de la recherche via npm (qui sera la plus √† jour), [une liste des plugins et utilitaires sur le wiki de Rework](https://github.com/reworkcss/rework/wiki/Plugins-and-Utilities).\n\n## Mise en place de Rework pour faire votre pr√©processeur en moins de 5 min\n\nMaintenant que nous avons vu comment utiliser Rework et quels sont les plugins\nles plus sympas, on se faire un petit fichier pour automatiser tout ce process.\n\nPlut√¥t que de r√©inventer la roue comme l'a fait [Pleeease](http://pleeease.io/) (en g√©rant un watcher et tout le tralala),\non va plut√¥t partir comme [Myth.io](http://myth.io/) ou [Styl](https://github.com/visionmedia/styl) (successeur spirituel de Stylus)\nqui se concentrent sur le rendu et non le workflow pour g√©n√©rer ce rendu.\n\nNous allons donc faire simple et efficace avec une task [gulp](/fr/articles/js/gulp/).\nCeci pourrait bien entendu √™tre aussi bien fait avec grunt ou m√™me make et [watchman](https://github.com/facebook/watchman).\n\n```console\n$ mkdir monrework && cd monrework\n\n# on cr√©e un package.json pour sauvegarder les r√©f√©rences des paquets qu'on va utiliser\n$ npm init\n\n# on install gulp, autoprefixer et rework & co en les sauvegardants dans la partie \"devDependencies\"\n$ npm i -D minimist gulp gulp-util gulp-plumber gulp-autoprefixer gulp-rework rework-npm rework-vars rework-calc rework-color-function rework-rem-fallback rework-parent rework-ie-limits\n\n# on cr√©√© notre fichier vide\n$ mkdir src && mkdir src/styles && touch src/styles/index.css\n```\n\nEnsuite il nous reste √† faire notre petit `Gulpfile.js`\n\n```js\nvar options = require(\"minimist\")(process.argv.slice(2))\nvar gulp = require(\"gulp\")\nvar util = require(\"gulp-util\")\nvar plumber = require(\"gulp-plumber\")\nvar rework = require(\"gulp-rework\")\n\nvar reworkPlugins = {\n  atimport: require(\"rework-npm\"),\n  parent: require(\"rework-parent\"),\n  vars: require(\"rework-vars\"),\n  calc: require(\"rework-calc\"),\n  colorFn: require(\"rework-color-function\"),\n  remFallback: require(\"rework-rem-fallback\"),\n  ieLimits: require(\"rework-ie-limits\")\n}\nvar autoprefixer = require(\"gulp-autoprefixer\")\n\ngulp.task(\"styles\", function() {\n  // ici on prend toutes les CSS √† la racine\n  // on consid√®re que celles dans des sous dossiers sont √† importer\n  return gulp.src(\"./src/styles/*.css\")\n    .pipe(opts.production ? plumber() : util.noop())\n    .pipe(rework(\n      reworkPlugins.atimport({dir: \"./src/styles/\"}),\n      rework.colors(),\n      rework.references(),\n      rework.ease(),\n      rework.inline,\n      reworkPlugins.parent,\n      reworkPlugins.vars(), // notez que certains plugins n√©cessitent d'√™tre √©xecut√©s (retournant une fonction dynamique)\n      reworkPlugins.calc,\n      reworkPlugins.colorFn,\n      reworkPlugins.remFallback(),\n      reworkPlugins.ieLimits\n    ))\n    .pipe(autoprefixer())\n    .pipe(gulp.dest(\"./dist/styles\"))\n})\n\ngulp.task(\"default\", [\"styles\"], function() {\n  gulp.watch(\"./src/css/**/*\", [\"styles\"])\n})\n\n```\n\nEnsuite il ne reste plus qu'√† lancer Gulp au besoin qui s'occupera d'√©xecuter le preprocessing\nau d√©marrage et lors des changements de fichiers.\nIl ne reste plus grand chose √† faire si ce n'est ajouter livereload en plus pour avoir le petit process aux petits oignons.\n\n```console\n$ gulp\n[gulp] Using gulpfile ~/Development/monrework/Gulpfile.js\n[gulp] Starting 'styles'...\n[gulp] Finished 'styles' after 49 ms\n[gulp] Starting 'default'...\n[gulp] Finished 'default' after 4.16 ms\n```\n\nLe watch est lanc√©, on peut remplir notre fichier CSS\n\n```css\n:root {\n\t--fontSize: 1rem;\n\t--lineHeight: 1.5rem;\n\t--color-highlight: rgba(#f00, .8);\n}\n\nhtml {\n\twidth: 100%;\n\theight: @width;\n\tfont-size: var(--fontSize)\n}\n\np {\n\tmargin: calc(var(--lineHeight) / 2) 0;\n}\n\na {\n\tcolor: var(--color-highlight);\n\ttransition: all 500ms ease-out-back;\n}\n\n&:hover {\n\tcolor: color(var(--color-highlight) lightness(-10%));\n\ttrasnform: rotate(1deg);\n}\n```\n\nEt on obtiendra\n\n```css\nhtml {\n  width: 100%;\n  height: 100%;\n  font-size: 16px;\n  font-size: 1rem;\n}\n\np {\n  margin: 12px 0;\n  margin: 0.75rem 0;\n}\n\na {\n  color: rgba(255, 0, 0, .8);\n  -webkit-transition: all 500ms cubic-bezier(0.175, 0.885, 0.320, 1.275);\n  transition: all 500ms cubic-bezier(0.175, 0.885, 0.320, 1.275);\n}\n\na:hover {\n  color: rgba(204, 0, 0, 0.8);\n  transform: rotate(1deg);\n}\n```\n\nGardez bien en t√™te qu'avec le code CSS d'origine, vous avez (en majeur partie) un code futureproof.\nD'ici quelques temps on pourra supprimer une grande partie des plugins et les navigateurs prendront le relais üòâ.\n\n**Bon alors, on Less tomber Sass ?**\n","__filename":"fr/articles/css/preprocesseurs/a-la-carte/index.md","__url":"/fr/articles/css/preprocesseurs/a-la-carte/","__resourceUrl":"/fr/articles/css/preprocesseurs/a-la-carte/index.html","__dataUrl":"/fr/articles/css/preprocesseurs/a-la-carte/index.html.4b6c01b48d79cfd10e0a387c22d7be83.json"}