{"head":{"layout":"Post","comments":true,"date":"2015-06-02","title":"Introduction à cssnext","tags":["css","postcss"],"authors":["Macxim"],"header":{"credit":"https://www.flickr.com/photos/frinky/620935482"},"description":"D'après le site officiel: cssnext est un transpileur CSS qui vous permet d'utiliser dès aujourd'hui la syntaxe CSS de demain. Il transforme…"},"body":"<p>D'après le <a href=\"http://cssnext.io/\">site officiel</a>:</p>\n<blockquote>\n<p><strong>cssnext</strong> est un transpileur CSS qui vous permet d'utiliser dès aujourd'hui la syntaxe CSS de demain. Il transforme les spécifications CSS qui ne sont pas encore mises en œuvre sur les navigateurs les plus populaires en CSS compatible.</p>\n</blockquote>\n<h2 id=\"Ça-veut-dire-quoi-exactement-\"><a href=\"#%C3%87a-veut-dire-quoi-exactement-\" class=\"phenomic-HeadingAnchor\">#</a>Ça veut dire quoi exactement ?</h2>\n<p>Depuis CSS3, vous avez savez sans doute que CSS est divisé en plusieurs documents indépendants appelés \"modules\". Ces modules peuvent avoir différents niveaux de stabilité et différents <a href=\"http://www.w3.org/Style/CSS/current-work#legend\">statuts</a>. La mise en œuvre de ces modules par les navigateurs peut prendre un certain temps et encore plus pour que le W3C les approuve comme <a href=\"http://www.w3.org/2005/10/Process-20051014/tr#RecsW3C\">Recommandation</a>.</p>\n<p>Avec <strong>cssnext</strong>, vous pouvez utiliser la syntaxe des <a href=\"http://www.xanthir.com/b4Ko0\">nouveaux modules CSS</a> tels que les <em>propriétés personnalisées (custom properties level 1)</em> ou les <em>media queries personnalisées (custom media queries level 1)</em>. <strong>cssnext</strong> va transformer ces nouvelles et étranges syntaxes en du CSS compréhensible par les navigateurs que vous voulez supporter.</p>\n<p>En clair, il vous donne un <strong>avant-goût du futur</strong>.</p>\n<p>Je ne sais pas vous mais étant quelqu'un qui aime expérimenter avec les dernières technologies de pointe, je trouve ça plutôt cool !</p>\n<p>Je vous conseille de jeter un oeil à la <a href=\"http://cssnext.io/features/\">liste des fonctionnalités</a>.</p>\n<h3 id=\"quid-de-mon-préprocesseur-actuel-\"><a href=\"#quid-de-mon-pr%C3%A9processeur-actuel-\" class=\"phenomic-HeadingAnchor\">#</a>Quid de mon préprocesseur actuel ?</h3>\n<p>Oubliez les risques liés à une abstraction trop élevée des CSS par les pré-processeurs actuels ; certes causés par une (sur-|mauvaise) utilisation de ces outils mais quand même.</p>\n<p>Devinez quoi, vous n'en avez pas forcément besoin.</p>\n<p>Essayez <strong>cssnext</strong> et retournez à ce bon <del>vieux</del> nouveau CSS. Et avec un zeste de <a href=\"/fr/articles/css/bem/\">méthodologie BEM</a>, vous vous sentirez revivre.</p>\n<h2 id=\"exemples\"><a href=\"#exemples\" class=\"phenomic-HeadingAnchor\">#</a>Exemples</h2>\n<p>Voyons voir quelles sont les fonctionnalités offertes par <strong>cssnext</strong> pour le moment.</p>\n<p>Avant toute chose, vous devriez aller faire un tour sur le <a href=\"http://cssnext.io/playground/\">playground du site officiel</a>.</p>\n<h3 id=\"préfixes-propriétaires-automatiques\"><a href=\"#pr%C3%A9fixes-propri%C3%A9taires-automatiques\" class=\"phenomic-HeadingAnchor\">#</a>Préfixes propriétaires automatiques</h3>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.h1</span> {\n  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n  <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">1s</span>;\n}</code></pre>\n<p>Cela va être transformé par <strong>cssnext</strong> via Autoprefixer en :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.h1</span> {\n  <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n      <span class=\"hljs-attribute\">-ms-transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n          <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n  <span class=\"hljs-attribute\">-webkit-transition</span>: -webkit-transform <span class=\"hljs-number\">1s</span>;\n          <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">1s</span>;\n}</code></pre>\n<h3 id=\"propriétés-personnalisées-et-var-limité-à-root\"><a href=\"#propri%C3%A9t%C3%A9s-personnalis%C3%A9es-et-var-limit%C3%A9-%C3%A0-root\" class=\"phenomic-HeadingAnchor\">#</a>Propriétés personnalisées et var() limité à <code>:root</code></h3>\n<p>Aussi connues sous le nom des très attendues <a href=\"http://www.w3.org/TR/css-variables/\">variables CSS</a>.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-pseudo\">:root</span> {\n  <span class=\"hljs-attribute\">--primary-Color</span>:                 <span class=\"hljs-number\">#E86100</span>;\n  <span class=\"hljs-attribute\">--secondary-Color</span>:               <span class=\"hljs-number\">#2c3e50</span>;\n  <span class=\"hljs-attribute\">--r-Grid-baseFontSize</span>:           <span class=\"hljs-number\">1rem</span>;\n}</code></pre>\n<p>À utiliser de cette façon :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.h1</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--primary-Color);\n}\n<span class=\"hljs-selector-class\">.h1</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--secondary-Color);\n}\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">var</span>(--r-Grid-baseFontSize);\n}</code></pre>\n<h3 id=\"media-queries-personnalisées\"><a href=\"#media-queries-personnalis%C3%A9es\" class=\"phenomic-HeadingAnchor\">#</a>Media Queries personnalisées</h3>\n<p>Pour créer des alias sémantiques, clairs et simples (<a href=\"http://dev.w3.org/csswg/mediaqueries/#custom-mq\">lisez la doc'</a>).</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">custom</span>-<span class=\"hljs-keyword\">media</span> --viewport-medium (width &#x3C;= <span class=\"hljs-number\">40rem</span>);\n@<span class=\"hljs-keyword\">custom</span>-<span class=\"hljs-keyword\">media</span> --viewport-large (max-width: <span class=\"hljs-number\">50em</span>);</code></pre>\n<p>Prenons par exemple :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-pseudo\">:root</span> {\n  <span class=\"hljs-attribute\">--fontSize</span>: <span class=\"hljs-number\">1.2rem</span>;\n}\n\n@<span class=\"hljs-keyword\">media</span> (--viewport-medium) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">calc</span>(var(--fontSize) * <span class=\"hljs-number\">1.2</span>); }\n}\n@<span class=\"hljs-keyword\">media</span> (--viewport-large) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">calc</span>(var(--fontSize) * <span class=\"hljs-number\">1.4</span>); }\n}</code></pre>\n<p>Le code généré sera alors :</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> (max-width: <span class=\"hljs-number\">40rem</span>) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.44rem</span>; }\n}\n@<span class=\"hljs-keyword\">media</span> (max-width: <span class=\"hljs-number\">50em</span>) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.68rem</span>; }\n}</code></pre>\n<h3 id=\"sélecteurs-personnalisés\"><a href=\"#s%C3%A9lecteurs-personnalis%C3%A9s\" class=\"phenomic-HeadingAnchor\">#</a>Sélecteurs personnalisés</h3>\n<p>Encore une fois, un petit tour sur les <a href=\"http://dev.w3.org/csswg/css-extensions/#custom-selectors\">specs</a> pour commencer. Disons qu'on veuille appliquer des styles à toutes les balises de titre.</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">custom</span>-<span class=\"hljs-keyword\">selector</span> :--heading h1, h2, h3, h4, h5, h6;\n\n<span class=\"hljs-selector-pseudo\">:--heading</span> {\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p>Ce qui va générer le code suivant :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">h1</span>,\n<span class=\"hljs-selector-tag\">h2</span>,\n<span class=\"hljs-selector-tag\">h3</span>,\n<span class=\"hljs-selector-tag\">h4</span>,\n<span class=\"hljs-selector-tag\">h5</span>,\n<span class=\"hljs-selector-tag\">h6</span> { margin-top; 0; }</code></pre>\n<h3 id=\"color\"><a href=\"#color\" class=\"phenomic-HeadingAnchor\">#</a><code>color()</code></h3>\n<p>Une simple <a href=\"http://dev.w3.org/csswg/css-color/#modifying-colors\">fonction color</a> qui sert à appliquer des <em>réglages couleur</em> (teinte, luminosité, entre autres) à une couleur de base.</p>\n<p>Exemples :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.class</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6);\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 red(+30) <span class=\"hljs-built_in\">green</span>(-50) <span class=\"hljs-built_in\">blue</span>(6%) <span class=\"hljs-built_in\">alpha</span>(.65));\n  <span class=\"hljs-attribute\">border-top-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 saturation(-8%) <span class=\"hljs-built_in\">whiteness</span>(+50%));\n  <span class=\"hljs-attribute\">border-right-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 lightness(5%) <span class=\"hljs-built_in\">blackness</span>(-25%));\n  <span class=\"hljs-attribute\">border-bottom-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 tint(80%));\n  <span class=\"hljs-attribute\">border-left-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 shade(75%));\n}</code></pre>\n<p>Le code ci-dessus sera transformé en...</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.class</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(43, 136, 230);\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(73, 86, 15, 0.65);\n  <span class=\"hljs-attribute\">border-top-color</span>: <span class=\"hljs-built_in\">rgb</span>(181, 201, 222);\n  <span class=\"hljs-attribute\">border-right-color</span>: <span class=\"hljs-built_in\">rgb</span>(3, 45, 87);\n  <span class=\"hljs-attribute\">border-bottom-color</span>: <span class=\"hljs-built_in\">rgb</span>(213, 231, 250);\n  <span class=\"hljs-attribute\">border-left-color</span>: <span class=\"hljs-built_in\">rgb</span>(11, 34, 58);\n}</code></pre>\n<p><strong>cssnext</strong> propose aussi les fonctionalités suivantes liées à la couleur.</p>\n<h4 id=\"hwb\"><a href=\"#hwb\" class=\"phenomic-HeadingAnchor\">#</a>hwb()</h4>\n<p>D'après les <a href=\"http://dev.w3.org/csswg/css-color/#the-hwb-notation\">spécifications</a>, HWB (Hue-Whiteness-Blackness) est similaire à la notation HSL mais plus facile à utiliser pour les humains.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.title</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">hwb</span>(125, 32%, 47%);\n}</code></pre>\n<p>Rendu :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.title</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgb</span>(33, 135, 42);\n}</code></pre>\n<h4 id=\"gray\"><a href=\"#gray\" class=\"phenomic-HeadingAnchor\">#</a>gray()</h4>\n<p>Les gris sont <a href=\"http://dev.w3.org/csswg/css-color/#grays\">tellement cool</a> qu'ils ont une fonction rien que pour eux.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">gray</span>(120, 50%);\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-built_in\">gray</span>(17%, 25%);\n}</code></pre>\n<p>Ce qui donnera :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(120, 120, 120, 0.5);\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-built_in\">rgba</span>(43, 43, 43, 0.25);\n}</code></pre>\n<h4 id=\"rrggbbaa\"><a href=\"#rrggbbaa\" class=\"phenomic-HeadingAnchor\">#</a>#rrggbbaa</h4>\n<p><strong>cssnext</strong> transforme les <a href=\"http://dev.w3.org/csswg/css-color/#hex-notation\">notations hexadécimales</a> #RRGGBBAA et #RGBA en rgba().</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#5c69</span>;\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#C73D5C59</span>;\n}</code></pre>\n<p>Résultat :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(85, 204, 102, 0.6);\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(199, 61, 92, 0.34902);\n}</code></pre>\n<h4 id=\"rebeccapurple\"><a href=\"#rebeccapurple\" class=\"phenomic-HeadingAnchor\">#</a>rebeccapurple</h4>\n<p>Transforme simplement la couleur <a href=\"https://github.com/postcss/postcss-color-rebeccapurple#why-this-plugin-\"><code>rebeccapurple</code></a> en <code>rgb(102, 51, 153)</code>.</p>\n<h3 id=\"rem-units\"><a href=\"#rem-units\" class=\"phenomic-HeadingAnchor\">#</a>rem units</h3>\n<p>Rien de bien extraordinaire ici, on génère un <strong><em>fallback</em> en pixels pour les unités en rem</strong>. Certaines personnes pourraient penser qu'un tel <em>fallback</em> est inutile de nos jours. Cependant, pour des projets bien spécifiques (compatibilité IE 7 et 8 requise), c'est encore une nécessité.\nNon mais vous n'avez quand même pas besoin d'un exemple pour ça ? Si ? Bon... d'accord. Allons-y !</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section-Highlight</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2.5rem</span>;\n}</code></pre>\n<p>Résultat :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section-Highlight</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">40px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2.5rem</span>;\n}</code></pre>\n<h2 id=\"note-importante-sur-les-fonctionnalités\"><a href=\"#note-importante-sur-les-fonctionnalit%C3%A9s\" class=\"phenomic-HeadingAnchor\">#</a>Note importante sur les fonctionnalités</h2>\n<p>Vous pouvez manuellement activer ou désactiver certaines fonctionnalités si vous n'en ressentez pas le besoin.\nCela étant dit, il vous est conseillé d'utiliser l'option <a href=\"http://cssnext.io/usage/#browsers\"><code>browsers</code></a>,\nqui permet de gérer automatiquement la liste des fonctionnalités à activer.\nPar exemple si vous spécifiez un environnement où IE 8 n'est pas supporté, l'option de transformation des <code>rem</code>\nen <code>px</code> ne sera pas activé. Tout comme Autoprefixer ne rajoutera pas les préfixes inutiles.</p>\n<h2 id=\"fonctionnalités-bonus\"><a href=\"#fonctionnalit%C3%A9s-bonus\" class=\"phenomic-HeadingAnchor\">#</a>Fonctionnalités bonus</h2>\n<p>Les deux fonctionnalités qui vont suivre ne sont pas vraiment en rapport avec les spécifications CSS. Cependant, elles méritent tout de même leur place dans cette brève présentation de l'outil.</p>\n<h3 id=\"import\"><a href=\"#import\" class=\"phenomic-HeadingAnchor\">#</a><code>import</code></h3>\n<p>Et si vous pouviez importer des fichiers locaux et des modules (<code>node_modules</code> ou <code>web_modules</code>) pour produire un seul et même fichier CSS les contenant tous ? Oui, <a href=\"https://github.com/sass/sass/issues/193\">c'est à vous que je m'adresse, les utilisateurs de Sass</a>, hum. Eh bien, avec <strong>cssnext</strong>, c'est possible.</p>\n<h3 id=\"compress\"><a href=\"#compress\" class=\"phenomic-HeadingAnchor\">#</a><code>compress</code></h3>\n<p>Comme vous l'avez sûrement deviné, c'est juste une option pour compresser <em>ou pas</em> votre fichier de sortie, et ceci grâce à <a href=\"https://github.com/ben-eb/cssnano\">cssnano</a>.</p>\n<h3 id=\"usage\"><a href=\"#usage\" class=\"phenomic-HeadingAnchor\">#</a>Usage</h3>\n<p>Voici un exemple simple de ces deux fonctionnalités. J'ai ici utilisé <a href=\"https://github.com/cssnext/gulp-cssnext\">gulp-cssnext</a>, un des <a href=\"http://cssnext.io/setup/\">nombreux plugins</a> qui vous aident à démarrer avec <strong>cssnext</strong>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp'</span>),\n    cssnext = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-cssnext\"</span>);\n\ngulp.task(<span class=\"hljs-string\">'styles'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp.src(<span class=\"hljs-string\">\"css/index.css\"</span>)\n  .pipe(cssnext({\n    <span class=\"hljs-attr\">compress</span>: <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">// default is false</span>\n  }))\n  .pipe(gulp.dest(<span class=\"hljs-string\">\"./dist/\"</span>))\n});</code></pre>\n<p>Ensuite, dans mon fichier <code>index.css</code>, j'ai ceci :</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"normalize.css\"</span>; <span class=\"hljs-comment\">/* == @import \"./node_modules/normalize.css/index.css\"; */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"cssrecipes-defaults\"</span>; <span class=\"hljs-comment\">/* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"project-modules/partner\"</span>; <span class=\"hljs-comment\">/* relatif à css/ */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"typo\"</span>; <span class=\"hljs-comment\">/* même niveau que mon index.css principal situé dans css/ */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"highlight\"</span> (min-width: <span class=\"hljs-number\">25em</span>);</code></pre>\n<p>Et le rendu final sera :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* contenu de ./node_modules/normalize.css/index.css */</span>\n<span class=\"hljs-comment\">/* contenu de ./node_modules/cssrecipes-defaults/index.css */</span>\n<span class=\"hljs-comment\">/* contenu de project-modules/partner.css */</span>\n<span class=\"hljs-comment\">/* contenu de typo.css */</span>\n@<span class=\"hljs-keyword\">media</span> (min-width: <span class=\"hljs-number\">25em</span>) {\n  <span class=\"hljs-comment\">/* contenu de highlight.css */</span>\n}</code></pre>\n<p>Je sais ce que vous ressentez. Ce n'est peut-être pas le coup de foudre au premier coup d'œil (enfin, pour certains comme moi si, mais bon, passons). Vous ne l'acceptez pas encore mais il va falloir vous rendre à l'évidence, un jour ou l'autre vous coderez comme ça. Mieux vaut vous y mettre tout de suite, non ? :)</p>\n<p>Bref, pour résumer, disons simplement que le but principal de <strong>cssnext</strong> est de pouvoir développer selon les spécifications du W3C en gardant bien à l'esprit que, théoriquement, il sera possible de le supprimer plus tard (quand il ne sera plus utile).</p>\n<p>En effet, dans un futur proche, les fonctionnalités qu'offre cet outil ne seront plus gérées par <strong>cssnext</strong> lui-même mais directement par les navigateurs. Laissons-les s'adapter, chacun à leur vitesse et préparons-nous. Voilà tout l'intérêt du code <em>future-proof</em>, comme le permet <a href=\"http://babeljs.io/\">babeljs</a> pour le JavaScript.</p>\n<p>En attendant, il y a encore du boulot : voici une <a href=\"https://github.com/cssnext/cssnext/issues?q=is%253Aopen+is%253Aissue+label%253A%22type%253A+feature+request%22\">liste des fonctionnalités à venir</a>.</p>\n<p>Maintenant, à vous de jouer. N'oubliez pas d'aller faire un tour sur le <a href=\"https://github.com/cssnext/cssnext\">repo GitHub</a>, n'hésitez pas à suivre <a href=\"https://twitter.com/cssnext\">@cssnext</a> sur Twitter pour être au courant des dernières news et rejoignez la <a href=\"https://gitter.im/cssnext/cssnext\">room cssnext sur Gitter</a> si vous avez des questions.</p>\n<ul>\n<li><a href=\"http://cssnext.io/\">Site officiel</a></li>\n</ul>\n","rawBody":"\nD'après le [site officiel](http://cssnext.io/):\n> **cssnext** est un transpileur CSS qui vous permet d'utiliser dès aujourd'hui la syntaxe CSS de demain. Il transforme les spécifications CSS qui ne sont pas encore mises en œuvre sur les navigateurs les plus populaires en CSS compatible.\n\n## Ça veut dire quoi exactement ?\n\nDepuis CSS3, vous avez savez sans doute que CSS est divisé en plusieurs documents indépendants appelés \"modules\". Ces modules peuvent avoir différents niveaux de stabilité et différents [statuts](http://www.w3.org/Style/CSS/current-work#legend). La mise en œuvre de ces modules par les navigateurs peut prendre un certain temps et encore plus pour que le W3C les approuve comme [Recommandation](http://www.w3.org/2005/10/Process-20051014/tr#RecsW3C).\n\nAvec **cssnext**, vous pouvez utiliser la syntaxe des [nouveaux modules CSS](http://www.xanthir.com/b4Ko0) tels que les _propriétés personnalisées (custom properties level 1)_ ou les _media queries personnalisées (custom media queries level 1)_. **cssnext** va transformer ces nouvelles et étranges syntaxes en du CSS compréhensible par les navigateurs que vous voulez supporter.\n\nEn clair, il vous donne un **avant-goût du futur**.\n\nJe ne sais pas vous mais étant quelqu'un qui aime expérimenter avec les dernières technologies de pointe, je trouve ça plutôt cool !\n\nJe vous conseille de jeter un oeil à la [liste des fonctionnalités](http://cssnext.io/features/).\n\n### Quid de mon préprocesseur actuel ?\n\nOubliez les risques liés à une abstraction trop élevée des CSS par les pré-processeurs actuels ; certes causés par une (sur-|mauvaise) utilisation de ces outils mais quand même.\n\nDevinez quoi, vous n'en avez pas forcément besoin.\n\nEssayez **cssnext** et retournez à ce bon ~~vieux~~ nouveau CSS. Et avec un zeste de [méthodologie BEM](/fr/articles/css/bem/), vous vous sentirez revivre.\n\n## Exemples\n\nVoyons voir quelles sont les fonctionnalités offertes par **cssnext** pour le moment.\n\nAvant toute chose, vous devriez aller faire un tour sur le [playground du site officiel](http://cssnext.io/playground/).\n\n### Préfixes propriétaires automatiques\n\n```css\n\n.h1 {\n  transform: skewX(25deg);\n  transition: transform 1s;\n}\n```\n\nCela va être transformé par **cssnext** via Autoprefixer en :\n\n```css\n.h1 {\n  -webkit-transform: skewX(25deg);\n      -ms-transform: skewX(25deg);\n          transform: skewX(25deg);\n  -webkit-transition: -webkit-transform 1s;\n          transition: transform 1s;\n}\n```\n### Propriétés personnalisées et var() limité à `:root`\n\nAussi connues sous le nom des très attendues [variables CSS](http://www.w3.org/TR/css-variables/).\n\n```css\n:root {\n  --primary-Color:                 #E86100;\n  --secondary-Color:               #2c3e50;\n  --r-Grid-baseFontSize:           1rem;\n}\n```\nÀ utiliser de cette façon :\n\n```css\n.h1 {\n  color: var(--primary-Color);\n}\n.h1:hover {\n  color: var(--secondary-Color);\n}\nbody {\n  font-size: var(--r-Grid-baseFontSize);\n}\n```\n\n### Media Queries personnalisées\n\nPour créer des alias sémantiques, clairs et simples ([lisez la doc'](http://dev.w3.org/csswg/mediaqueries/#custom-mq)).\n\n```css\n@custom-media --viewport-medium (width <= 40rem);\n@custom-media --viewport-large (max-width: 50em);\n```\n\nPrenons par exemple :\n\n```css\n:root {\n  --fontSize: 1.2rem;\n}\n\n@media (--viewport-medium) {\n  body { font-size: calc(var(--fontSize) * 1.2); }\n}\n@media (--viewport-large) {\n  body { font-size: calc(var(--fontSize) * 1.4); }\n}\n```\n\nLe code généré sera alors :\n\n```css\n@media (max-width: 40rem) {\n  body { font-size: 1.44rem; }\n}\n@media (max-width: 50em) {\n  body { font-size: 1.68rem; }\n}\n```\n\n### Sélecteurs personnalisés\n\nEncore une fois, un petit tour sur les [specs](http://dev.w3.org/csswg/css-extensions/#custom-selectors) pour commencer. Disons qu'on veuille appliquer des styles à toutes les balises de titre.\n\n```css\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n\n:--heading {\n  margin-top: 0;\n}\n```\nCe qui va générer le code suivant :\n\n```css\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 { margin-top; 0; }\n```\n\n### `color()`\n\nUne simple [fonction color](http://dev.w3.org/csswg/css-color/#modifying-colors) qui sert à appliquer des _réglages couleur_ (teinte, luminosité, entre autres) à une couleur de base.\n\nExemples :\n\n```css\n.class {\n  background-color: color(#2B88E6);\n  color: color(#2B88E6 red(+30) green(-50) blue(6%) alpha(.65));\n  border-top-color: color(#2B88E6 saturation(-8%) whiteness(+50%));\n  border-right-color: color(#2B88E6 lightness(5%) blackness(-25%));\n  border-bottom-color: color(#2B88E6 tint(80%));\n  border-left-color: color(#2B88E6 shade(75%));\n}\n```\nLe code ci-dessus sera transformé en...\n\n```css\n.class {\n  background-color: rgb(43, 136, 230);\n  color: rgba(73, 86, 15, 0.65);\n  border-top-color: rgb(181, 201, 222);\n  border-right-color: rgb(3, 45, 87);\n  border-bottom-color: rgb(213, 231, 250);\n  border-left-color: rgb(11, 34, 58);\n}\n```\n\n**cssnext** propose aussi les fonctionalités suivantes liées à la couleur.\n\n#### hwb()\n\nD'après les [spécifications](http://dev.w3.org/csswg/css-color/#the-hwb-notation), HWB (Hue-Whiteness-Blackness) est similaire à la notation HSL mais plus facile à utiliser pour les humains.\n\n```css\n.title {\n  color: hwb(125, 32%, 47%);\n}\n```\n\nRendu :\n\n```css\n.title {\n  color: rgb(33, 135, 42);\n}\n```\n\n#### gray()\n\nLes gris sont [tellement cool](http://dev.w3.org/csswg/css-color/#grays) qu'ils ont une fonction rien que pour eux.\n\n```css\n.section {\n  background-color: gray(120, 50%);\n  border-color: gray(17%, 25%);\n}\n```\n\nCe qui donnera :\n\n```css\n.section {\n  background-color: rgba(120, 120, 120, 0.5);\n  border-color: rgba(43, 43, 43, 0.25);\n}\n```\n\n#### #rrggbbaa\n\n**cssnext** transforme les [notations hexadécimales](http://dev.w3.org/csswg/css-color/#hex-notation) #RRGGBBAA et #RGBA en rgba().\n\n```css\nbody {\n  color: #5c69;\n  background-color: #C73D5C59;\n}\n```\n\nRésultat :\n\n```css\nbody {\n  color: rgba(85, 204, 102, 0.6);\n  background-color: rgba(199, 61, 92, 0.34902);\n}\n```\n\n#### rebeccapurple\n\nTransforme simplement la couleur [`rebeccapurple`](https://github.com/postcss/postcss-color-rebeccapurple#why-this-plugin-) en `rgb(102, 51, 153)`.\n\n### rem units\n\nRien de bien extraordinaire ici, on génère un **_fallback_ en pixels pour les unités en rem**. Certaines personnes pourraient penser qu'un tel _fallback_ est inutile de nos jours. Cependant, pour des projets bien spécifiques (compatibilité IE 7 et 8 requise), c'est encore une nécessité.\nNon mais vous n'avez quand même pas besoin d'un exemple pour ça ? Si ? Bon... d'accord. Allons-y !\n\n```css\n.section-Highlight {\n  font-size: 2.5rem;\n}\n```\nRésultat :\n\n```css\n.section-Highlight {\n  font-size: 40px;\n  font-size: 2.5rem;\n}\n```\n\n## Note importante sur les fonctionnalités\n\nVous pouvez manuellement activer ou désactiver certaines fonctionnalités si vous n'en ressentez pas le besoin.\nCela étant dit, il vous est conseillé d'utiliser l'option [`browsers`](http://cssnext.io/usage/#browsers),\nqui permet de gérer automatiquement la liste des fonctionnalités à activer.\nPar exemple si vous spécifiez un environnement où IE 8 n'est pas supporté, l'option de transformation des `rem`\nen `px` ne sera pas activé. Tout comme Autoprefixer ne rajoutera pas les préfixes inutiles.\n\n## Fonctionnalités bonus\n\nLes deux fonctionnalités qui vont suivre ne sont pas vraiment en rapport avec les spécifications CSS. Cependant, elles méritent tout de même leur place dans cette brève présentation de l'outil.\n\n### `import`\n\nEt si vous pouviez importer des fichiers locaux et des modules (`node_modules` ou `web_modules`) pour produire un seul et même fichier CSS les contenant tous ? Oui, [c'est à vous que je m'adresse, les utilisateurs de Sass](https://github.com/sass/sass/issues/193), hum. Eh bien, avec **cssnext**, c'est possible.\n\n### `compress`\n\nComme vous l'avez sûrement deviné, c'est juste une option pour compresser _ou pas_ votre fichier de sortie, et ceci grâce à [cssnano](https://github.com/ben-eb/cssnano).\n\n### Usage\n\nVoici un exemple simple de ces deux fonctionnalités. J'ai ici utilisé [gulp-cssnext](https://github.com/cssnext/gulp-cssnext), un des [nombreux plugins](http://cssnext.io/setup/) qui vous aident à démarrer avec **cssnext**.\n\n```js\nvar gulp = require('gulp'),\n    cssnext = require(\"gulp-cssnext\");\n\ngulp.task('styles', function() {\n  gulp.src(\"css/index.css\")\n  .pipe(cssnext({\n    compress: true,  // default is false\n  }))\n  .pipe(gulp.dest(\"./dist/\"))\n});\n\n```\n\nEnsuite, dans mon fichier `index.css`, j'ai ceci :\n\n```css\n\n@import \"normalize.css\"; /* == @import \"./node_modules/normalize.css/index.css\"; */\n@import \"cssrecipes-defaults\"; /* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */\n@import \"project-modules/partner\"; /* relatif à css/ */\n@import \"typo\"; /* même niveau que mon index.css principal situé dans css/ */\n@import \"highlight\" (min-width: 25em);\n\n```\n\nEt le rendu final sera :\n\n```css\n\n/* contenu de ./node_modules/normalize.css/index.css */\n/* contenu de ./node_modules/cssrecipes-defaults/index.css */\n/* contenu de project-modules/partner.css */\n/* contenu de typo.css */\n@media (min-width: 25em) {\n  /* contenu de highlight.css */\n}\n```\n\nJe sais ce que vous ressentez. Ce n'est peut-être pas le coup de foudre au premier coup d'œil (enfin, pour certains comme moi si, mais bon, passons). Vous ne l'acceptez pas encore mais il va falloir vous rendre à l'évidence, un jour ou l'autre vous coderez comme ça. Mieux vaut vous y mettre tout de suite, non ? :)\n\nBref, pour résumer, disons simplement que le but principal de **cssnext** est de pouvoir développer selon les spécifications du W3C en gardant bien à l'esprit que, théoriquement, il sera possible de le supprimer plus tard (quand il ne sera plus utile).\n\nEn effet, dans un futur proche, les fonctionnalités qu'offre cet outil ne seront plus gérées par **cssnext** lui-même mais directement par les navigateurs. Laissons-les s'adapter, chacun à leur vitesse et préparons-nous. Voilà tout l'intérêt du code _future-proof_, comme le permet [babeljs](http://babeljs.io/) pour le JavaScript.\n\nEn attendant, il y a encore du boulot : voici une [liste des fonctionnalités à venir](https://github.com/cssnext/cssnext/issues?q=is%3Aopen+is%3Aissue+label%3A%22type%3A+feature+request%22).\n\nMaintenant, à vous de jouer. N'oubliez pas d'aller faire un tour sur le [repo GitHub](https://github.com/cssnext/cssnext), n'hésitez pas à suivre [@cssnext](https://twitter.com/cssnext) sur Twitter pour être au courant des dernières news et rejoignez la [room cssnext sur Gitter](https://gitter.im/cssnext/cssnext) si vous avez des questions.\n\n* [Site officiel](http://cssnext.io/)\n","__filename":"fr/articles/css/preprocesseurs/cssnext/index.md","__url":"/fr/articles/css/preprocesseurs/cssnext/","__resourceUrl":"/fr/articles/css/preprocesseurs/cssnext/index.html","__dataUrl":"/fr/articles/css/preprocesseurs/cssnext/index.html.19d0809ea609cd61c8c80953fd650c3d.json"}