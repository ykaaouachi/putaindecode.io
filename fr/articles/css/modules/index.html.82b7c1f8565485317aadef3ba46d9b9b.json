{"head":{"layout":"Post","comments":true,"date":"2016-02-23","title":"Vers les CSS modules","tags":["css","css modules"],"authors":["thibthib"],"description":"Je crois que même avant que je sache exactement ce qu'était le CSS, j'avais déjà entendu quelqu'un me dire \"Je HAIS le CSS\". Cette phrase…"},"body":"<blockquote>\n<p>Je crois que même avant que je sache exactement ce qu'était le CSS, j'avais\ndéjà entendu quelqu'un me dire \"Je HAIS le CSS\". Cette phrase était souvent dite\npar un de mes amis du back-end, et souvent pour de très bonnes raisons. Cet\narticle n'essaiera pas de défendre ni de vous faire aimer le CSS, mais comme les\noutils de développement front-end évoluent rapidement, je trouve intéressant\nd'expliquer les nouvelles façons d'écrire le CSS.</p>\n</blockquote>\n<h2 id=\"retour-aux-bases\"><a href=\"#retour-aux-bases\" class=\"phenomic-HeadingAnchor\">#</a>Retour aux bases</h2>\n<p>D'abord, pour comprendre quel sont les problèmes que les nouveaux outils tentent\nde résoudre, un petit rappel sur ce qu'est le CSS : <em>Cascading Style Sheets</em> ou\n<em>Feuilles de style en cascade</em>.</p>\n<p>Une feuille de style ? C'est facile ! C'est un bout de code qui lie des \"styles\"\nà du HTML.\nEn cascade ? Et bien, quelques fois un élément HTML peut correspondre à\nplusieurs styles, et \"en cascade\" est le groupe de règles qui permet de\ndéterminer lequel appliquer.</p>\n<p>Voici du code CSS basique : nous voulons que nos titres h1 soient rouges.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n}</code></pre>\n<p>Ici, nous lions la <strong><em>règle (ou déclaration)</em></strong> <code>color: red</code> au <strong><em>sélecteur</em></strong>\n\"h1\". Un sélecteur peut contenir plusieurs règles dans son bloc de déclarations.</p>\n<blockquote>\n<p>Et les dernières lueurs de bonheur s'éteignent alors que nous entrons dans\nl'enfer de la cascade</p>\n</blockquote>\n<h2 id=\"le-truc-qui-cascade\"><a href=\"#le-truc-qui-cascade\" class=\"phenomic-HeadingAnchor\">#</a>Le truc qui cascade</h2>\n<p>La cascade est pour moi un désastre qui rend le CSS très compliqué à maintenir\nsi on ne suit pas de lignes directrices ou on n'utilise pas d'outils pour\nl'écrire. Je vais vous montrer quelques exemples simples pour vous expliquer les\nprincipaux concepts de la cascade, mais gardez en tête que la plupart des\napplications web contiennent de nos jours beaucoup de code, aggravant les effets\nde la cascade.</p>\n<p>La nécessité d'avoir un système comme la cascade vient du fait que le CSS permet\nà plusieurs règles de style de s'appliquer à un même élément, ces dernières\npouvant même venir de plusieurs origines (du site, mais aussi du navigateur ou\nencore même de l'utilisateur). Il faut donc pouvoir définir dans ce cas-là\nquelle est la règle qui au final sera appliquée. Pour cela, la cascade donne à\nchacune un poids, calculé selon un certain nombre de critères, et applique la\nrègle la plus lourde. Cela peut paraitre simple au premier abord, mais les\ncritères de calcul de poids ne le sont pas du tout.</p>\n<p>Les règles qui sont les plus légères dans la cascade ne sont pas vraiment un\nproblème, mais il faut les connaitre afin de s'éviter des surprises :</p>\n<h3 id=\"les-valeurs-par-défaut-du-navigateur\"><a href=\"#les-valeurs-par-d%C3%A9faut-du-navigateur\" class=\"phenomic-HeadingAnchor\">#</a>Les valeurs par défaut du navigateur</h3>\n<p>Voici le haut de la cascade. Ce sont les règles qui font qu'un titre h1 est gros\nmême si on ne l'a pas spécifié.</p>\n<h3 id=\"lhéritage-des-parents\"><a href=\"#lh%C3%A9ritage-des-parents\" class=\"phenomic-HeadingAnchor\">#</a>L'héritage des parents</h3>\n<p>Ensuite, les règles sont héritées depuis les éléments HTML parents. Si on\nreprend notre élément h1, si une règle <code>color: blue</code> est définie sur l'élément\n<code>body</code>, le titre va en hériter, et sera donc bleu.</p>\n<p>Ceci étant dit, on entre maintenant dans un niveau plus douloureux de la\ncascade.</p>\n<h3 id=\"lordre-des-règles\"><a href=\"#lordre-des-r%C3%A8gles\" class=\"phenomic-HeadingAnchor\">#</a>L'ordre des règles</h3>\n<p>La position d'une règle par rapport aux autres va influer sur son poids.\nDeux règles auraient pu avoir le même poids si elles étaient à la même position\nmais, au final, c'est la dernière qui sera la plus lourde et sera donc\nappliquée.\n<strong><em>La dernière.</em></strong>\nQuand il s'agit de code assez simple, cela peut être facilement\ncompréhensible :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n  <span class=\"hljs-attribute\">color</span>: blue;\n}</code></pre>\n<p>Facile, n'est-ce pas ? Le titre sera bleu ! Mais s'il y a une règle <code>color: red</code> dans un fichier CSS nommé <em>foo.css</em>, et une règle <code>color: blue</code> dans un\nautre fichier nommé <em>bar.css</em>, que le fichier <em>foo.css</em> met plus de temps que le\nfichier <em>bar.css</em> à charger, mais que le tag HTML référençant <em>foo.css</em> est\navant celui de <em>bar.css</em>, quelle règle est appliquée ? Eh bien, c'est plus\ncompliqué à savoir. <em>(indice : le temps de chargement n'est pas pris en compte)</em></p>\n<h3 id=\"la-spécificité-des-sélecteurs\"><a href=\"#la-sp%C3%A9cificit%C3%A9-des-s%C3%A9lecteurs\" class=\"phenomic-HeadingAnchor\">#</a>La spécificité des sélecteurs</h3>\n<p>Ce critère est un niveau de complexité au-dessus des autres, <a href=\"https://specificity.keegan.st\">si bien que des\npersonnes en ont fait des calculettes pour le\nsimplifier</a>. Je ne vais pas rentrer dans les\ndétails, mais il faut savoir que le poids d'un sélecteur est égal à la somme des\npoids de tous les sélecteurs le composant.\nEt que tous les sélecteurs n'ont pas le même poids.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.title</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n}\n\n<span class=\"hljs-selector-tag\">body</span> <span class=\"hljs-selector-tag\">header</span> <span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: blue;\n}</code></pre>\n<p>Ici, le premier sélecteur pèse 10 parce qu'il contient un sélecteur de classe\nCSS, qui pèse lui-même 10. Le deuxième sélecteur quant à lui pèse 3, parce qu'il\ncontient trois sélecteurs de tag, pesant chacun 1. Et donc, comme 10 > 3, le\ntitre h1 sera rouge !</p>\n<h3 id=\"les-styles-inline\"><a href=\"#les-styles-inline\" class=\"phenomic-HeadingAnchor\">#</a>Les styles inline</h3>\n<p>Les règles qui sont dans l'attribut “style” d'un élément HTML sont plus lourdes\nque n'importe quel sélecteur défini précédemment. Et donc voici un titre bleu :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n}</code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: blue;\"</span>></span>Title<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></code></pre>\n<h3 id=\"importance\"><a href=\"#importance\" class=\"phenomic-HeadingAnchor\">#</a>Importance</h3>\n<p>Et enfin le dernier critère, le God Mode, le broyeur de styles, le mot-clé\n<strong><em>!important.</em></strong> Quand on veut VRAIMENT que le titre soit rouge :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: red <span class=\"hljs-meta\">!important</span>;\n}</code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: blue;\"</span>></span>Title<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></code></pre>\n<p>Et comme toute la cascade est à propos de poids, si deux règles sont marquées\ncomme !important, le reste des critères est toujours pris en compte pour\ncalculer laquelle est la plus lourde, et donc appliquée.</p>\n<p><strong>…Et on ne peut pas faire plus compliqué que ça.</strong> Maintenant, imaginez des\nmilliers et des milliers de sélecteurs et règles cascadant les uns sur les\nautres pour définir le style d'un site, et vous comprendrez l'enfer que peut\nêtre le CSS. Ainsi, des développeurs CSS ont imaginé différentes méthodologies\net outils pour éviter ce cauchemar !</p>\n<h2 id=\"lévolution-des-outils\"><a href=\"#l%C3%A9volution-des-outils\" class=\"phenomic-HeadingAnchor\">#</a>L'évolution des outils</h2>\n<p>Maintenant, je vais vous présenter comment ma façon d'écrire du CSS a évolué au\nfil du temps. Ne vous attendez pas à une chronologie complète de tous les\noutils inventés depuis la création du CSS en 1996 (j'avais 6 ans !) mais plutôt\nune explication de comment je me suis débrouillé avec la cascade dans ma courte\nexpérience personnelle.</p>\n<h3 id=\"pré-processeurs\"><a href=\"#pr%C3%A9-processeurs\" class=\"phenomic-HeadingAnchor\">#</a>Pré-processeurs</h3>\n<p>J'ai commencé à developper des applications web en 2012, en plein âge d'or <a href=\"/fr/articles/css/preprocesseurs/\">des\npré-processeurs</a>. Ils\nétaient apparus quelques années auparavant, comme le CSS lui-même n'était pas\nsuffisamment adapté pour construire des sites complexes. Les pré-processeurs\nsont des compilateurs qui génèrent du code CSS à partir de languages légèrement\ndifférents, comme <a href=\"http://sass-lang.com\">Sass</a> ou <a href=\"http://lesscss.org\">LESS</a>.\nCes nouveaux languages permettent de créer des variables par exemple, ou\nd'imbriquer des sélecteurs, entre autres merveilleuses nouvelles\nfonctionnalités.</p>\n<p>On peut transformer ce vieux code CSS compliqué à maintenir :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#E5E5E5</span>;\n}\n\n<span class=\"hljs-selector-tag\">body</span> <span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333333</span>;\n}</code></pre>\n<p>en cette bien <em>meilleure</em> version :</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-variable\">$textColor</span>: <span class=\"hljs-number\">#333333</span>;\n\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background</span>: lighten(<span class=\"hljs-variable\">$textColor</span>, <span class=\"hljs-number\">90%</span>);\n\n  <span class=\"hljs-selector-tag\">h1</span> {\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-variable\">$textColor</span>\n  }\n}</code></pre>\n<p>Avec ces nouveaux outils, et pour éviter aux règles d'entrer en collision dans\nla cascade, nous avons commencé à imbriquer nos sélecteurs et à répliquer toute\nnotre structure HTML dans le code de notre pré-processeur favori. Notre CSS se\nretrouva donc avec des sélecteurs très long et lourds qui étaient associés\nuniquement avec un element HTML précis, comme ce dernier :</p>\n<blockquote>\n<p>.searchPage .sideBar .refinements.default .category .star input</p>\n</blockquote>\n<p>Et ça a plutôt bien marché au début ! Mais ces sélecteurs n'étaient pas les plus\nperformants, et la structure du HTML étant répliquée, n'importe quel changement\ndans cette dernière doit être répercuté dans les styles. Donc je suis passé à\nautre chose.</p>\n<h3 id=\"méthodologies-css\"><a href=\"#m%C3%A9thodologies-css\" class=\"phenomic-HeadingAnchor\">#</a>Méthodologies CSS</h3>\n<p>À ce moment, quelques nouvelles guidelines CSS ont commencé a attirer mon\nattention. On pouvait les utiliser avec les pré-processeurs, et avaient pour but\nd'éviter les collisions dans la cascade (tout comme l'imbrication des\nsélecteurs) avec un certain nombre de règles, comme sur le nommage des\nsélecteurs.</p>\n<p>Ces méthodologies sont arrivées au moment ou je commençais à découper mes\ndéveloppements en composants. L'imbrication des sélecteurs ne marchait pas très\nbien avec ces derniers, vu que le but est de créer des bouts de code\nréutilisables partout dans la web app, comme un bouton par exemple. La\nméthodologie que j'utilise (toujours aujourd'hui) est appelée <a href=\"/fr/articles/css/bem/\">BEM, pour Block\nElement Modifier</a>, mais il y en a\nd'autres avec le même but : chaque élément HTML de mes composants doit avoir une\nclasse CSS qui lui est unique. De cette façon, pas besoin d'imbrication, et pas\nde collision de la cascade !</p>\n<p>Et ce code de pré-processeur :</p>\n<pre><code class=\"hljs language-scss\"><span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-variable\">$textColor</span>\n\n  img {\n    border: <span class=\"hljs-number\">1px</span> solid black;\n  }\n}</code></pre>\n<p>se transforme en :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.Title</span> {\n  <span class=\"hljs-attribute\">color</span>: $textColor\n}\n\n<span class=\"hljs-selector-class\">.Title-icon</span> {\n  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid black;\n}</code></pre>\n<p>Évidement, le code HTML doit être mis à jour avec les nouvelles classes, mais\nles sélecteurs sont maintenant courts et compréhensibles. Et ceci, sans aucune\nchance de collision de cascade.</p>\n<p>Maintenant, pour pouvoir mieux expliquer un dernier outil, celui qui je pense va\nrésoudre tous nos problèmes, il faut que je vous montre une autre approche pour\ncontourner les problèmes de la cascade :</p>\n<h3 id=\"frameworks-css\"><a href=\"#frameworks-css\" class=\"phenomic-HeadingAnchor\">#</a>Frameworks CSS</h3>\n<p>Ici, pour éviter à nos règles CSS d'entrer en collision, nous… n'en écrivons\nplus !\nLes frameworks CSS sont des styles déjà écrits qu'on peut utiliser avec des\nclasses CSS spécifiques. Il y a deux approches ici :</p>\n<ul>\n<li>\n<p>Les frameworks de styles \"finaux\" comme <a href=\"http://getbootstrap.com\">Bootstrap</a>.\nIl suffit d'ajouter la classe <code>btn</code> sur un élément HTML et… tada ! C'est\nmaintenant un magnifique bouton. Certaines variables sont modifiables pour\ntransformer le look global du framework.</p>\n</li>\n<li>\n<p>Les frameworks de styles \"utilitaires\" comme <a href=\"http://tachyons.io\">Tachyons</a>.\nIci, il n'y a pas de styles pré-définis, mais plein de classes utilitaires\nsont disponibles, comme <code>pam</code> pour donner un <em>medium padding</em> à un élément,\nou encore <code>ba</code> pour lui donner une <em>border all</em> tout autour.</p>\n</li>\n</ul>\n<p>Les frameworks utilitaires sont assez intéressants, du fait que le fichier CSS\nfinal fera autour de 10kB et jamais plus, même si le site grandit ! Mais il y\naura beaucoup de classes peu compréhensibles dans le code HTML. C'est comparable\naux styles inline, avec une optimization de poids final, comme <code>ba</code> est plus\ncourt que <em>“border-style: solid; border-width: 1px;”</em></p>\n<p>Ces frameworks nous évitent tout tracas avec la cascade ! Mais je n'aimais pas\nle fait d'utiliser un framework, ainsi qu'avoir beaucoup de classes non\ncompréhensibles dans mon code HTML. Cependant, la totale réutilisabilité et\nmodularité des styles, sans problèmes de cascade, sont impressionnants.</p>\n<p>Cela nous amène donc à cet outil génial, forgé directement avec la meilleure\nmagie JavaScript :</p>\n<h3 id=\"css-modules\"><a href=\"#css-modules\" class=\"phenomic-HeadingAnchor\">#</a>CSS Modules</h3>\n<p>Ce concept a d'abord pris forme suite à une simple observation : de nos jours,\nle CSS est compilé à partir d'autres languages pour permettre une écriture plus\nfacile, et pour cette même raison le HTML est aussi généré grâce à des outils de\ntemplating en JavaScript. Mais les sélecteurs CSS, le lien entre les éléments et\nles styles, ceux-la même auxquels le codeur doit faire très attention pour\néviter qu'ils n'entrent en collision, n'ont pas d'outils du tout.</p>\n<p>Et <a href=\"https://github.com/css-modules/css-modules\">CSS Modules</a> fut créé. La\npremière fonctionnalité intéressante est la génération automatique des noms de\nclasses CSS. Plus d'inquiétude sur leur unicité, on peut les nommer comme on\nveut, au final ceux générés dans le HTML seront uniques. Promis. Cela nous\npermet de réécrire ce code CSS en BEM, et HTML :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.Title</span> {\n  <span class=\"hljs-attribute\">color</span>: $textColor;\n}</code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"Title\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></code></pre>\n<p>en ce code CSS et template JavaScript :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.styleName</span> {\n  <span class=\"hljs-attribute\">color</span>: $textColor\n}</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./style.css'</span>;\n<span class=\"hljs-string\">`&#x3C;h1 class=<span class=\"hljs-subst\">${styles.styleName}</span>>&#x3C;/h1>`</span></code></pre>\n<p>Une fois compilé, ce code générera quelque chose comme ça :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.styleName__abc5436</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333333</span>;\n}</code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"styleName__abc5436\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></code></pre>\n<p>Une casc-quoi ? Je ne sais pas ce que c'est ! ❤️</p>\n<p>La deuxième fonctionnalité géniale, directement inspirée par les frameworks CSS\nmodulaires comme Tachyons, est la composition des styles. De la même façon qu'en\najoutant plusieurs classes utilitaires sur son élément HTML, CSS Modules nous\npermet de composer nos classes à partir de styles communs. Laissez-moi vous\nmontrer :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.titleColor</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333333</span>;\n}\n\n<span class=\"hljs-selector-class\">.bigTitle</span> {\n  <span class=\"hljs-attribute\">composes</span>: titleColor;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">24px</span>;\n}\n\n<span class=\"hljs-selector-class\">.mediumTitle</span> {\n  <span class=\"hljs-attribute\">composes</span>: titleColor;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n}</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./style.css'</span>;\n<span class=\"hljs-string\">`&#x3C;h1 class=<span class=\"hljs-subst\">${styles.bigTitle}</span>>&#x3C;/h1>\n &#x3C;h2 class=<span class=\"hljs-subst\">${styles.mediumTitle}</span>>&#x3C;/h2>`</span></code></pre>\n<p>va générer :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.titleColor__abc5436</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#333333</span>;\n}\n\n<span class=\"hljs-selector-class\">.bigTitle__def6547</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">24px</span>;\n}\n\n<span class=\"hljs-selector-class\">.mediumTitle__1638bcd</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n}</code></pre>\n<pre><code class=\"hljs language-js\">&#x3C;h1 <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"titleColor__abc5436 bigTitle__def6547\"</span>><span class=\"xml\"><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></span>\n&#x3C;h2 <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"titleColor__abc5436 mediumTitle__1638bcd\"</span>><span class=\"xml\"><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h2</span>></span></span></code></pre>\n<p>Et ceci, messieurs-dames, est plutôt fantastique. Les styles sont modularisables\net composables, et ce sans classes incompréhensibles mais directement dans les\nfeuilles de style. Et les collisions de sélecteurs et règles ne sont plus qu'un\nmauvais souvenir.</p>\n<p>Et c'est ainsi que j'ai expérimenté avec le CSS et sa cascade jusque-là.\nJ'espère que les mois et les années à venir vont me surprendre avec de meilleurs\noutils et / ou méthodologies, et je serais heureux de les apprendre et les\nessayer 👍</p>\n","rawBody":"\n> Je crois que même avant que je sache exactement ce qu'était le CSS, j'avais\ndéjà entendu quelqu'un me dire \"Je HAIS le CSS\". Cette phrase était souvent dite\npar un de mes amis du back-end, et souvent pour de très bonnes raisons. Cet\narticle n'essaiera pas de défendre ni de vous faire aimer le CSS, mais comme les\noutils de développement front-end évoluent rapidement, je trouve intéressant\nd'expliquer les nouvelles façons d'écrire le CSS.\n\n\n## Retour aux bases\n\nD'abord, pour comprendre quel sont les problèmes que les nouveaux outils tentent\nde résoudre, un petit rappel sur ce qu'est le CSS : *Cascading Style Sheets* ou\n*Feuilles de style en cascade*.\n\nUne feuille de style ? C'est facile ! C'est un bout de code qui lie des \"styles\"\nà du HTML.\nEn cascade ? Et bien, quelques fois un élément HTML peut correspondre à\nplusieurs styles, et \"en cascade\" est le groupe de règles qui permet de\ndéterminer lequel appliquer.\n\nVoici du code CSS basique : nous voulons que nos titres h1 soient rouges.\n\n```css\nh1 {\n  color: red;\n}\n```\n\nIci, nous lions la ***règle (ou déclaration)*** `color: red` au ***sélecteur***\n\"h1\". Un sélecteur peut contenir plusieurs règles dans son bloc de déclarations.\n\n> Et les dernières lueurs de bonheur s'éteignent alors que nous entrons dans\n> l'enfer de la cascade\n\n## Le truc qui cascade\n\nLa cascade est pour moi un désastre qui rend le CSS très compliqué à maintenir\nsi on ne suit pas de lignes directrices ou on n'utilise pas d'outils pour\nl'écrire. Je vais vous montrer quelques exemples simples pour vous expliquer les\nprincipaux concepts de la cascade, mais gardez en tête que la plupart des\napplications web contiennent de nos jours beaucoup de code, aggravant les effets\nde la cascade.\n\nLa nécessité d'avoir un système comme la cascade vient du fait que le CSS permet\nà plusieurs règles de style de s'appliquer à un même élément, ces dernières\npouvant même venir de plusieurs origines (du site, mais aussi du navigateur ou\nencore même de l'utilisateur). Il faut donc pouvoir définir dans ce cas-là\nquelle est la règle qui au final sera appliquée. Pour cela, la cascade donne à\nchacune un poids, calculé selon un certain nombre de critères, et applique la\nrègle la plus lourde. Cela peut paraitre simple au premier abord, mais les\ncritères de calcul de poids ne le sont pas du tout.\n\nLes règles qui sont les plus légères dans la cascade ne sont pas vraiment un\nproblème, mais il faut les connaitre afin de s'éviter des surprises :\n\n### Les valeurs par défaut du navigateur\n\nVoici le haut de la cascade. Ce sont les règles qui font qu'un titre h1 est gros\nmême si on ne l'a pas spécifié.\n\n### L'héritage des parents\n\nEnsuite, les règles sont héritées depuis les éléments HTML parents. Si on\nreprend notre élément h1, si une règle `color: blue` est définie sur l'élément\n`body`, le titre va en hériter, et sera donc bleu.\n\nCeci étant dit, on entre maintenant dans un niveau plus douloureux de la\ncascade.\n\n### L'ordre des règles\n\nLa position d'une règle par rapport aux autres va influer sur son poids.\nDeux règles auraient pu avoir le même poids si elles étaient à la même position\nmais, au final, c'est la dernière qui sera la plus lourde et sera donc\nappliquée.\n***La dernière.***\nQuand il s'agit de code assez simple, cela peut être facilement\ncompréhensible :\n\n```css\nh1 {\n  color: red;\n  color: blue;\n}\n```\n\nFacile, n'est-ce pas ? Le titre sera bleu ! Mais s'il y a une règle `color:\nred` dans un fichier CSS nommé *foo.css*, et une règle `color: blue` dans un\nautre fichier nommé *bar.css*, que le fichier *foo.css* met plus de temps que le\nfichier *bar.css* à charger, mais que le tag HTML référençant *foo.css* est\navant celui de *bar.css*, quelle règle est appliquée ? Eh bien, c'est plus\ncompliqué à savoir. *(indice : le temps de chargement n'est pas pris en compte)*\n\n### La spécificité des sélecteurs\n\nCe critère est un niveau de complexité au-dessus des autres, [si bien que des\npersonnes en ont fait des calculettes pour le\nsimplifier](https://specificity.keegan.st). Je ne vais pas rentrer dans les\ndétails, mais il faut savoir que le poids d'un sélecteur est égal à la somme des\npoids de tous les sélecteurs le composant.\nEt que tous les sélecteurs n'ont pas le même poids.\n\n\n```css\n.title {\n  color: red;\n}\n\nbody header h1 {\n  color: blue;\n}\n```\n\nIci, le premier sélecteur pèse 10 parce qu'il contient un sélecteur de classe\nCSS, qui pèse lui-même 10. Le deuxième sélecteur quant à lui pèse 3, parce qu'il\ncontient trois sélecteurs de tag, pesant chacun 1. Et donc, comme 10 > 3, le\ntitre h1 sera rouge !\n\n### Les styles inline\n\nLes règles qui sont dans l'attribut “style” d'un élément HTML sont plus lourdes\nque n'importe quel sélecteur défini précédemment. Et donc voici un titre bleu :\n\n```css\nh1 {\n  color: red;\n}\n```\n```html\n<h1 style=\"color: blue;\">Title</h1>\n```\n\n### Importance\n\nEt enfin le dernier critère, le God Mode, le broyeur de styles, le mot-clé\n***!important.*** Quand on veut VRAIMENT que le titre soit rouge :\n\n```css\nh1 {\n  color: red !important;\n}\n```\n```html\n<h1 style=\"color: blue;\">Title</h1>\n```\n\nEt comme toute la cascade est à propos de poids, si deux règles sont marquées\ncomme !important, le reste des critères est toujours pris en compte pour\ncalculer laquelle est la plus lourde, et donc appliquée.\n\n**…Et on ne peut pas faire plus compliqué que ça.** Maintenant, imaginez des\nmilliers et des milliers de sélecteurs et règles cascadant les uns sur les\nautres pour définir le style d'un site, et vous comprendrez l'enfer que peut\nêtre le CSS. Ainsi, des développeurs CSS ont imaginé différentes méthodologies\net outils pour éviter ce cauchemar !\n\n## L'évolution des outils\n\nMaintenant, je vais vous présenter comment ma façon d'écrire du CSS a évolué au\nfil du temps. Ne vous attendez pas à une chronologie complète de tous les\noutils inventés depuis la création du CSS en 1996 (j'avais 6 ans !) mais plutôt\nune explication de comment je me suis débrouillé avec la cascade dans ma courte\nexpérience personnelle.\n\n### Pré-processeurs\n\nJ'ai commencé à developper des applications web en 2012, en plein âge d'or [des\npré-processeurs](/fr/articles/css/preprocesseurs/). Ils\nétaient apparus quelques années auparavant, comme le CSS lui-même n'était pas\nsuffisamment adapté pour construire des sites complexes. Les pré-processeurs\nsont des compilateurs qui génèrent du code CSS à partir de languages légèrement\ndifférents, comme [Sass](http://sass-lang.com) ou [LESS](http://lesscss.org).\nCes nouveaux languages permettent de créer des variables par exemple, ou\nd'imbriquer des sélecteurs, entre autres merveilleuses nouvelles\nfonctionnalités.\n\nOn peut transformer ce vieux code CSS compliqué à maintenir :\n\n```css\nbody {\n  background: #E5E5E5;\n}\n\nbody h1 {\n  color: #333333;\n}\n```\n\nen cette bien *meilleure* version :\n\n```scss\n$textColor: #333333;\n\nbody {\n  background: lighten($textColor, 90%);\n\n  h1 {\n    color: $textColor\n  }\n}\n```\n\nAvec ces nouveaux outils, et pour éviter aux règles d'entrer en collision dans\nla cascade, nous avons commencé à imbriquer nos sélecteurs et à répliquer toute\nnotre structure HTML dans le code de notre pré-processeur favori. Notre CSS se\nretrouva donc avec des sélecteurs très long et lourds qui étaient associés\nuniquement avec un element HTML précis, comme ce dernier :\n\n> .searchPage .sideBar .refinements.default .category .star input\n\nEt ça a plutôt bien marché au début ! Mais ces sélecteurs n'étaient pas les plus\nperformants, et la structure du HTML étant répliquée, n'importe quel changement\ndans cette dernière doit être répercuté dans les styles. Donc je suis passé à\nautre chose.\n\n### Méthodologies CSS\n\nÀ ce moment, quelques nouvelles guidelines CSS ont commencé a attirer mon\nattention. On pouvait les utiliser avec les pré-processeurs, et avaient pour but\nd'éviter les collisions dans la cascade (tout comme l'imbrication des\nsélecteurs) avec un certain nombre de règles, comme sur le nommage des\nsélecteurs.\n\nCes méthodologies sont arrivées au moment ou je commençais à découper mes\ndéveloppements en composants. L'imbrication des sélecteurs ne marchait pas très\nbien avec ces derniers, vu que le but est de créer des bouts de code\nréutilisables partout dans la web app, comme un bouton par exemple. La\nméthodologie que j'utilise (toujours aujourd'hui) est appelée [BEM, pour Block\nElement Modifier](/fr/articles/css/bem/), mais il y en a\nd'autres avec le même but : chaque élément HTML de mes composants doit avoir une\nclasse CSS qui lui est unique. De cette façon, pas besoin d'imbrication, et pas\nde collision de la cascade !\n\nEt ce code de pré-processeur :\n\n```scss\nh1 {\n  color: $textColor\n\n  img {\n    border: 1px solid black;\n  }\n}\n```\n\nse transforme en :\n\n```css\n.Title {\n  color: $textColor\n}\n\n.Title-icon {\n  border: 1px solid black;\n}\n```\n\nÉvidement, le code HTML doit être mis à jour avec les nouvelles classes, mais\nles sélecteurs sont maintenant courts et compréhensibles. Et ceci, sans aucune\nchance de collision de cascade.\n\nMaintenant, pour pouvoir mieux expliquer un dernier outil, celui qui je pense va\nrésoudre tous nos problèmes, il faut que je vous montre une autre approche pour\ncontourner les problèmes de la cascade :\n\n### Frameworks CSS\n\nIci, pour éviter à nos règles CSS d'entrer en collision, nous… n'en écrivons\nplus !\nLes frameworks CSS sont des styles déjà écrits qu'on peut utiliser avec des\nclasses CSS spécifiques. Il y a deux approches ici :\n\n* Les frameworks de styles \"finaux\" comme [Bootstrap](http://getbootstrap.com).\nIl suffit d'ajouter la classe `btn` sur un élément HTML et… tada ! C'est\nmaintenant un magnifique bouton. Certaines variables sont modifiables pour\ntransformer le look global du framework.\n\n* Les frameworks de styles \"utilitaires\" comme [Tachyons](http://tachyons.io).\nIci, il n'y a pas de styles pré-définis, mais plein de classes utilitaires\nsont disponibles, comme `pam` pour donner un *medium padding* à un élément,\nou encore `ba` pour lui donner une *border all* tout autour.\n\nLes frameworks utilitaires sont assez intéressants, du fait que le fichier CSS\nfinal fera autour de 10kB et jamais plus, même si le site grandit ! Mais il y\naura beaucoup de classes peu compréhensibles dans le code HTML. C'est comparable\naux styles inline, avec une optimization de poids final, comme `ba` est plus\ncourt que *“border-style: solid; border-width: 1px;”*\n\nCes frameworks nous évitent tout tracas avec la cascade ! Mais je n'aimais pas\nle fait d'utiliser un framework, ainsi qu'avoir beaucoup de classes non\ncompréhensibles dans mon code HTML. Cependant, la totale réutilisabilité et\nmodularité des styles, sans problèmes de cascade, sont impressionnants.\n\nCela nous amène donc à cet outil génial, forgé directement avec la meilleure\nmagie JavaScript :\n\n### CSS Modules\n\nCe concept a d'abord pris forme suite à une simple observation : de nos jours,\nle CSS est compilé à partir d'autres languages pour permettre une écriture plus\nfacile, et pour cette même raison le HTML est aussi généré grâce à des outils de\ntemplating en JavaScript. Mais les sélecteurs CSS, le lien entre les éléments et\nles styles, ceux-la même auxquels le codeur doit faire très attention pour\néviter qu'ils n'entrent en collision, n'ont pas d'outils du tout.\n\nEt [CSS Modules](https://github.com/css-modules/css-modules) fut créé. La\npremière fonctionnalité intéressante est la génération automatique des noms de\nclasses CSS. Plus d'inquiétude sur leur unicité, on peut les nommer comme on\nveut, au final ceux générés dans le HTML seront uniques. Promis. Cela nous\npermet de réécrire ce code CSS en BEM, et HTML :\n\n```css\n.Title {\n  color: $textColor;\n}\n```\n\n```html\n<h1 class=\"Title\"></h1>\n```\n\nen ce code CSS et template JavaScript :\n\n```css\n.styleName {\n  color: $textColor\n}\n```\n\n```js\nimport styles from './style.css';\n`<h1 class=${styles.styleName}></h1>`\n```\n\nUne fois compilé, ce code générera quelque chose comme ça :\n\n```css\n.styleName__abc5436 {\n  color: #333333;\n}\n```\n\n```html\n<h1 class=\"styleName__abc5436\"></h1>\n```\n\nUne casc-quoi ? Je ne sais pas ce que c'est ! ❤️\n\nLa deuxième fonctionnalité géniale, directement inspirée par les frameworks CSS\nmodulaires comme Tachyons, est la composition des styles. De la même façon qu'en\najoutant plusieurs classes utilitaires sur son élément HTML, CSS Modules nous\npermet de composer nos classes à partir de styles communs. Laissez-moi vous\nmontrer :\n\n```css\n.titleColor {\n  color: #333333;\n}\n\n.bigTitle {\n  composes: titleColor;\n  font-size: 24px;\n}\n\n.mediumTitle {\n  composes: titleColor;\n  font-size: 16px;\n}\n```\n\n```js\nimport styles from './style.css';\n`<h1 class=${styles.bigTitle}></h1>\n <h2 class=${styles.mediumTitle}></h2>`\n```\n\nva générer :\n\n```css\n.titleColor__abc5436 {\n  color: #333333;\n}\n\n.bigTitle__def6547 {\n  font-size: 24px;\n}\n\n.mediumTitle__1638bcd {\n  font-size: 16px;\n}\n```\n\n```js\n<h1 class=\"titleColor__abc5436 bigTitle__def6547\"></h1>\n<h2 class=\"titleColor__abc5436 mediumTitle__1638bcd\"></h2>\n```\n\nEt ceci, messieurs-dames, est plutôt fantastique. Les styles sont modularisables\net composables, et ce sans classes incompréhensibles mais directement dans les\nfeuilles de style. Et les collisions de sélecteurs et règles ne sont plus qu'un\nmauvais souvenir.\n\nEt c'est ainsi que j'ai expérimenté avec le CSS et sa cascade jusque-là.\nJ'espère que les mois et les années à venir vont me surprendre avec de meilleurs\noutils et / ou méthodologies, et je serais heureux de les apprendre et les\nessayer 👍\n","__filename":"fr/articles/css/modules/index.md","__url":"/fr/articles/css/modules/","__resourceUrl":"/fr/articles/css/modules/index.html","__dataUrl":"/fr/articles/css/modules/index.html.82b7c1f8565485317aadef3ba46d9b9b.json"}