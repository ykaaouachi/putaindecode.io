{"head":{"layout":"Post","comments":true,"date":"2016-06-16","title":"Pourquoi j'ai arrêté d'utiliser CSS","tags":["css","style-inline","javascript"],"authors":["bloodyowl"],"description":"CSS est un langage horriblement dangereux, parce qu'il mêle des concepts complètement pétés et une folle capacité à faire confondre…"},"body":"<p>CSS est un langage horriblement dangereux, parce qu'il mêle des concepts complètement pétés et une folle capacité à faire confondre facilité et simplicité aux gens qui l'utilisent.</p>\n<h2 id=\"quest-ce-qui-ne-va-pas-\"><a href=\"#quest-ce-qui-ne-va-pas-\" class=\"phenomic-HeadingAnchor\">#</a>Qu'est-ce qui ne va pas ?</h2>\n<p>À l'origine, CSS a été conçu pour styler des documents, pas des applications. Du coup lorsqu'on doit <em>scale</em>, c'est rapidement douloureux.</p>\n<h3 id=\"les-sélecteurs\"><a href=\"#les-s%C3%A9lecteurs\" class=\"phenomic-HeadingAnchor\">#</a>Les sélecteurs</h3>\n<p>Les sélecteurs sont des <strong>variables globales mutables</strong>. Lorsque vous faites :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.selector</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1rem</span>;\n}</code></pre>\n<p>C'est comme si en JavaScript vous faisiez :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">window</span>.selector = (<span class=\"hljs-built_in\">window</span>.selector || []).concat({\n  <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">\"1rem\"</span>,\n})</code></pre>\n<p>Ça veut dire que :</p>\n<ul>\n<li>La définition d'un style associé à un sélecteur peut être redéfinie ailleurs</li>\n<li>Si on associe plusieurs styles à un sélecteur, les derniers définis dans le CSS auront toujours la priorité</li>\n<li>Quelqu'un peut péter les styles d'un composant pour peu qu'il ne sache pas qu'un sélecteur est utilisé ailleurs</li>\n</ul>\n<h3 id=\"la-spécificité\"><a href=\"#la-sp%C3%A9cificit%C3%A9\" class=\"phenomic-HeadingAnchor\">#</a>La spécificité</h3>\n<p>Alors ça, c'est particulièrement drôle : la spécificité d'un sélecteur va définir la priorité d'application d'un style.</p>\n<table>\n<thead>\n<tr>\n<th>Sélecteur</th>\n<th>Spécificité</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>*</code></td>\n<td>0,0,0,0</td>\n</tr>\n<tr>\n<td><code>li</code></td>\n<td>0,0,0,1</td>\n</tr>\n<tr>\n<td><code>li:first-line</code></td>\n<td>0,0,0,2</td>\n</tr>\n<tr>\n<td><code>ul li</code></td>\n<td>0,0,0,2</td>\n</tr>\n<tr>\n<td><code>ul ol+li</code></td>\n<td>0,0,0,3</td>\n</tr>\n<tr>\n<td><code>h1 + *[rel=up]</code></td>\n<td>0,0,1,1</td>\n</tr>\n<tr>\n<td><code>ul ol li.red</code></td>\n<td>0,0,1,3</td>\n</tr>\n<tr>\n<td><code>li.red.level</code></td>\n<td>0,0,2,1</td>\n</tr>\n<tr>\n<td><code>#x34y</code></td>\n<td>0,1,0,0</td>\n</tr>\n</tbody>\n</table>\n<p>Si le style est défini dans l'attribut <code>style</code>, la spécificité est de 1,0,0,0. Si une valeur associée à une propriété est suffixée d'un <code>!important</code>, elle prend quoi qu'il arrive l'ascendance.</p>\n<p>Si on résume, on nage en plein délire, la priorité se définit dans l'ordre par : la présence de <code>!important</code>, la façon de définir le style, la spécificité du sélecteur utilisé puis par l'ordre de définition dans l'ensemble des CSS de la page. Évidemment, à l'époque où on n'avait qu'une pauvre petite feuille de style pour l'ensemble de son site, ça marchait ; plus maintenant.</p>\n<h3 id=\"les-régressions\"><a href=\"#les-r%C3%A9gressions\" class=\"phenomic-HeadingAnchor\">#</a>Les régressions</h3>\n<p>Prenons un exemple tout bête :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.item</span> {\n  <span class=\"hljs-attribute\">display</span>: block;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1rem</span>;\n  <span class=\"hljs-attribute\">color</span>: blue;\n}\n\n<span class=\"hljs-selector-class\">.some-context</span> <span class=\"hljs-selector-class\">.item</span> {\n  <span class=\"hljs-attribute\">display</span>: inline-block;\n  <span class=\"hljs-attribute\">color</span>: red;\n}</code></pre>\n<p>Quelqu'un de la team modifie <code>.item</code> :</p>\n<pre><code class=\"hljs language-diff\"> .item {\n   display: block;\n   font-size: 1rem;\n   color: blue;\n<span class=\"hljs-addition\">+  border: 1px solid red;</span>\n }\n\n .some-context .item {\n   display: inline-block;\n   color: red;\n}</code></pre>\n<p>Super, une regression dans <code>some-context</code>. Face à ça, deux possibilités :</p>\n<ul>\n<li>Vous vous foutez d'avoir des régressions qui pètent votre site</li>\n<li>À chaque changement minime du CSS vous vérifiez l'intégralité du site et testez tous les comportements dans tous les contextes.</li>\n</ul>\n<h3 id=\"le-choix-de-priorisation-des-styles\"><a href=\"#le-choix-de-priorisation-des-styles\" class=\"phenomic-HeadingAnchor\">#</a>Le choix de priorisation des styles</h3>\n<p>Ce serait pas mal de décider quel <code>className</code> est appliqué en priorité :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blue red\"</span>></span>text<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red blue\"</span>></span>text<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></code></pre>\n<p>mais bien évidemment non, comme vu plus haut, c'est le foutu ordre de définition des sélecteurs qui décide. Je vous laisse imaginer le bordel si on charge les feuilles de style à la demande, selon les actions utilisateur.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.blue</span> { <span class=\"hljs-attribute\">color</span>: blue; }\n<span class=\"hljs-selector-class\">.red</span> { <span class=\"hljs-attribute\">color</span>: red; }</code></pre>\n<p>C'est pire si vous utilisez un préprocesseur tel que Sass et LESS. Lorsque vous faites un :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.blue</span> {\n  <span class=\"hljs-attribute\">color</span>: blue;\n}\n\n<span class=\"hljs-selector-class\">.red</span> {\n  <span class=\"hljs-attribute\">color</span>: red;\n}\n\n<span class=\"hljs-selector-class\">.my-selector</span> {\n  @extend .red;\n  @extend .blue;\n}</code></pre>\n<p>Vous imaginez que <code>.blue</code> étant appliqué après dans <code>.my-selector</code>, il va prendre la priorité. EH BAH NON, c'est <code>.red</code>, parce que sa déclaration est située après <code>.blue</code>.</p>\n<p>Si ce constat peut aussi permettre à ceux et celles qui utilisent des CSS atomiques d'arrêter immédiatement :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.relative</span> { <span class=\"hljs-attribute\">position</span>: relative; }\n<span class=\"hljs-selector-class\">.absolute</span> { <span class=\"hljs-attribute\">position</span>: absolute; }\n<span class=\"hljs-selector-class\">.static</span> { <span class=\"hljs-attribute\">position</span>: static; }</code></pre>\n<p>Dans le cas précédent, si vous ajoutez une classe <code>relative</code> à un élement ayant déjà la classe <code>static</code>, ça ne changera rien du tout, parce que <code>.static</code> est défini après <code>.relative</code>. Génial, non ?</p>\n<h3 id=\"le-futur-de-css\"><a href=\"#le-futur-de-css\" class=\"phenomic-HeadingAnchor\">#</a>Le futur de CSS</h3>\n<p>Les variables sont une feature qui a été très demandée à CSS. Mais cette feature va débarquer avec son lot de souci :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-pseudo\">:root</span> {\n  <span class=\"hljs-attribute\">--mainColor</span>: blue;\n}\n\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--mainColor);\n}</code></pre>\n<p>C'est super, mais si quelqu'un vient ajouter :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-pseudo\">:root</span> {\n  <span class=\"hljs-attribute\">--mainColor</span>: red;\n}</code></pre>\n<p>quelque part, il y a deux cas :</p>\n<ul>\n<li>soit c'est chargé avant, et ça ne fait rien</li>\n<li>soit c'est chargé après, et ça override toutes les propriétés utilisant <code>--mainColor</code>. On est bien contents.</li>\n</ul>\n<h2 id=\"vous-ne-pouvez-pas-vous-permettre-de-laisser-tomber-css-\"><a href=\"#vous-ne-pouvez-pas-vous-permettre-de-laisser-tomber-css-\" class=\"phenomic-HeadingAnchor\">#</a>Vous ne pouvez pas vous permettre de laisser tomber CSS ?</h2>\n<p>Dans ce cas, forcez vous à utiliser la <a href=\"/fr/articles/css/bem/\">méthodologie BEM</a>. Ça ne réglera pas tout, mais au moins cela vous permettra d'éviter un maximum de conneries en vous forçant à découper en composants isolés, et à mieux maîtriser la priorisation, puisque le scope auquel vous devrez y veiller sera considérablement réduit :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Header.css */</span>\n<span class=\"hljs-selector-class\">.Header</span> {}\n\n  <span class=\"hljs-selector-class\">.Header-nav</span> {}\n\n<span class=\"hljs-comment\">/* Nav.css */</span>\n<span class=\"hljs-selector-class\">.Nav</span> {}\n\n  <span class=\"hljs-selector-class\">.Nav-item</span> {}\n\n    <span class=\"hljs-selector-class\">.Nav-item--active</span> {}</code></pre>\n<p>C'est quand même plus pratique à comprendre, non ?</p>\n<p>Encore mieux, si vous avez du tooling à la webpack, vous pouvez utiliser les <a href=\"/fr/articles/css/modules/\">CSS modules</a>, qui limiteront de même le scope d'application de vos feuilles de style.</p>\n<h2 id=\"vous-pouvez-vous-permettre-de-laisser-tomber-css-\"><a href=\"#vous-pouvez-vous-permettre-de-laisser-tomber-css-\" class=\"phenomic-HeadingAnchor\">#</a>Vous pouvez vous permettre de laisser tomber CSS ?</h2>\n<p>JavaScript vous permet déjà de bénéficier d'un système de modules, de variables, de conditions, de fonctions réutilisables, et tout ça sans hack. En plus de ça, vous maitrisez la priorisation, parce c'est que c'est vous qui décidez ce qui s'applique :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{\n  render() {\n    <span class=\"hljs-keyword\">const</span> { active, disabled } = <span class=\"hljs-keyword\">this</span>.props\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n          <span class=\"hljs-attr\">...styles.myComponent</span>,\n          <span class=\"hljs-attr\">...active</span> ? <span class=\"hljs-attr\">styles.active</span> <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">null</span>,\n          <span class=\"hljs-attr\">...disabled</span> &#x26;&#x26; !<span class=\"hljs-attr\">active</span> ? <span class=\"hljs-attr\">styles.disabled</span> <span class=\"hljs-attr\">:</span> <span class=\"hljs-attr\">null</span>,\n        }}\n      ></span>\n        tadaa\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    )\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> styles = {\n  <span class=\"hljs-attr\">myComponent</span>: {\n    <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">18</span>,\n  },\n  <span class=\"hljs-attr\">active</span>: {\n    <span class=\"hljs-attr\">textDecoration</span>: <span class=\"hljs-string\">\"underline\"</span>,\n  },\n  <span class=\"hljs-attr\">disabled</span>: {\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0.5</span>,\n  },\n}</code></pre>\n<p>Par ailleurs, avec certaines bibliothèques permettant naturellement l'usage d'inline-styles (comme React), cela vous donne la possibilité d'avoir le style et le markup dans le même fichier, sans avoir besoin de naviguer entre les onglets de votre éditeur (vous pouvez cependant séparer en plusieurs fichiers si ça vous fait plaisir).</p>\n<p>En résumé, utiliser JS pour définir et appliquer les styles vous permet de prendre le contrôle sur le styling de vos composants, tout en apportant le confort d'un langage offrant naturellement de nombreux avantages. Si vous êtes bloqués avec CSS, partez sur les CSS modules ou la méthologie BEM selon vos possibilités. Le but, c'est d'éliminer les <a href=\"https://github.com/necolas/react-native-web/blob/master/docs/guides/style.md\">7 maux de CSS</a>.</p>\n<p>Bisous bisous.</p>\n<h2 id=\"edit\"><a href=\"#edit\" class=\"phenomic-HeadingAnchor\">#</a>Edit</h2>\n<p>Afin de répondre aux diverses incompréhensions et commentaires en réponse à l’article, voilà un follow-up qui va tenter d’aller plus en profondeur dans la critique de CSS.</p>\n<p>Je vais donc répondre à <a href=\"http://www.glazman.org/weblog/dotclear/index.php?post/2016/06/18/Pourquoi-il-n-aurait-pas-du-arr%C3%AAter-d-utiliser-CSS\">l’article de Daniel Glazman</a>, ancien co-chairman du CSS Working Group.</p>\n<p>Le premier point n’a rien à voir avec le sujet, mais l’auteur fait un parallèle entre la réassignation dans JS et la mutabilité et absence de scope des sélecteurs CSS. La comparaison n’a pas lieu d’être, parce que JS est un langage de programmation. De plus, en JS, les variables ont une portée, et l’opérateur <code>const</code> existe pour prévenir la réassignation. <code>&#x3C;/digression></code></p>\n<p>Le grand problème de l’état actuel des sélecteurs CSS, c’est qu’ils n’offrent naturellement aucune API (hors <em>Shadow DOM</em>) permettant de limiter le scope d’un sélecteur sans augmenter sa spécificité. Si je veux ajouter des propriétés de style à un élément comportant un certain sélecteur dans un certain contexte, je suis obligé d’avoir connaissance de tous les sélecteurs correspondant potentiellement à cet éléments, de vérifier leur spécificité, et possiblement d’adapter le sélecteur simple que j’envisageais à l’origine pour pallier le manque de spécificité. Super, ma codebase contient maintenant des sélecteurs différents de leur sens original dans le simple but de les appliquer.</p>\n<p>Lorsque je lis la réaction épidermique de l’auteur face à BEM, une méthodologie ajoutant un namespace pour simuler ce scope côté utilisateur qui apporte un minimum de sécurité lorsque l’on travaille sur un projet à grande échelle, j’avoue un peu flipper quant à la conception des spécifications CSS.</p>\n<p>BEM est une réponse de la communauté d’utilisateurs à plusieurs soucis qu’ils ont rencontrés dans leurs utilisations variées de CSS. On dirait même dans sa réponse qu’il n’a pas pris le temps de se renseigner sur la nature de la méthodologie, qui ne consiste selon lui qu’à ajouter des indentations dont on se fout parce que CSSOM les ignore. WTF.</p>\n<p>Ignorer le feedback que constitue l’apparition de cette méthodologie et dénigrer les utilisateurs pour qui elle règle des problèmes posés par le laxisme du langage, ça ne fait pas avancer le langage, et ça ne donnera certainement pas envie de retourner à CSS.</p>\n<p>Concernant la spécificité des sélecteurs, évidemment qu’une quantité astronomique de sites utilise les sélecteurs CSS, simplement parce qu’ils n’ont pas eu d’alternative viable. Ça n’en fait pas une fonctionnalité bien conçue pour autant.</p>\n<p>Sur les régressions, l’idée à comprendre, c’est que l’absence de scope et de namespace dans le langage peut créer des régressions potentiellement partout dans un large site, parce qu’un sélecteur est global. Il n’y a pas moyen de sécuriser un rayon d’action pour travailler, à moins de gérer le namespace soi-même, dans le sélecteur.</p>\n<p>Concernant le choix de priorisation des styles, c'est un fait que l'ordre de la <code>DOMTokenList</code> n’a pas d'importance actuellement, et je ne fais que déplorer qu’en utilisant des sélecteurs, le choix de l’application des styles ne puisse pas se faire à l’endroit où l’élément est utilisé, avec la connaissance précise de son contexte.</p>\n<p>Sur le futur de CSS, le reproche que je dresse n'est pas comme ce qui est interprété dans le post de l'auteur, disant que je râle parce que si l'on fait un parallèle avec JS, on aurait :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>\nalert(a)\n<span class=\"hljs-comment\">// alerts 2</span></code></pre>\n<p>C’est un comportement parfaitement attendu. Et ce n’est pas ce que j’ai dit, je reproche à CSS de faire en sorte que, si l’on fait encore le parallèle :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// coucou c'est CSS</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>\nalert(a)\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-comment\">// alerts 2</span></code></pre>\n<p>Sur ma proposition alternative, outre être <em>“une horreur non-maintenable, verbeuse et error-prone”</em>, on va regarder ce que ça donne sur un cas plus simple :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-comment\">// un système de modules analysable statiquement</span>\n<span class=\"hljs-keyword\">import</span> { mainBlue, mainRed } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../utils/Colors\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (props) => {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"hljs-comment\">// on peut appliquer un style dont le rayon d'action est par définition</span>\n    <span class=\"hljs-comment\">// limité à l’élément sur lequel on le place</span>\n    &#x3C;div style={styles.container}>\n      {list.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =></span>\n        &#x3C;div style={styles.item}>\n          <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{</span>\n              <span class=\"hljs-attr\">...styles.text</span>,\n              // <span class=\"hljs-attr\">appliquer</span> <span class=\"hljs-attr\">un</span> <span class=\"hljs-attr\">style</span> <span class=\"hljs-attr\">conditionn</span>é <span class=\"hljs-attr\">par</span> <span class=\"hljs-attr\">le</span> <span class=\"hljs-attr\">contexte</span> <span class=\"hljs-attr\">est</span> <span class=\"hljs-attr\">tr</span>è<span class=\"hljs-attr\">s</span> <span class=\"hljs-attr\">simple</span>\n              // <span class=\"hljs-attr\">et</span> <span class=\"hljs-attr\">permet</span> <span class=\"hljs-attr\">de</span> <span class=\"hljs-attr\">prioriser</span> à <span class=\"hljs-attr\">la</span> <span class=\"hljs-attr\">d</span>é<span class=\"hljs-attr\">finition</span> <span class=\"hljs-attr\">du</span> <span class=\"hljs-attr\">markup</span>\n              <span class=\"hljs-attr\">...index</span> % <span class=\"hljs-attr\">2</span> === <span class=\"hljs-string\">0</span> &#x26;&#x26; <span class=\"hljs-attr\">styles.oddText</span>,\n            }}\n          ></span>\n            {item.text}\n          <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span></span>\n        &#x3C;<span class=\"hljs-regexp\">/div>\n      )}\n    &#x3C;/</span>div>\n  )\n}\n\n<span class=\"hljs-comment\">// la feuille de style est limitée au module</span>\n<span class=\"hljs-keyword\">const</span> styles = {\n  <span class=\"hljs-attr\">container</span>: {\n    <span class=\"hljs-attr\">display</span>: <span class=\"hljs-string\">\"flex\"</span>,\n    <span class=\"hljs-attr\">flexDirection</span>: <span class=\"hljs-string\">\"row\"</span>,\n  },\n  <span class=\"hljs-attr\">item</span>: {\n    <span class=\"hljs-attr\">flexBasis</span>: <span class=\"hljs-number\">200</span>,\n  },\n  <span class=\"hljs-attr\">text</span>: {\n    <span class=\"hljs-comment\">// peut utiliser des variables qui ne seront pas écrasées si j'en définis</span>\n    <span class=\"hljs-comment\">// une avec le même nom ailleurs dans l'app</span>\n    color: mainBlue,\n  },\n  <span class=\"hljs-attr\">oddText</span>: {\n    <span class=\"hljs-attr\">color</span>: mainRed,\n  },\n}</code></pre>\n<p>C’est juste une application d’une approche centrée sur les composants. L’important, c’est d’isoler ces composants pour les rendre facilement réutilisables, prévenir les effets de bord, et passer moins de temps à essayer de travailler avec des propriétés du langage qui nous gênent dans notre travail de tous les jours. Réduire la liberté d’utilisation permet ici d’apporter des propriétés (immutabilité des styles, application déterministe des styles, scope) qui nous permettent de raisonner notre code de manière beaucoup plus simple.</p>\n<p>Si l’on regarde du côté des CSS modules, qu’est-ce que ça fait exactement ? La même chose. Le tooling va limiter le scope d’une feuille de style en rendant opaques et globalement uniques les sélecteurs. Le CSS peut être utilisé en target de compilation sans problème, et la plupart des solutions rendant son utilisation confortable font une chose simple : contraindre à une utilisation plus stricte en masquant des parties trop laxistes du langage. C’est ce que le tooling JS a connu depuis quelques années, et on ne s’en porte que mieux.</p>\n<p>Le dernier argument utilisé est que « si le monde entier a adopté CSS (y compris le monde de l'édition qui vient pourtant de solutions assez radicalement différentes du Web), c'est bien parce que c'est bien et que ça marche ». Qu’est-ce qu’on peut répondre sinon que CSS a été adopté avant que les besoins du web n'aient suffisamment évolué pour que CSS dans son état actuel ait un énorme potentiel de fragilisation d’une codebase. Ne pas remettre en question le langage parce que ses utilisateurs n’ont pas d’alternative, c’est condamner le langage. C’est comme si la SNCF disait « BOARF ça sert à rien de faire arriver les trains à l’heure, vu que tout le monde le prend déjà c’est que c’est nickel ». Du coup, faut pas venir s’étonner que certains de ces utilisateurs aillent chercher des alternatives ailleurs.</p>\n<p>En conclusion, je déplore vraiment l'absence d'intérêt apparent de l'auteur pour écouter le feedback des utilisateurs sur les problèmes d'un langage. Il faut regarder ailleurs, et ne pas ignorer ou mépriser ce que les utilisateurs font de leur côté pour travailler plus sainement, ça pourrait même donner des idées pour améliorer ce qui fait perdre du temps aux utilisateurs.</p>\n","rawBody":"\nCSS est un langage horriblement dangereux, parce qu'il mêle des concepts complètement pétés et une folle capacité à faire confondre facilité et simplicité aux gens qui l'utilisent.\n\n## Qu'est-ce qui ne va pas ?\n\nÀ l'origine, CSS a été conçu pour styler des documents, pas des applications. Du coup lorsqu'on doit *scale*, c'est rapidement douloureux.\n\n### Les sélecteurs\n\nLes sélecteurs sont des **variables globales mutables**. Lorsque vous faites :\n\n```css\n.selector {\n  font-size: 1rem;\n}\n```\n\nC'est comme si en JavaScript vous faisiez :\n\n```javascript\nwindow.selector = (window.selector || []).concat({\n  fontSize: \"1rem\",\n})\n```\n\nÇa veut dire que :\n\n- La définition d'un style associé à un sélecteur peut être redéfinie ailleurs\n- Si on associe plusieurs styles à un sélecteur, les derniers définis dans le CSS auront toujours la priorité\n- Quelqu'un peut péter les styles d'un composant pour peu qu'il ne sache pas qu'un sélecteur est utilisé ailleurs\n\n### La spécificité\n\nAlors ça, c'est particulièrement drôle : la spécificité d'un sélecteur va définir la priorité d'application d'un style.\n\n| Sélecteur | Spécificité |\n| --- | --- |\n| `*` | 0,0,0,0 |\n| `li` | 0,0,0,1 |\n| `li:first-line` | 0,0,0,2 |\n| `ul li` | 0,0,0,2 |\n| `ul ol+li` | 0,0,0,3 |\n| `h1 + *[rel=up]` | 0,0,1,1 |\n| `ul ol li.red` | 0,0,1,3 |\n| `li.red.level` | 0,0,2,1 |\n| `#x34y` | 0,1,0,0 |\n\nSi le style est défini dans l'attribut `style`, la spécificité est de 1,0,0,0. Si une valeur associée à une propriété est suffixée d'un `!important`, elle prend quoi qu'il arrive l'ascendance.\n\nSi on résume, on nage en plein délire, la priorité se définit dans l'ordre par : la présence de `!important`, la façon de définir le style, la spécificité du sélecteur utilisé puis par l'ordre de définition dans l'ensemble des CSS de la page. Évidemment, à l'époque où on n'avait qu'une pauvre petite feuille de style pour l'ensemble de son site, ça marchait ; plus maintenant.\n\n### Les régressions\n\nPrenons un exemple tout bête :\n\n```css\n.item {\n  display: block;\n  font-size: 1rem;\n  color: blue;\n}\n\n.some-context .item {\n  display: inline-block;\n  color: red;\n}\n```\n\nQuelqu'un de la team modifie `.item` :\n\n```diff\n .item {\n   display: block;\n   font-size: 1rem;\n   color: blue;\n+  border: 1px solid red;\n }\n\n .some-context .item {\n   display: inline-block;\n   color: red;\n}\n```\n\nSuper, une regression dans `some-context`. Face à ça, deux possibilités :\n\n- Vous vous foutez d'avoir des régressions qui pètent votre site\n- À chaque changement minime du CSS vous vérifiez l'intégralité du site et testez tous les comportements dans tous les contextes.\n\n### Le choix de priorisation des styles\n\nCe serait pas mal de décider quel `className` est appliqué en priorité :\n\n```html\n<div class=\"blue red\">text</div>\n<div class=\"red blue\">text</div>\n```\n\nmais bien évidemment non, comme vu plus haut, c'est le foutu ordre de définition des sélecteurs qui décide. Je vous laisse imaginer le bordel si on charge les feuilles de style à la demande, selon les actions utilisateur.\n\n```css\n.blue { color: blue; }\n.red { color: red; }\n```\n\nC'est pire si vous utilisez un préprocesseur tel que Sass et LESS. Lorsque vous faites un :\n\n```css\n.blue {\n  color: blue;\n}\n\n.red {\n  color: red;\n}\n\n.my-selector {\n  @extend .red;\n  @extend .blue;\n}\n```\n\nVous imaginez que `.blue` étant appliqué après dans `.my-selector`, il va prendre la priorité. EH BAH NON, c'est `.red`, parce que sa déclaration est située après `.blue`.\n\nSi ce constat peut aussi permettre à ceux et celles qui utilisent des CSS atomiques d'arrêter immédiatement :\n\n```css\n.relative { position: relative; }\n.absolute { position: absolute; }\n.static { position: static; }\n```\n\nDans le cas précédent, si vous ajoutez une classe `relative` à un élement ayant déjà la classe `static`, ça ne changera rien du tout, parce que `.static` est défini après `.relative`. Génial, non ?\n\n### Le futur de CSS\n\nLes variables sont une feature qui a été très demandée à CSS. Mais cette feature va débarquer avec son lot de souci :\n\n```css\n:root {\n  --mainColor: blue;\n}\n\nbody {\n  color: var(--mainColor);\n}\n```\n\nC'est super, mais si quelqu'un vient ajouter :\n\n```css\n:root {\n  --mainColor: red;\n}\n```\n\nquelque part, il y a deux cas :\n\n- soit c'est chargé avant, et ça ne fait rien\n- soit c'est chargé après, et ça override toutes les propriétés utilisant `--mainColor`. On est bien contents.\n\n## Vous ne pouvez pas vous permettre de laisser tomber CSS ?\n\nDans ce cas, forcez vous à utiliser la [méthodologie BEM](/fr/articles/css/bem/). Ça ne réglera pas tout, mais au moins cela vous permettra d'éviter un maximum de conneries en vous forçant à découper en composants isolés, et à mieux maîtriser la priorisation, puisque le scope auquel vous devrez y veiller sera considérablement réduit :\n\n```css\n/* Header.css */\n.Header {}\n\n  .Header-nav {}\n\n/* Nav.css */\n.Nav {}\n\n  .Nav-item {}\n\n    .Nav-item--active {}\n```\n\nC'est quand même plus pratique à comprendre, non ?\n\nEncore mieux, si vous avez du tooling à la webpack, vous pouvez utiliser les [CSS modules](/fr/articles/css/modules/), qui limiteront de même le scope d'application de vos feuilles de style.\n\n## Vous pouvez vous permettre de laisser tomber CSS ?\n\nJavaScript vous permet déjà de bénéficier d'un système de modules, de variables, de conditions, de fonctions réutilisables, et tout ça sans hack. En plus de ça, vous maitrisez la priorisation, parce c'est que c'est vous qui décidez ce qui s'applique :\n\n```javascript\nclass MyComponent extends React.Component {\n  render() {\n    const { active, disabled } = this.props\n    return (\n      <div\n        style={{\n          ...styles.myComponent,\n          ...active ? styles.active : null,\n          ...disabled && !active ? styles.disabled : null,\n        }}\n      >\n        tadaa\n      </div>\n    )\n  }\n}\n\nconst styles = {\n  myComponent: {\n    fontSize: 18,\n  },\n  active: {\n    textDecoration: \"underline\",\n  },\n  disabled: {\n    opacity: 0.5,\n  },\n}\n```\n\nPar ailleurs, avec certaines bibliothèques permettant naturellement l'usage d'inline-styles (comme React), cela vous donne la possibilité d'avoir le style et le markup dans le même fichier, sans avoir besoin de naviguer entre les onglets de votre éditeur (vous pouvez cependant séparer en plusieurs fichiers si ça vous fait plaisir).\n\nEn résumé, utiliser JS pour définir et appliquer les styles vous permet de prendre le contrôle sur le styling de vos composants, tout en apportant le confort d'un langage offrant naturellement de nombreux avantages. Si vous êtes bloqués avec CSS, partez sur les CSS modules ou la méthologie BEM selon vos possibilités. Le but, c'est d'éliminer les [7 maux de CSS](https://github.com/necolas/react-native-web/blob/master/docs/guides/style.md).\n\nBisous bisous.\n\n## Edit\n\nAfin de répondre aux diverses incompréhensions et commentaires en réponse à l’article, voilà un follow-up qui va tenter d’aller plus en profondeur dans la critique de CSS.\n\nJe vais donc répondre à [l’article de Daniel Glazman](http://www.glazman.org/weblog/dotclear/index.php?post/2016/06/18/Pourquoi-il-n-aurait-pas-du-arrêter-d-utiliser-CSS), ancien co-chairman du CSS Working Group.\n\nLe premier point n’a rien à voir avec le sujet, mais l’auteur fait un parallèle entre la réassignation dans JS et la mutabilité et absence de scope des sélecteurs CSS. La comparaison n’a pas lieu d’être, parce que JS est un langage de programmation. De plus, en JS, les variables ont une portée, et l’opérateur `const` existe pour prévenir la réassignation. `</digression>`\n\nLe grand problème de l’état actuel des sélecteurs CSS, c’est qu’ils n’offrent naturellement aucune API (hors *Shadow DOM*) permettant de limiter le scope d’un sélecteur sans augmenter sa spécificité. Si je veux ajouter des propriétés de style à un élément comportant un certain sélecteur dans un certain contexte, je suis obligé d’avoir connaissance de tous les sélecteurs correspondant potentiellement à cet éléments, de vérifier leur spécificité, et possiblement d’adapter le sélecteur simple que j’envisageais à l’origine pour pallier le manque de spécificité. Super, ma codebase contient maintenant des sélecteurs différents de leur sens original dans le simple but de les appliquer.\n\nLorsque je lis la réaction épidermique de l’auteur face à BEM, une méthodologie ajoutant un namespace pour simuler ce scope côté utilisateur qui apporte un minimum de sécurité lorsque l’on travaille sur un projet à grande échelle, j’avoue un peu flipper quant à la conception des spécifications CSS.\n\nBEM est une réponse de la communauté d’utilisateurs à plusieurs soucis qu’ils ont rencontrés dans leurs utilisations variées de CSS. On dirait même dans sa réponse qu’il n’a pas pris le temps de se renseigner sur la nature de la méthodologie, qui ne consiste selon lui qu’à ajouter des indentations dont on se fout parce que CSSOM les ignore. WTF.\n\nIgnorer le feedback que constitue l’apparition de cette méthodologie et dénigrer les utilisateurs pour qui elle règle des problèmes posés par le laxisme du langage, ça ne fait pas avancer le langage, et ça ne donnera certainement pas envie de retourner à CSS.\n\nConcernant la spécificité des sélecteurs, évidemment qu’une quantité astronomique de sites utilise les sélecteurs CSS, simplement parce qu’ils n’ont pas eu d’alternative viable. Ça n’en fait pas une fonctionnalité bien conçue pour autant.\n\nSur les régressions, l’idée à comprendre, c’est que l’absence de scope et de namespace dans le langage peut créer des régressions potentiellement partout dans un large site, parce qu’un sélecteur est global. Il n’y a pas moyen de sécuriser un rayon d’action pour travailler, à moins de gérer le namespace soi-même, dans le sélecteur.\n\nConcernant le choix de priorisation des styles, c'est un fait que l'ordre de la `DOMTokenList` n’a pas d'importance actuellement, et je ne fais que déplorer qu’en utilisant des sélecteurs, le choix de l’application des styles ne puisse pas se faire à l’endroit où l’élément est utilisé, avec la connaissance précise de son contexte.\n\nSur le futur de CSS, le reproche que je dresse n'est pas comme ce qui est interprété dans le post de l'auteur, disant que je râle parce que si l'on fait un parallèle avec JS, on aurait :\n\n```javascript\nvar a = 1\nvar a = 2\nalert(a)\n// alerts 2\n```\n\nC’est un comportement parfaitement attendu. Et ce n’est pas ce que j’ai dit, je reproche à CSS de faire en sorte que, si l’on fait encore le parallèle :\n\n```javascript\n// coucou c'est CSS\nvar a = 1\nalert(a)\nvar a = 2\n// alerts 2\n```\n\nSur ma proposition alternative, outre être *“une horreur non-maintenable, verbeuse et error-prone”*, on va regarder ce que ça donne sur un cas plus simple :\n\n```javascript\nimport React, { Component } from \"react\"\n// un système de modules analysable statiquement\nimport { mainBlue, mainRed } from \"../utils/Colors\"\n\nexport default (props) => {\n  return (\n    // on peut appliquer un style dont le rayon d'action est par définition\n    // limité à l’élément sur lequel on le place\n    <div style={styles.container}>\n      {list.map((item, index) =>\n        <div style={styles.item}>\n          <span\n            style={{\n              ...styles.text,\n              // appliquer un style conditionné par le contexte est très simple\n              // et permet de prioriser à la définition du markup\n              ...index % 2 === 0 && styles.oddText,\n            }}\n          >\n            {item.text}\n          </span>\n        </div>\n      )}\n    </div>\n  )\n}\n\n// la feuille de style est limitée au module\nconst styles = {\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  item: {\n    flexBasis: 200,\n  },\n  text: {\n    // peut utiliser des variables qui ne seront pas écrasées si j'en définis\n    // une avec le même nom ailleurs dans l'app\n    color: mainBlue,\n  },\n  oddText: {\n    color: mainRed,\n  },\n}\n```\n\nC’est juste une application d’une approche centrée sur les composants. L’important, c’est d’isoler ces composants pour les rendre facilement réutilisables, prévenir les effets de bord, et passer moins de temps à essayer de travailler avec des propriétés du langage qui nous gênent dans notre travail de tous les jours. Réduire la liberté d’utilisation permet ici d’apporter des propriétés (immutabilité des styles, application déterministe des styles, scope) qui nous permettent de raisonner notre code de manière beaucoup plus simple.\n\nSi l’on regarde du côté des CSS modules, qu’est-ce que ça fait exactement ? La même chose. Le tooling va limiter le scope d’une feuille de style en rendant opaques et globalement uniques les sélecteurs. Le CSS peut être utilisé en target de compilation sans problème, et la plupart des solutions rendant son utilisation confortable font une chose simple : contraindre à une utilisation plus stricte en masquant des parties trop laxistes du langage. C’est ce que le tooling JS a connu depuis quelques années, et on ne s’en porte que mieux.\n\nLe dernier argument utilisé est que « si le monde entier a adopté CSS (y compris le monde de l'édition qui vient pourtant de solutions assez radicalement différentes du Web), c'est bien parce que c'est bien et que ça marche ». Qu’est-ce qu’on peut répondre sinon que CSS a été adopté avant que les besoins du web n'aient suffisamment évolué pour que CSS dans son état actuel ait un énorme potentiel de fragilisation d’une codebase. Ne pas remettre en question le langage parce que ses utilisateurs n’ont pas d’alternative, c’est condamner le langage. C’est comme si la SNCF disait « BOARF ça sert à rien de faire arriver les trains à l’heure, vu que tout le monde le prend déjà c’est que c’est nickel ». Du coup, faut pas venir s’étonner que certains de ces utilisateurs aillent chercher des alternatives ailleurs.\n\nEn conclusion, je déplore vraiment l'absence d'intérêt apparent de l'auteur pour écouter le feedback des utilisateurs sur les problèmes d'un langage. Il faut regarder ailleurs, et ne pas ignorer ou mépriser ce que les utilisateurs font de leur côté pour travailler plus sainement, ça pourrait même donner des idées pour améliorer ce qui fait perdre du temps aux utilisateurs.\n","__filename":"fr/articles/css/stop-css/index.md","__url":"/fr/articles/css/stop-css/","__resourceUrl":"/fr/articles/css/stop-css/index.html","__dataUrl":"/fr/articles/css/stop-css/index.html.6a15fdc8f5008aafa2576c7815c36f12.json"}