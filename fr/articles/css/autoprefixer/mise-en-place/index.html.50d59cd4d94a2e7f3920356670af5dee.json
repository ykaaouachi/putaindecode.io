{"head":{"layout":"Post","comments":true,"date":"2014-03-04","title":"Mise en place d’autoprefixer","tags":["css","préfixe"],"authors":["MoOx"],"description":"Suite à mon précédent article Comment en finir avec les préfixes CSS, certains sont restés sur leur faim. Voici donc de rapides exemples de…"},"body":"<p>Suite à mon précédent article <a href=\"/fr/articles/css/autoprefixer/\">Comment en finir avec les préfixes CSS</a>,\ncertains sont restés sur leur faim.\nVoici donc de rapides exemples de mise en place de cette solution.</p>\n<h2 id=\"installation-dautoprefixer\"><a href=\"#installation-dautoprefixer\" class=\"phenomic-HeadingAnchor\">#</a>Installation d’autoprefixer</h2>\n<p>Il vous faudra <a href=\"http://nodejs.org/\">Node.js</a> (qui embarque maintenant <a href=\"https://www.npmjs.org/\">Npm</a>) afin de pouvoir\ninstaller ce nouveau joujou.</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-comment\"># on install autoprefixer via npm en global</span>\n$ <span class=\"hljs-built_in\">npm</span> install --<span class=\"hljs-built_in\">global</span> autoprefixer\n<span class=\"hljs-comment\"># ou pour les fainéants</span>\n$ <span class=\"hljs-built_in\">npm</span> i -g autoprefixer</code></pre>\n<p>Une fois ceci fait, vous devriez avoir la commande <code>autoprefixer</code> disponible.\nOn vérifie de suite avec <code>autoprefixer -v</code>.</p>\n<pre><code class=\"hljs language-console\">$ autoprefixer -v\nautoprefixer <span class=\"hljs-number\">1.0</span><span class=\"hljs-number\">.20140203</span></code></pre>\n<p>Vous remarquerez que le numéro de version est un peu spécial : il contient une\ndate en place d’un numéro de patch. Cette date correspond à la dernière mise à\njour de la base de données de <em>Can I Use</em>.</p>\n<h2 id=\"utilisation-dautoprefixer\"><a href=\"#utilisation-dautoprefixer\" class=\"phenomic-HeadingAnchor\">#</a>Utilisation d’autoprefixer</h2>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-variable\">$ </span>autoprefixer *.css</code></pre>\n<p>C’est aussi simple que ça.</p>\n<p>En fait non je plaisante, c’est un tout petit peu plus long car par défaut,\ncomme beaucoup de commandes, vous allez avoir la sortie crachée en plein visage.</p>\n<p>Pour voir les options, comme d’habitude <code>--help</code> ou <code>-h</code> :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-variable\">$ </span>autoprefixer -h</code></pre>\n<p>On y apprend l’existance des options suivantes :</p>\n<pre><code>Options:\n  -b, --browsers BROWSERS  add prefixes for selected browsers\n  -o, --output FILE        set output file\n  -d, --dir DIR            set output dir\n  -m, --map                generate source map\n  -i, --info               show selected browsers and properties\n  -h, --help               show help text\n  -v, --version            print program version\n</code></pre>\n<p>Du coup si on veut faire un coup de commande bien personnalisée on pourra faire :</p>\n<pre><code class=\"hljs language-console\">$ autoprefixer -<span class=\"hljs-selector-tag\">b</span> <span class=\"hljs-string\">\"last 2 versions, > 1%, Explorer 7, Android 2\"</span> -o prefixed<span class=\"hljs-selector-class\">.css</span> index.css</code></pre>\n<p>Il va par contre nous falloir un fichier css pour tester :</p>\n<pre><code class=\"hljs language-console\"># <span class=\"hljs-keyword\">on</span> met un peu de CSS dans <span class=\"hljs-built_in\">index</span>.css manière de tester <span class=\"hljs-keyword\">le</span> bouzin\n$ <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"* { box-sizing:border-box}\"</span> > <span class=\"hljs-built_in\">index</span>.css</code></pre>\n<p>On peut donc essayer notre commande plus haut qui va remplir le fichier <code>prefixed.css</code></p>\n<p>Pour vérifier :</p>\n<pre><code class=\"hljs language-console\">$ cat prefixed.css\n* { -webkit-<span class=\"hljs-built_in\">box</span>-sizing:<span class=\"hljs-built_in\">border</span>-<span class=\"hljs-built_in\">box</span>; -moz-<span class=\"hljs-built_in\">box</span>-sizing:<span class=\"hljs-built_in\">border</span>-<span class=\"hljs-built_in\">box</span>; <span class=\"hljs-built_in\">box</span>-sizing:<span class=\"hljs-built_in\">border</span>-<span class=\"hljs-built_in\">box</span>}</code></pre>\n<p>On a bien eu des préfixes ajoutés en fonction de notre demande (bon rien pour IE\nqui n’est pas passé par une version préfixé)</p>\n<p>Par défaut, <em>autoprefixer</em> utilise <code>> 1%, last 2 versions, Firefox ESR, Opera 12.1</code> pour les navigateurs.\nJe pense que pour la plupart d’entre vous voudront ajouter \"Explorer 8\" à la liste, mais ça\nn’est en théorie pas nécessaire vu le permier argument qui demande de préfixer tous les navigateurs\ndont l’usage global est supérieur à 1%. Peut-être Explorer 7 pour certains ?\nFaites un tour sur la <a href=\"http://caniuse.com/usage_table.php\">page dédié aux statistiques globales sur CanIUse.com</a> pour avoir une idée.</p>\n<p>Sinon, pour du petit one shot, un plugin dans votre éditeur suffira:</p>\n<ul>\n<li><a href=\"https://github.com/sindresorhus/atom-autoprefixer\">plugin autoprefixer pour Atom</a></li>\n<li><a href=\"https://github.com/sindresorhus/sublime-autoprefixer\">plugin autoprefixer pour Sublime Text</a></li>\n<li><a href=\"https://github.com/mikaeljorhult/brackets-autoprefixer\">plugin autoprefixer pour Brackets</a></li>\n</ul>\n<figure>\n  <img src=\"../autoprefixer.gif\" alt=\"sublime text autoprefixer preview\" />\n  <figcaption>Intégration dans Sublime Text</figcaption>\n</figure>\n<h2 id=\"automatisation-dautoprefixer-autoception\"><a href=\"#automatisation-dautoprefixer-autoception\" class=\"phenomic-HeadingAnchor\">#</a>Automatisation d’autoprefixer (autoception)</h2>\n<p>Bien entendu on va pas se taper la commande à la main tout le temps hein...\nIl nous faut automatiser nos processus. Sans quoi on perd du temps, et\n<a href=\"http://deboutlesgens.com/blog/jai-pas-le-temps-la-pire-excuse-qui-soit/\">le temps... C’est du temps !</a></p>\n<p>Donc, comme je l’ai dit précédemment, on peut utiliser <em>autoprefixer</em> avec les solutions\nsuivantes:</p>\n<ul>\n<li>via <a href=\"https://github.com/ai/autoprefixer#nodejs\">Node.js</a> directement,</li>\n<li>en plugin <a href=\"https://www.npmjs.org/package/gulp-autoprefixer\">Gulp</a>,</li>\n<li>en plugin <a href=\"https://github.com/ai/autoprefixer#grunt\">Grunt</a>,</li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#compass\">Compass</a>,</li>\n<li>en plugin <a href=\"https://github.com/ai/autoprefixer#stylus\">Stylus</a>,</li>\n<li>avec <a href=\"https://github.com/ai/autoprefixer#ruby-on-rails\">RoR</a> ou <a href=\"https://github.com/ai/autoprefixer#ruby\">Ruby</a>,</li>\n<li>avec l’application <a href=\"https://github.com/ai/autoprefixer#prepros\">Prepros</a></li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#mincer\">Mincer</a></li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#middleman\">Middleman</a></li>\n<li>avec <a href=\"https://github.com/ai/autoprefixer#php\">PHP</a> (vous avez bien lu)</li>\n</ul>\n<p>Si vous avez besoin, je pense que vous trouverez sans trop de problème d’autres\nimplémentations.</p>\n<p>Cela dit, je vais vous montrer quelques cas d’utilisations:</p>\n<h3 id=\"make\"><a href=\"#make\" class=\"phenomic-HeadingAnchor\">#</a>Make</h3>\n<p>Là c’est facile, tout bon développeur doit avoir <code>make</code> sur sa machine (sinon\nc’est que t’es pas développeur, je sais pas trop ce que tu fais ici du coup).</p>\n<p>On peut tout simplement créer un fichier <code>Makefile</code> avec la commande précédente:</p>\n<pre><code class=\"hljs language-console\"># <span class=\"hljs-keyword\">cr</span>éation d’un dossier pour notre popote (puis <span class=\"hljs-keyword\">on</span> va dedans...)\n$ <span class=\"hljs-built_in\">mkdir</span> autoprefixer-test &#x26;&#x26; <span class=\"hljs-keyword\">cd</span> autoprefixer-test\n\n# On <span class=\"hljs-keyword\">cr</span>éer un makefile avec une tâ<span class=\"hljs-keyword\">che</span> `css` (<span class=\"hljs-keyword\">cr</span>éation/écrasement via >)\n$ <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"css:\"</span> > Makefile\n\n# On vérifie qu’<span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">a</span> bien rempli <span class=\"hljs-keyword\">le</span> fichier\n$ <span class=\"hljs-keyword\">cat</span> Makefile\n\n## On ajoute notre commande <span class=\"hljs-keyword\">au</span> fichier (ajout <span class=\"hljs-keyword\">au</span> fichier existant via >>)\n$ <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"\\tautoprefixer index.css -b \\\"last 2 versions, > 1%, Explorer 7, Android 2\\\" -o prefixed.css\"</span> >> Makefile\n\n# On vérifie qu’<span class=\"hljs-keyword\">on</span> <span class=\"hljs-keyword\">a</span> bien rempli <span class=\"hljs-keyword\">le</span> fichier\n$ <span class=\"hljs-keyword\">cat</span> Makefile</code></pre>\n<p>Voilà votre Makefile doit être bien rempli. Pour tester la commande <code>css</code>:</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-variable\">$ </span>make css</code></pre>\n<p>Vous remarquerez que la commande <em>autoprefixer</em> s’affiche, si ça vous embête, rajoutez\n<code>@</code> devant. Vous pouvez modifier votre Makefile dans ce sens:</p>\n<pre><code>css:\n    echo \"❯ Autoprefixage magique.\"\n    @autoprefixer index.css -b \"last 2 versions, > 1%, Explorer 7, Android 2\" -o prefixed.css\n</code></pre>\n<p><em>Attention : Les Makefiles utilisent des tabulations uniquement ! Sans quoi cela\nne va pas marcher comme prévu.</em></p>\n<p>Vous avez donc maintenant un exemple assez simpliste qui peut être utilisé si\nvous n’avez pas encore <a href=\"http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/\">automatisé votre workflow</a>\nvia des outils comme <a href=\"http://gulpjs.com/\">Gulp</a> ou <a href=\"http://gruntjs.com/\">Grunt</a>.</p>\n<p>Passons justement à ces solutions plus sérieuses.</p>\n<h3 id=\"autoprefixer-avec-gulp\"><a href=\"#autoprefixer-avec-gulp\" class=\"phenomic-HeadingAnchor\">#</a>Autoprefixer avec Gulp</h3>\n<p>Je ne vais pas trop rentrer dans les détails de Gulp (ce n’est pas le sujet ici).\nVoici cependant une exemple assez bref et compréhensible pour commencer, avec\nune seule écriture sur le système de fichier (contrairement à la solution Grunt).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// gulp stuff</span>\n<span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp\"</span>)\n<span class=\"hljs-keyword\">var</span> gutil = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-util\"</span>)\n  <span class=\"hljs-comment\">// le plombier ajuste les fuites des tuyaux (erreur de pipe)</span>\n  <span class=\"hljs-comment\">// ceci est conseillé pour éviter que chaque erreur \"casse\" tout le process</span>\n  <span class=\"hljs-comment\">// dès qu’une erreur est remonté par un plugin</span>\n<span class=\"hljs-keyword\">var</span> plumber = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-plumber\"</span>)\n\n<span class=\"hljs-comment\">// css stuff</span>\n<span class=\"hljs-keyword\">var</span> sass = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-ruby-sass\"</span>)\n<span class=\"hljs-keyword\">var</span> autoprefixer = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-autoprefixer\"</span>)\n<span class=\"hljs-keyword\">var</span> csso = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-csso\"</span>)\n\n<span class=\"hljs-comment\">// css task: sass, autoprefixer et csso si --production</span>\ngulp.task(<span class=\"hljs-string\">\"styles\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp.src(<span class=\"hljs-string\">\"./src/css/*.scss\"</span>)\n    <span class=\"hljs-comment\">// it’s me, Mario</span>\n    .pipe(plumber())\n\n    .pipe(sass({<span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">\"expanded\"</span>}))\n\n    <span class=\"hljs-comment\">// Autoprefixer \\\\</span>\n    <span class=\"hljs-comment\">// vous remarquerez que ici chaque option est un paramètre</span>\n    <span class=\"hljs-comment\">// pas comme pour l’appel en ligne de commande.</span>\n    .pipe(autoprefixer(<span class=\"hljs-string\">\"last 2 versions\"</span>, <span class=\"hljs-string\">\"> 1%\"</span>, <span class=\"hljs-string\">\"Explorer 7\"</span>, <span class=\"hljs-string\">\"Android 2\"</span>))\n\n    <span class=\"hljs-comment\">// optimisation CSS pour la prod uniquement</span>\n    .pipe(gulp.env.production ? csso() : gutil.noop())\n\n    <span class=\"hljs-comment\">// unique écriture sur disque</span>\n    .pipe(gulp.dest(<span class=\"hljs-string\">\"./dist/css/\"</span>))\n    <span class=\"hljs-comment\">// je passe sur cette partie à configurer, mais ici on peut imaginer un</span>\n    <span class=\"hljs-comment\">// livereload en plus, il faudra définir livereload et livereloadServer</span>\n    <span class=\"hljs-comment\">// cette partie dépend un peu de votre serveur durant le dév.</span>\n    <span class=\"hljs-comment\">// ca fera l’objet d’un post tiens...</span>\n    <span class=\"hljs-comment\">//.pipe(livereload(livereloadServer))</span>\n})\n\ngulp.task(<span class=\"hljs-string\">\"dev\"</span>, [<span class=\"hljs-string\">\"styles\"</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp.watch(<span class=\"hljs-string\">\"./src/css/**/*\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">event</span>) </span>{\n    gulp.run(<span class=\"hljs-string\">\"styles\"</span>)\n  })\n})\n\n<span class=\"hljs-comment\">// Tâches disponibles :</span>\n\n<span class=\"hljs-comment\">// - pour générer les feuilles de styles</span>\n<span class=\"hljs-comment\">//   (pour optimiser pour la prod, utiliser l’option)</span>\n<span class=\"hljs-comment\">// $ gulp styles [--production]</span>\n\n<span class=\"hljs-comment\">// - pour le dev, surveille et lance la tâche `styles` dès que nécessaire</span>\n<span class=\"hljs-comment\">// $ gulp dev</span></code></pre>\n<h3 id=\"autoprefixer-avec-grunt\"><a href=\"#autoprefixer-avec-grunt\" class=\"phenomic-HeadingAnchor\">#</a>Autoprefixer avec Grunt</h3>\n<p>Voici un petit Gruntfile avec la même configuration que ci dessus</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">grunt</span>) </span>{\n<span class=\"hljs-meta\">  \"use strict\"</span>;\n\n  grunt.loadNpmTasks(<span class=\"hljs-string\">\"grunt-contrib-sass\"</span>)\n  grunt.loadNpmTasks(<span class=\"hljs-string\">\"grunt-autoprefixer\"</span>)\n  grunt.loadNpmTasks(<span class=\"hljs-string\">\"grunt-csso\"</span>)\n  grunt.loadNpmTasks(<span class=\"hljs-string\">\"grunt-contrib-watch\"</span>)\n\n  grunt.initConfig({\n    <span class=\"hljs-attr\">sass</span>: {\n      <span class=\"hljs-attr\">dist</span>: {\n        <span class=\"hljs-attr\">options</span>: {\n          <span class=\"hljs-attr\">style</span>: <span class=\"hljs-string\">\"expanded\"</span>\n        },\n        <span class=\"hljs-attr\">files</span>: [{\n          <span class=\"hljs-attr\">expand</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">flatten</span>: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-attr\">cwd</span>: <span class=\"hljs-string\">\"./src/css\"</span>,\n          <span class=\"hljs-attr\">src</span>: [<span class=\"hljs-string\">\"*.scss\"</span>],\n          <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">\"./dist/css\"</span>,\n          <span class=\"hljs-attr\">ext</span>: <span class=\"hljs-string\">\".css\"</span>\n        }]\n      }\n    },\n    <span class=\"hljs-attr\">autoprefixer</span>: {\n      <span class=\"hljs-attr\">options</span>: {\n        <span class=\"hljs-attr\">browsers</span>: [<span class=\"hljs-string\">\"last 2 versions\"</span>, <span class=\"hljs-string\">\"> 1%\"</span>, <span class=\"hljs-string\">\"Explorer 7\"</span>, <span class=\"hljs-string\">\"Android 2\"</span>]\n      },\n      <span class=\"hljs-attr\">dist</span>: {\n        <span class=\"hljs-attr\">expand</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">flatten</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">cwd</span>: <span class=\"hljs-string\">\"./dist/css\"</span>,\n        <span class=\"hljs-attr\">src</span>: [<span class=\"hljs-string\">\"*.css\"</span>],\n        <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">\"./dist/css/\"</span>\n      }\n    },\n    <span class=\"hljs-attr\">csso</span>: {\n      <span class=\"hljs-attr\">dist</span>: {\n        <span class=\"hljs-attr\">expand</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">flatten</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">cwd</span>: <span class=\"hljs-string\">\"./dist/css/\"</span>,\n        <span class=\"hljs-attr\">src</span>: [<span class=\"hljs-string\">\"*.css\"</span>],\n        <span class=\"hljs-attr\">dest</span>: <span class=\"hljs-string\">\"./dist/css/\"</span>\n      }\n    },\n    <span class=\"hljs-attr\">watch</span>: {\n      <span class=\"hljs-attr\">styles</span>: {\n        <span class=\"hljs-attr\">files</span>: [<span class=\"hljs-string\">\"./src/css/**/*.scss\"</span>],\n        <span class=\"hljs-attr\">tasks</span>: [<span class=\"hljs-string\">\"styles\"</span>]\n      }\n    }\n  })\n\n  grunt.registerTask(<span class=\"hljs-string\">\"styles\"</span>, [<span class=\"hljs-string\">\"sass\"</span>, <span class=\"hljs-string\">\"autoprefixer\"</span>])\n  grunt.registerTask(<span class=\"hljs-string\">\"styles:production\"</span>, [<span class=\"hljs-string\">\"sass\"</span>, <span class=\"hljs-string\">\"autoprefixer\"</span>, <span class=\"hljs-string\">\"csso\"</span>])\n  grunt.registerTask(<span class=\"hljs-string\">\"dev\"</span>, [<span class=\"hljs-string\">\"sass\"</span>, <span class=\"hljs-string\">\"watch\"</span>])\n}\n\n<span class=\"hljs-comment\">// Tâches disponibles :</span>\n\n<span class=\"hljs-comment\">// - pour générer les feuilles de styles</span>\n<span class=\"hljs-comment\">// $ grunt styles</span>\n\n<span class=\"hljs-comment\">// - pareil, mais optimiser pour la prod</span>\n<span class=\"hljs-comment\">// $ grunt styles:production</span>\n\n<span class=\"hljs-comment\">// - pour le dev, surveille et lance la tâche `styles` dès que nécessaire</span>\n<span class=\"hljs-comment\">// $ grunt watch</span></code></pre>\n<p>Comme vous pouvez le voir, la version Grunt est un peu plus volumineuse (bien qu’espacée).\nPersonnellement j’aime la concision de gulp.\nDe plus la version Grunt sera plus longue car nous aurons 3 lectures / écritures sur le disque.</p>\n<p><em>Notez que bien entendu dans notre exemple précédent, nous pouvons remplacer Sass\npar un autre pré / post-processeur.</em></p>\n<h3 id=\"autoprefixer-avec-stylus\"><a href=\"#autoprefixer-avec-stylus\" class=\"phenomic-HeadingAnchor\">#</a>Autoprefixer avec Stylus</h3>\n<p>Dans les exemples précédents, j’ai montré une solution classique avec Sass.\nMais voici complètement autre chose: <em>autoprefixer</em> peut s’utiliser en \"plugin\" Stylus.</p>\n<p>C’est assez simple il suffit d’utiliser l’option <code>use</code> (<code>-u</code> en cli).\nVoilà ce qu’on aurait en cli :</p>\n<pre><code class=\"hljs language-console\">$ npm install -g stylus autoprefixer-stylus\n$ stylus -u autoprefixer-stylus -o <span class=\"hljs-keyword\">index</span>.css <span class=\"hljs-keyword\">index</span>.styl</code></pre>\n<h4 id=\"avec-grunt\"><a href=\"#avec-grunt\" class=\"phenomic-HeadingAnchor\">#</a>Avec Grunt</h4>\n<p>Il suffira d’utiliser donc l’option <code>use</code> dans votre configuration.</p>\n<h4 id=\"avec-gulp\"><a href=\"#avec-gulp\" class=\"phenomic-HeadingAnchor\">#</a><del>Avec Gulp</del></h4>\n<p>La façon de faire de gulp, via des streams pour éviter la lecture / écriture multiple fait que le plugin\n<em>autoprefixer-stylus</em> est vide de sens.\nVous pouvez donc utiliser <em>autoprefixer</em> normalement, après l’appel du pré-processeur.</p>\n<hr>\n<p>Voilà j’espère que cette fois-ci vous êtes rassasié(e) afin de ne plus avoir envie de manger des préfixes CSS !</p>\n","rawBody":"\nSuite à mon précédent article [Comment en finir avec les préfixes CSS](/fr/articles/css/autoprefixer/),\ncertains sont restés sur leur faim.\nVoici donc de rapides exemples de mise en place de cette solution.\n\n## Installation d’autoprefixer\n\nIl vous faudra [Node.js](http://nodejs.org/) (qui embarque maintenant [Npm](https://www.npmjs.org/)) afin de pouvoir\ninstaller ce nouveau joujou.\n\n```console\n# on install autoprefixer via npm en global\n$ npm install --global autoprefixer\n# ou pour les fainéants\n$ npm i -g autoprefixer\n```\n\nUne fois ceci fait, vous devriez avoir la commande `autoprefixer` disponible.\nOn vérifie de suite avec `autoprefixer -v`.\n\n```console\n$ autoprefixer -v\nautoprefixer 1.0.20140203\n```\n\nVous remarquerez que le numéro de version est un peu spécial : il contient une\ndate en place d’un numéro de patch. Cette date correspond à la dernière mise à\njour de la base de données de _Can I Use_.\n\n## Utilisation d’autoprefixer\n\n```console\n$ autoprefixer *.css\n```\n\nC’est aussi simple que ça.\n\nEn fait non je plaisante, c’est un tout petit peu plus long car par défaut,\ncomme beaucoup de commandes, vous allez avoir la sortie crachée en plein visage.\n\nPour voir les options, comme d’habitude `--help` ou `-h` :\n\n```console\n$ autoprefixer -h\n```\n\nOn y apprend l’existance des options suivantes :\n\n```\nOptions:\n  -b, --browsers BROWSERS  add prefixes for selected browsers\n  -o, --output FILE        set output file\n  -d, --dir DIR            set output dir\n  -m, --map                generate source map\n  -i, --info               show selected browsers and properties\n  -h, --help               show help text\n  -v, --version            print program version\n```\n\nDu coup si on veut faire un coup de commande bien personnalisée on pourra faire :\n\n```console\n$ autoprefixer -b \"last 2 versions, > 1%, Explorer 7, Android 2\" -o prefixed.css index.css\n```\n\nIl va par contre nous falloir un fichier css pour tester :\n\n```console\n# on met un peu de CSS dans index.css manière de tester le bouzin\n$ echo \"* { box-sizing:border-box}\" > index.css\n```\n\nOn peut donc essayer notre commande plus haut qui va remplir le fichier `prefixed.css`\n\nPour vérifier :\n\n```console\n$ cat prefixed.css\n* { -webkit-box-sizing:border-box; -moz-box-sizing:border-box; box-sizing:border-box}\n```\n\nOn a bien eu des préfixes ajoutés en fonction de notre demande (bon rien pour IE\nqui n’est pas passé par une version préfixé)\n\nPar défaut, _autoprefixer_ utilise `> 1%, last 2 versions, Firefox ESR, Opera 12.1` pour les navigateurs.\nJe pense que pour la plupart d’entre vous voudront ajouter \"Explorer 8\" à la liste, mais ça\nn’est en théorie pas nécessaire vu le permier argument qui demande de préfixer tous les navigateurs\ndont l’usage global est supérieur à 1%. Peut-être Explorer 7 pour certains ?\nFaites un tour sur la [page dédié aux statistiques globales sur CanIUse.com](http://caniuse.com/usage_table.php) pour avoir une idée.\n\nSinon, pour du petit one shot, un plugin dans votre éditeur suffira:\n\n- [plugin autoprefixer pour Atom](https://github.com/sindresorhus/atom-autoprefixer)\n- [plugin autoprefixer pour Sublime Text](https://github.com/sindresorhus/sublime-autoprefixer)\n- [plugin autoprefixer pour Brackets](https://github.com/mikaeljorhult/brackets-autoprefixer)\n\n<figure>\n  <img src=\"../autoprefixer.gif\" alt=\"sublime text autoprefixer preview\" />\n  <figcaption>Intégration dans Sublime Text</figcaption>\n</figure>\n\n## Automatisation d’autoprefixer (autoception)\n\nBien entendu on va pas se taper la commande à la main tout le temps hein...\nIl nous faut automatiser nos processus. Sans quoi on perd du temps, et\n[le temps... C’est du temps !](http://deboutlesgens.com/blog/jai-pas-le-temps-la-pire-excuse-qui-soit/)\n\nDonc, comme je l’ai dit précédemment, on peut utiliser _autoprefixer_ avec les solutions\nsuivantes:\n\n- via [Node.js](https://github.com/ai/autoprefixer#nodejs) directement,\n- en plugin [Gulp](https://www.npmjs.org/package/gulp-autoprefixer),\n- en plugin [Grunt](https://github.com/ai/autoprefixer#grunt),\n- via [Compass](https://github.com/ai/autoprefixer#compass),\n- en plugin [Stylus](https://github.com/ai/autoprefixer#stylus),\n- avec [RoR](https://github.com/ai/autoprefixer#ruby-on-rails) ou [Ruby](https://github.com/ai/autoprefixer#ruby),\n- avec l’application [Prepros](https://github.com/ai/autoprefixer#prepros)\n- via [Mincer](https://github.com/ai/autoprefixer#mincer)\n- via [Middleman](https://github.com/ai/autoprefixer#middleman)\n- avec [PHP](https://github.com/ai/autoprefixer#php) (vous avez bien lu)\n\nSi vous avez besoin, je pense que vous trouverez sans trop de problème d’autres\nimplémentations.\n\nCela dit, je vais vous montrer quelques cas d’utilisations:\n\n### Make\n\nLà c’est facile, tout bon développeur doit avoir `make` sur sa machine (sinon\nc’est que t’es pas développeur, je sais pas trop ce que tu fais ici du coup).\n\nOn peut tout simplement créer un fichier `Makefile` avec la commande précédente:\n\n```console\n# création d’un dossier pour notre popote (puis on va dedans...)\n$ mkdir autoprefixer-test && cd autoprefixer-test\n\n# On créer un makefile avec une tâche `css` (création/écrasement via >)\n$ echo \"css:\" > Makefile\n\n# On vérifie qu’on a bien rempli le fichier\n$ cat Makefile\n\n## On ajoute notre commande au fichier (ajout au fichier existant via >>)\n$ echo \"\\tautoprefixer index.css -b \\\"last 2 versions, > 1%, Explorer 7, Android 2\\\" -o prefixed.css\" >> Makefile\n\n# On vérifie qu’on a bien rempli le fichier\n$ cat Makefile\n```\n\nVoilà votre Makefile doit être bien rempli. Pour tester la commande `css`:\n\n```console\n$ make css\n```\n\nVous remarquerez que la commande _autoprefixer_ s’affiche, si ça vous embête, rajoutez\n`@` devant. Vous pouvez modifier votre Makefile dans ce sens:\n\n```\ncss:\n    echo \"❯ Autoprefixage magique.\"\n    @autoprefixer index.css -b \"last 2 versions, > 1%, Explorer 7, Android 2\" -o prefixed.css\n```\n\n_Attention : Les Makefiles utilisent des tabulations uniquement ! Sans quoi cela\nne va pas marcher comme prévu._\n\nVous avez donc maintenant un exemple assez simpliste qui peut être utilisé si\nvous n’avez pas encore [automatisé votre workflow](http://www.24joursdeweb.fr/2013/automatisez-votre-workflow-front-end/)\nvia des outils comme [Gulp](http://gulpjs.com/) ou [Grunt](http://gruntjs.com/).\n\nPassons justement à ces solutions plus sérieuses.\n\n### Autoprefixer avec Gulp\n\nJe ne vais pas trop rentrer dans les détails de Gulp (ce n’est pas le sujet ici).\nVoici cependant une exemple assez bref et compréhensible pour commencer, avec\nune seule écriture sur le système de fichier (contrairement à la solution Grunt).\n\n```js\n// gulp stuff\nvar gulp = require(\"gulp\")\nvar gutil = require(\"gulp-util\")\n  // le plombier ajuste les fuites des tuyaux (erreur de pipe)\n  // ceci est conseillé pour éviter que chaque erreur \"casse\" tout le process\n  // dès qu’une erreur est remonté par un plugin\nvar plumber = require(\"gulp-plumber\")\n\n// css stuff\nvar sass = require(\"gulp-ruby-sass\")\nvar autoprefixer = require(\"gulp-autoprefixer\")\nvar csso = require(\"gulp-csso\")\n\n// css task: sass, autoprefixer et csso si --production\ngulp.task(\"styles\", function() {\n  gulp.src(\"./src/css/*.scss\")\n    // it’s me, Mario\n    .pipe(plumber())\n\n    .pipe(sass({style: \"expanded\"}))\n\n    // Autoprefixer \\\\\n    // vous remarquerez que ici chaque option est un paramètre\n    // pas comme pour l’appel en ligne de commande.\n    .pipe(autoprefixer(\"last 2 versions\", \"> 1%\", \"Explorer 7\", \"Android 2\"))\n\n    // optimisation CSS pour la prod uniquement\n    .pipe(gulp.env.production ? csso() : gutil.noop())\n\n    // unique écriture sur disque\n    .pipe(gulp.dest(\"./dist/css/\"))\n    // je passe sur cette partie à configurer, mais ici on peut imaginer un\n    // livereload en plus, il faudra définir livereload et livereloadServer\n    // cette partie dépend un peu de votre serveur durant le dév.\n    // ca fera l’objet d’un post tiens...\n    //.pipe(livereload(livereloadServer))\n})\n\ngulp.task(\"dev\", [\"styles\"], function() {\n  gulp.watch(\"./src/css/**/*\", function(event) {\n    gulp.run(\"styles\")\n  })\n})\n\n// Tâches disponibles :\n\n// - pour générer les feuilles de styles\n//   (pour optimiser pour la prod, utiliser l’option)\n// $ gulp styles [--production]\n\n// - pour le dev, surveille et lance la tâche `styles` dès que nécessaire\n// $ gulp dev\n```\n\n### Autoprefixer avec Grunt\n\nVoici un petit Gruntfile avec la même configuration que ci dessus\n\n```js\nmodule.exports = function(grunt) {\n  \"use strict\";\n\n  grunt.loadNpmTasks(\"grunt-contrib-sass\")\n  grunt.loadNpmTasks(\"grunt-autoprefixer\")\n  grunt.loadNpmTasks(\"grunt-csso\")\n  grunt.loadNpmTasks(\"grunt-contrib-watch\")\n\n  grunt.initConfig({\n    sass: {\n      dist: {\n        options: {\n          style: \"expanded\"\n        },\n        files: [{\n          expand: true,\n          flatten: true,\n          cwd: \"./src/css\",\n          src: [\"*.scss\"],\n          dest: \"./dist/css\",\n          ext: \".css\"\n        }]\n      }\n    },\n    autoprefixer: {\n      options: {\n        browsers: [\"last 2 versions\", \"> 1%\", \"Explorer 7\", \"Android 2\"]\n      },\n      dist: {\n        expand: true,\n        flatten: true,\n        cwd: \"./dist/css\",\n        src: [\"*.css\"],\n        dest: \"./dist/css/\"\n      }\n    },\n    csso: {\n      dist: {\n        expand: true,\n        flatten: true,\n        cwd: \"./dist/css/\",\n        src: [\"*.css\"],\n        dest: \"./dist/css/\"\n      }\n    },\n    watch: {\n      styles: {\n        files: [\"./src/css/**/*.scss\"],\n        tasks: [\"styles\"]\n      }\n    }\n  })\n\n  grunt.registerTask(\"styles\", [\"sass\", \"autoprefixer\"])\n  grunt.registerTask(\"styles:production\", [\"sass\", \"autoprefixer\", \"csso\"])\n  grunt.registerTask(\"dev\", [\"sass\", \"watch\"])\n}\n\n// Tâches disponibles :\n\n// - pour générer les feuilles de styles\n// $ grunt styles\n\n// - pareil, mais optimiser pour la prod\n// $ grunt styles:production\n\n// - pour le dev, surveille et lance la tâche `styles` dès que nécessaire\n// $ grunt watch\n```\n\nComme vous pouvez le voir, la version Grunt est un peu plus volumineuse (bien qu’espacée).\nPersonnellement j’aime la concision de gulp.\nDe plus la version Grunt sera plus longue car nous aurons 3 lectures / écritures sur le disque.\n\n_Notez que bien entendu dans notre exemple précédent, nous pouvons remplacer Sass\npar un autre pré / post-processeur._\n\n### Autoprefixer avec Stylus\n\nDans les exemples précédents, j’ai montré une solution classique avec Sass.\nMais voici complètement autre chose: _autoprefixer_ peut s’utiliser en \"plugin\" Stylus.\n\nC’est assez simple il suffit d’utiliser l’option `use` (`-u` en cli).\nVoilà ce qu’on aurait en cli :\n\n```console\n$ npm install -g stylus autoprefixer-stylus\n$ stylus -u autoprefixer-stylus -o index.css index.styl\n```\n#### Avec Grunt\n\nIl suffira d’utiliser donc l’option `use` dans votre configuration.\n\n#### ~~Avec Gulp~~\n\nLa façon de faire de gulp, via des streams pour éviter la lecture / écriture multiple fait que le plugin\n_autoprefixer-stylus_ est vide de sens.\nVous pouvez donc utiliser _autoprefixer_ normalement, après l’appel du pré-processeur.\n\n\n---\n\n\nVoilà j’espère que cette fois-ci vous êtes rassasié(e) afin de ne plus avoir envie de manger des préfixes CSS !\n","__filename":"fr/articles/css/autoprefixer/mise-en-place/index.md","__url":"/fr/articles/css/autoprefixer/mise-en-place/","__resourceUrl":"/fr/articles/css/autoprefixer/mise-en-place/index.html","__dataUrl":"/fr/articles/css/autoprefixer/mise-en-place/index.html.50d59cd4d94a2e7f3920356670af5dee.json"}