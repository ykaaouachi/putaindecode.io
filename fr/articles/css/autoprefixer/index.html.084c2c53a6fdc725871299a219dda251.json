{"head":{"layout":"Post","comments":true,"date":"2014-02-25","title":"Comment en finir avec les préfixes CSS","tags":["css","préfixe","pré-processeur","post-processeur"],"authors":["MoOx"],"description":"En mettant de côté le débat trollesque faut-il ou pas des préfixes CSS ? (car avouons-le, ils sont là, il faut faire avec), on ne va pas se…"},"body":"<p>En mettant de côté le débat trollesque <em>faut-il ou pas des préfixes CSS ?</em>\n(car avouons-le, ils sont là, il faut faire avec), on ne va pas se le cacher,\nles préfixes CSS ça nous brise tous les... touches du clavier.\nEh bien oui, sans automatisation on est obligé de se taper des caractères en plus.\nMême avec un IDE correct, on peut faire ça rapidement, mais ça nécessite\npresque à chaque fois une action de notre part.</p>\n<h2 id=\"préfixer-via-des-outils-en-ligne\"><a href=\"#pr%C3%A9fixer-via-des-outils-en-ligne\" class=\"phenomic-HeadingAnchor\">#</a>Préfixer via des outils en ligne</h2>\n<p>Les élèves au fond de la classe me montreront de suite des solutions comme\n<a href=\"http://prefixmycss.com/\">prefixmycss.com</a> ou l'ancien prefixr.\nInopinément, un moche \"Mourrez moi sile vou pler\" sort de mon corps.\nNon, sérieusement, ce n’est pas une façon de faire ça. Aller sur une web app à\nchaque fois que je veux préfixer mes CSS ? Sérieusement ?\nVous avez qu’à aussi faire un service postal où j’envoie mes fichiers CSS dans\nune clé USB et qu’on me renvoie sous 48h avec les préfixes ajoutés.\nSuper pratique.</p>\n<h2 id=\"préfixer-via-javascript\"><a href=\"#pr%C3%A9fixer-via-javascript\" class=\"phenomic-HeadingAnchor\">#</a>Préfixer via JavaScript</h2>\n<p>Une autre solution serait <a href=\"http://leaverou.github.io/prefixfree/\">prefix-free</a>,\nmais je ne vais même pas en parler tellement l’idée de dépendre de JavaScript pour\navoir un <code>border-radius</code> ou une <code>transition</code> CSS me donne une migraine.\nJe vous passe les détails niveau performance. Selon les cas, on pourrait même avoir\nun petit flash visuel sans les propriétés préfixées.\nNon mais flûte. On ne fait pas ça. On n’alourdit pas une page web avec du JavaScript\npour parser la feuille de style et réintégrer des préfixes quoi. Au secours.</p>\n<h2 id=\"préfixer-via-les-pré-processeurs-css\"><a href=\"#pr%C3%A9fixer-via-les-pr%C3%A9-processeurs-css\" class=\"phenomic-HeadingAnchor\">#</a>Préfixer via les pré-processeurs CSS</h2>\n<p>Alors là, j’en entends déjà qui parle à voix haute au milieu de la classe :</p>\n<blockquote>\n<p>Bah lui c’est clair il’connait pas les pré-processeurs CSS le noube</p>\n</blockquote>\n<p>Sans rentrer dans un débat trollesque (encore un), à part peut-être avec <em>Stylus</em> et ces\nmixins transparent (coucou <em><a href=\"http://visionmedia.github.io/nib/\">Nib</a></em>),\non est obligé de rajouter du code.\nAvec <em>Sass</em> il faudra (en scss) rajouter <code>@include</code> et un couple de parenthèse (et\nau passage avoir <em>Compass</em> si on ne veut pas coder les mixins à la main).\nAvec <em>Less</em> il faudra aussi une librairie <em>Less Hat</em> si on n’a pas envie de se taper\ndu mixin qui donne de la nausée comme on peut voir sur la\n<a href=\"http://lesscss.org/\">page d’accueil</a>.</p>\n<h2 id=\"les-préfixes-cest-comme-le-lait-ça-tourne\"><a href=\"#les-pr%C3%A9fixes-cest-comme-le-lait-%C3%A7a-tourne\" class=\"phenomic-HeadingAnchor\">#</a>Les préfixes, c’est comme le lait, ça tourne</h2>\n<p>D’ailleurs, parlons en vite fait de cette page d’accueil qui au jour où j’écris\nce post, comporte <b>en premier exemple</b> un mixin pour <code>box-shadow</code>\n(hashtag ohlol).</p>\n<p>Certaines propriétés comme <code>box-shadow</code>, ou encore <code>border-radius</code>, sont\naujourd’hui préfixées à tort, car comme on peut le voir sur le site de\n<a href=\"http://caniuse.com/\">CanIUse.com</a>, elles n’ont plus vraiment besoin d’être préfixées, à\nmoins que vous supportiez encore Firefox 3.6, Safari iOS 3 ou Android 2...\nJe vous renvoie rapidement sur ce (vieil) article de Chris Coyier\n<a href=\"http://css-tricks.com/do-we-need-box-shadow-prefixes/\">Do we need box-shadow or border-radius prefixes anymore?</a>\nen guise de mémo :)</p>\n<p>Sans être de mauvaise foi, on va vite avouer qu’on ne peut pas forcément tout savoir.\nDonc on ne peut pas être au top pour connaître quand il faut ou quand il n’y a plus\nbesoin de préfixer x ou y (oui bon x et y ne sont pas des propriétés CSS, c’est\npour l’exemple).\nQui sait qu’on peut enfin arrêter de préfixer box-sizing dans Firefox depuis la 29 ?\nOu la 30 je ne sais plus...</p>\n<p>Bon mais alors comment faire ? J’entends les fayots du premier rang parler d’auto...\nauto... AUTOPREFIXER ?!</p>\n<p>MAIS C’EST POSSIBLE ÇA ?</p>\n<p>Bon allons à l’essentiel, assez trollé.</p>\n<h1 id=\"autoprefixer\"><a href=\"#autoprefixer\" class=\"phenomic-HeadingAnchor\">#</a>Autoprefixer</h1>\n<p>Ce magnifique outil, basé sur une solide base de données (au hasard, CanIUse.com),\npermet de préfixer automatiquement vos CSS, et ce, de manière intelligente.\nVous pouvez en effet configurer autoprefixer, afin de lui préciser quel\nnavigateur vous voulez utiliser.\nVous pouvez au choix lui demander de supporter X versions en arrière, les versions\nqui ont un usage global > à Y% de trafic, ou encore une version minimale donnée.</p>\n<p>Voici quelques exemples de configuration.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Je supporte une version en arrière et les navigateurs qui ont plus de 1% de trafic ainsi qu'Internet Explorer 7</span>\nautoprefixer(<span class=\"hljs-string\">\"last 1 version\"</span>, <span class=\"hljs-string\">\"> 1%\"</span>, <span class=\"hljs-string\">\"Explorer 7\"</span>).process(css).css;\n\n<span class=\"hljs-comment\">// Je supporte 2 versions en arrière, et minimum BlackBerry 10 et Android 4</span>\nautoprefixer(<span class=\"hljs-string\">\"last 2 version\"</span>, <span class=\"hljs-string\">\"BlackBerry 10\"</span>, <span class=\"hljs-string\">\"Android 4\"</span>).process(css).css;</code></pre>\n<p>Dans ces lignes de code JavaScript... Quoi attendez c’est en JavaScript ? Oh le\nfourbe, il nous recale sa techno de front-end de mes deux.\nBon faites pas les relous, que vous soyez front-end ou back-end, vous avez Node.js hein ?</p>\n<p>Donc aucune inquiétude, il existe une commande pour que vous puissiez faire ça rapidement :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-comment\"># on install autoprefixer via npm en global</span>\n$ <span class=\"hljs-built_in\">npm</span> install --<span class=\"hljs-built_in\">global</span> autoprefixer\n<span class=\"hljs-comment\"># ou pour les fainéants</span>\n$ <span class=\"hljs-built_in\">npm</span> i -g autoprefixer\n\n<span class=\"hljs-comment\"># on prefixe !</span>\n$ autoprefixer *.css</code></pre>\n<p>Là bon de suite, réflexe, vous me sautez dessus à la gorge en me criant:</p>\n<blockquote>\n<p>NON MAIS T’AS CRU QUE J’ALLAIS TAPER LA COMMANDE À CHAQUE FOIS TOCARD ?</p>\n</blockquote>\n<p>No problem, comme tout outil bien foutu, il y’a une multitudes de façon de\nl’utiliser :</p>\n<ul>\n<li>via <a href=\"https://github.com/ai/autoprefixer#nodejs\">Node.js</a> directement,</li>\n<li>en plugin <a href=\"https://www.npmjs.org/package/gulp-autoprefixer\">Gulp</a>,</li>\n<li>en plugin <a href=\"https://github.com/ai/autoprefixer#grunt\">Grunt</a>,</li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#compass\">Compass</a>,</li>\n<li>en plugin <a href=\"https://github.com/ai/autoprefixer#stylus\">Stylus</a>,</li>\n<li>avec <a href=\"https://github.com/ai/autoprefixer#ruby-on-rails\">RoR</a> ou <a href=\"https://github.com/ai/autoprefixer#ruby\">Ruby</a>,</li>\n<li>avec l’application <a href=\"https://github.com/ai/autoprefixer#prepros\">Prepros</a></li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#mincer\">Mincer</a></li>\n<li>via <a href=\"https://github.com/ai/autoprefixer#middleman\">Middleman</a></li>\n<li>avec <a href=\"https://github.com/ai/autoprefixer#php\">PHP</a> (vous avez bien lu),</li>\n</ul>\n<p>Bien entendu, parfois, lorsqu’on fait un petit bout de CSS standalone,\nvous avez aussi à dispo des plugins pour\n<a href=\"https://github.com/sindresorhus/sublime-autoprefixer\">Sublime Text</a>\nou <a href=\"https://github.com/mikaeljorhult/brackets-autoprefixer\">Brackets</a>\nafin de ne pas forcément avoir à utiliser les app ou process cités juste avant.</p>\n<figure>\n  <img src=\"autoprefixer.gif\" alt=\"sublime text autoprefixer preview\" />\n  <figcaption>Intégration dans Sublime Text</figcaption>\n</figure>\n<p>Cet outil est maintenant basé sur <a href=\"https://github.com/ai/postcss\">PostCSS</a>,\nun post-processeur CSS. Vous pouvez donc l’utiliser en plugin pour ce post-procésseur.</p>\n<p>Attends attends, un WAT ? Un <strong>POST</strong>-processeur ? Oui tu as bien lu car les\npré-processeurs c’est so 2000. Regarde par là <a href=\"/fr/articles/css/preprocesseurs/\">Le point sur les pré-processeurs CSS</a> ;)</p>\n<p>Tout plein de -moz-bisous.</p>\n<hr />\n<p>PS: Convaincu par cette solution ? Tant mieux, elle est simple à mettre en place.\nTout ça est décrit dans la <a href=\"/fr/articles/css/autoprefixer/mise-en-place/\">mise en place d'autoprefixer</a>\navec des exemples concrets pour ajouter ça dans un workflow existant.</p>\n","rawBody":"\nEn mettant de côté le débat trollesque _faut-il ou pas des préfixes CSS ?_\n(car avouons-le, ils sont là, il faut faire avec), on ne va pas se le cacher,\nles préfixes CSS ça nous brise tous les... touches du clavier.\nEh bien oui, sans automatisation on est obligé de se taper des caractères en plus.\nMême avec un IDE correct, on peut faire ça rapidement, mais ça nécessite\npresque à chaque fois une action de notre part.\n\n## Préfixer via des outils en ligne\n\nLes élèves au fond de la classe me montreront de suite des solutions comme\n[prefixmycss.com](http://prefixmycss.com/) ou l'ancien prefixr.\nInopinément, un moche \"Mourrez moi sile vou pler\" sort de mon corps.\nNon, sérieusement, ce n’est pas une façon de faire ça. Aller sur une web app à\nchaque fois que je veux préfixer mes CSS ? Sérieusement ?\nVous avez qu’à aussi faire un service postal où j’envoie mes fichiers CSS dans\nune clé USB et qu’on me renvoie sous 48h avec les préfixes ajoutés.\nSuper pratique.\n\n## Préfixer via JavaScript\n\nUne autre solution serait [prefix-free](http://leaverou.github.io/prefixfree/),\nmais je ne vais même pas en parler tellement l’idée de dépendre de JavaScript pour\navoir un `border-radius` ou une `transition` CSS me donne une migraine.\nJe vous passe les détails niveau performance. Selon les cas, on pourrait même avoir\nun petit flash visuel sans les propriétés préfixées.\nNon mais flûte. On ne fait pas ça. On n’alourdit pas une page web avec du JavaScript\npour parser la feuille de style et réintégrer des préfixes quoi. Au secours.\n\n## Préfixer via les pré-processeurs CSS\n\nAlors là, j’en entends déjà qui parle à voix haute au milieu de la classe :\n\n> Bah lui c’est clair il’connait pas les pré-processeurs CSS le noube\n\nSans rentrer dans un débat trollesque (encore un), à part peut-être avec _Stylus_ et ces\nmixins transparent (coucou _[Nib](http://visionmedia.github.io/nib/)_),\non est obligé de rajouter du code.\nAvec _Sass_ il faudra (en scss) rajouter `@include` et un couple de parenthèse (et\nau passage avoir _Compass_ si on ne veut pas coder les mixins à la main).\nAvec _Less_ il faudra aussi une librairie _Less Hat_ si on n’a pas envie de se taper\ndu mixin qui donne de la nausée comme on peut voir sur la\n[page d’accueil](http://lesscss.org/).\n\n## Les préfixes, c’est comme le lait, ça tourne\n\nD’ailleurs, parlons en vite fait de cette page d’accueil qui au jour où j’écris\nce post, comporte <b>en premier exemple</b> un mixin pour `box-shadow`\n(hashtag ohlol).\n\nCertaines propriétés comme `box-shadow`, ou encore `border-radius`, sont\naujourd’hui préfixées à tort, car comme on peut le voir sur le site de\n[CanIUse.com](http://caniuse.com/), elles n’ont plus vraiment besoin d’être préfixées, à\nmoins que vous supportiez encore Firefox 3.6, Safari iOS 3 ou Android 2...\nJe vous renvoie rapidement sur ce (vieil) article de Chris Coyier\n[Do we need box-shadow or border-radius prefixes anymore?](http://css-tricks.com/do-we-need-box-shadow-prefixes/)\nen guise de mémo :)\n\nSans être de mauvaise foi, on va vite avouer qu’on ne peut pas forcément tout savoir.\nDonc on ne peut pas être au top pour connaître quand il faut ou quand il n’y a plus\nbesoin de préfixer x ou y (oui bon x et y ne sont pas des propriétés CSS, c’est\npour l’exemple).\nQui sait qu’on peut enfin arrêter de préfixer box-sizing dans Firefox depuis la 29 ?\nOu la 30 je ne sais plus...\n\nBon mais alors comment faire ? J’entends les fayots du premier rang parler d’auto...\nauto... AUTOPREFIXER ?!\n\nMAIS C’EST POSSIBLE ÇA ?\n\nBon allons à l’essentiel, assez trollé.\n\n\n# Autoprefixer\n\nCe magnifique outil, basé sur une solide base de données (au hasard, CanIUse.com),\npermet de préfixer automatiquement vos CSS, et ce, de manière intelligente.\nVous pouvez en effet configurer autoprefixer, afin de lui préciser quel\nnavigateur vous voulez utiliser.\nVous pouvez au choix lui demander de supporter X versions en arrière, les versions\nqui ont un usage global > à Y% de trafic, ou encore une version minimale donnée.\n\nVoici quelques exemples de configuration.\n\n```js\n// Je supporte une version en arrière et les navigateurs qui ont plus de 1% de trafic ainsi qu'Internet Explorer 7\nautoprefixer(\"last 1 version\", \"> 1%\", \"Explorer 7\").process(css).css;\n\n// Je supporte 2 versions en arrière, et minimum BlackBerry 10 et Android 4\nautoprefixer(\"last 2 version\", \"BlackBerry 10\", \"Android 4\").process(css).css;\n```\n\nDans ces lignes de code JavaScript... Quoi attendez c’est en JavaScript ? Oh le\nfourbe, il nous recale sa techno de front-end de mes deux.\nBon faites pas les relous, que vous soyez front-end ou back-end, vous avez Node.js hein ?\n\nDonc aucune inquiétude, il existe une commande pour que vous puissiez faire ça rapidement :\n\n```console\n# on install autoprefixer via npm en global\n$ npm install --global autoprefixer\n# ou pour les fainéants\n$ npm i -g autoprefixer\n\n# on prefixe !\n$ autoprefixer *.css\n```\n\nLà bon de suite, réflexe, vous me sautez dessus à la gorge en me criant:\n\n> NON MAIS T’AS CRU QUE J’ALLAIS TAPER LA COMMANDE À CHAQUE FOIS TOCARD ?\n\nNo problem, comme tout outil bien foutu, il y’a une multitudes de façon de\nl’utiliser :\n\n- via [Node.js](https://github.com/ai/autoprefixer#nodejs) directement,\n- en plugin [Gulp](https://www.npmjs.org/package/gulp-autoprefixer),\n- en plugin [Grunt](https://github.com/ai/autoprefixer#grunt),\n- via [Compass](https://github.com/ai/autoprefixer#compass),\n- en plugin [Stylus](https://github.com/ai/autoprefixer#stylus),\n- avec [RoR](https://github.com/ai/autoprefixer#ruby-on-rails) ou [Ruby](https://github.com/ai/autoprefixer#ruby),\n- avec l’application [Prepros](https://github.com/ai/autoprefixer#prepros)\n- via [Mincer](https://github.com/ai/autoprefixer#mincer)\n- via [Middleman](https://github.com/ai/autoprefixer#middleman)\n- avec [PHP](https://github.com/ai/autoprefixer#php) (vous avez bien lu),\n\nBien entendu, parfois, lorsqu’on fait un petit bout de CSS standalone,\nvous avez aussi à dispo des plugins pour\n[Sublime Text](https://github.com/sindresorhus/sublime-autoprefixer)\n ou [Brackets](https://github.com/mikaeljorhult/brackets-autoprefixer)\n afin de ne pas forcément avoir à utiliser les app ou process cités juste avant.\n\n<figure>\n  <img src=\"autoprefixer.gif\" alt=\"sublime text autoprefixer preview\" />\n  <figcaption>Intégration dans Sublime Text</figcaption>\n</figure>\n\nCet outil est maintenant basé sur [PostCSS](https://github.com/ai/postcss),\nun post-processeur CSS. Vous pouvez donc l’utiliser en plugin pour ce post-procésseur.\n\nAttends attends, un WAT ? Un **POST**-processeur ? Oui tu as bien lu car les\npré-processeurs c’est so 2000. Regarde par là [Le point sur les pré-processeurs CSS](/fr/articles/css/preprocesseurs/) ;)\n\nTout plein de -moz-bisous.\n\n<hr />\n\nPS: Convaincu par cette solution ? Tant mieux, elle est simple à mettre en place.\nTout ça est décrit dans la [mise en place d'autoprefixer](/fr/articles/css/autoprefixer/mise-en-place/)\navec des exemples concrets pour ajouter ça dans un workflow existant.\n","__filename":"fr/articles/css/autoprefixer/index.md","__url":"/fr/articles/css/autoprefixer/","__resourceUrl":"/fr/articles/css/autoprefixer/index.html","__dataUrl":"/fr/articles/css/autoprefixer/index.html.084c2c53a6fdc725871299a219dda251.json"}