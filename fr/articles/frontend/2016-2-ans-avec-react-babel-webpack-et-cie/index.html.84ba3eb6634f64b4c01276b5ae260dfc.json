{"head":{"layout":"Post","comments":true,"date":"2016-12-01","title":"2 ans avec React, Babel, Webpack et cie","tags":["JavaScript","react","es6"],"authors":["revolunet"],"reviewers":["ooflorent","bloodyowl","MoOx","lionelB","Nyalab"],"header":{"credit":"https://www.flickr.com/photos/billyrichards"},"description":"Depuis fin 2014, et un virage radical vers l'écosystème React, j'ai eu l'occasion de mener plusieurs projets (applis pros,…"},"body":"<p>Depuis fin 2014, et un virage radical vers l'écosystème React, j'ai eu\nl'occasion de mener plusieurs projets (applis pros, mobiles/hybrides, sites\nweb...) sur cette stack : React, Webpack, Babel, npm...</p>\n<p>Ces deux années ont été très prolifiques dans la communauté JavaScript et React,\nle tooling est encore parfois exotique, mais il se stabilise et de gros progrès\nont été faits sur la documentation.</p>\n<p><strong>Nous disposons maintenant d'un écosystème incroyablement riche et dynamique,\net d'un paradigme \"universel\" pour construire les applications de demain, web ou\nnatives.</strong></p>\n<p>React est la bibliothèque de facto pour ce type d'applications, mais on peut le\nremplacer assez facilement par une alternative comme\n<a href=\"https://preactjs.com/\">Preact</a> ou <a href=\"http://infernojs.org/\">Inferno</a>, donc toutes\nles connaissances acquises sur cette bibliothèque <strong>et son écosystème</strong> sont\nexploitables ailleurs dans la communauté JavaScript.</p>\n<p>Voici un petit recap de cette stack magique :)</p>\n<h2 id=\"tldr\"><a href=\"#tldr\" class=\"phenomic-HeadingAnchor\">#</a>TL;DR;</h2>\n<p>React en lui-même est le plus simple à appréhender dans cette stack.</p>\n<p>Son écosystème, riche et évolutif, l'est moins.</p>\n<h2 id=\"babeles2015\"><a href=\"#babeles2015\" class=\"phenomic-HeadingAnchor\">#</a>Babel/ES2015</h2>\n<p><img src=\"/assets/babel.png\"></p>\n<h3 id=\"use-next-generation-javascript-today\"><a href=\"#use-next-generation-javascript-today\" class=\"phenomic-HeadingAnchor\">#</a>Use next generation JavaScript, today.</h3>\n<p>La communauté JavaScript a massivement adopté le transpileur Babel, qui permet\nde coder en JavaScript version ES2015 ou supérieure puis de convertir en code\ncompatible avec les navigateurs du marché.</p>\n<p>Pour apprendre ES2015 et plus :</p>\n<ul>\n<li><a href=\"http://putaindecode.io/fr/tag/ES6\">articles sur putaindecode.io</a></li>\n<li>exercices en ligne : <a href=\"http://es6katas.org\">es6katas.org</a></li>\n<li>tutorial Babel : <a href=\"http://babeljs.io/docs/learn-es2015\">babeljs.io</a>  </li>\n<li>comparaisons ES5/ES2015 :\n<a href=\"http://es6-features.org/#BlockScopedVariables\">es6-features.org</a></li>\n</ul>\n<p>Vous pouvez très bien faire de l'ES2015 sans Babel, puisque <a href=\"https://kangax.github.io/compat-table/es6/\">les navigateurs\nmodernes en supportent une grande\npartie</a>, mais le support est inégal,\nd'où l'idée d'utiliser un transpileur comme Babel qui convertit en ES5.</p>\n<p>Le format JSX, est devenu un standard qui peut simplifier le développement :</p>\n<ul>\n<li>il permet de centraliser la présentation et la logique d'un composant au même\nendroit</li>\n<li>d'utiliser une syntaxe XML-like plus rigoureuse, mais bénéfique</li>\n<li>d'utiliser du JavaScript pur au lieu d'un pseudo-langage comme on trouve dans\nles moteurs de template habituels</li>\n</ul>\n<p>Ça peut paraître déroutant au début mais ça rentre vite !</p>\n<p>Plus d'infos sur JSX dans <a href=\"https://facebook.github.io/react/docs/introducing-jsx.html\">Introducing\nJSX</a> sur la doc\nReact.</p>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"phenomic-HeadingAnchor\">#</a>npm</h2>\n<p><img src=\"/assets/npm.png\"></p>\n<p>Quel que soit votre besoin, il y a sûrement déjà un module npm pour ça :)</p>\n<p>Pour bien choisir vos packages, regardez l'activité du projet sur GitHub\n(commits, issues, tests, contributeurs...)</p>\n<h3 id=\"moins-de-code-cest-moins-de-bugs\"><a href=\"#moins-de-code-cest-moins-de-bugs\" class=\"phenomic-HeadingAnchor\">#</a>Moins de code c'est moins de bugs</h3>\n<p>Votre appli doit utiliser un maximum de code externe, qui est déjà validé,\ntesté... séparément. Publiez un maximum de modules indépendants, en open source\nsi possible, et utilisables hors-contexte (<a href=\"https://addyosmani.com/first/\">FIRST\nprinciple</a>).</p>\n<p>Ceci implique de suivre les corrections/évolutions des dits modules et\nd'utiliser le <a href=\"https://docs.npmjs.com/getting-started/semantic-versioning\">semantic\nversioning</a> à bon\nescient.</p>\n<p>NB: Dans sa lancée open-source, Facebook vient de publier une alternative au CLI\nnpm : <a href=\"http://yarnpkg.org\">yarn</a> plus rapide, fiable et sécurisé.</p>\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"phenomic-HeadingAnchor\">#</a>Webpack</h2>\n<p><img src=\"/assets/webpack.png\"></p>\n<h3 id=\"le-saviez-vous-\"><a href=\"#le-saviez-vous-\" class=\"phenomic-HeadingAnchor\">#</a>Le saviez-vous ?</h3>\n<p>Webpack a coûté aux devs <strong>2.312.533 heures</strong> en 2015. Par jour.</p>\n<h3 id=\"un-grand-pouvoir-implique-de-grandes-responsabilités\"><a href=\"#un-grand-pouvoir-implique-de-grandes-responsabilit%C3%A9s\" class=\"phenomic-HeadingAnchor\">#</a>Un grand pouvoir implique de grandes responsabilités</h3>\n<p>Webpack est puissant, il remplace browserify ou vos multiples tâches grunt,\ngulp, blurp... qui géraient votre pipeline d'assets.</p>\n<p>À partir du point d'entrée de votre application uniquement, par exemple\n<code>index.js</code>, il est capable de servir et bundler toutes les dépendances (code,\nimages, CSS...) de votre projet automatiquement, grâce aux nombreux\n<a href=\"https://webpack.github.io/docs/loaders.html\">loaders</a>.</p>\n<p>Pour cela, les assets doivent être correctement déclarés dans le code :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// require some CSS</span>\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./styles.css'</span>\n<span class=\"hljs-keyword\">const</span> ex1 = <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">styles.title</span> }></span>title<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n\n<span class=\"hljs-comment\">// require an image</span>\n<span class=\"hljs-keyword\">import</span> logo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./logo.png'</span>\n<span class=\"hljs-keyword\">const</span> img = <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">logo</span> } /></span></span></code></pre>\n<p>Et la célèbre <a href=\"https://webpack.js.org/configuration/\">config de webpack</a> permet\nde tuner votre build à tous les niveaux.</p>\n<p>Plus de détails sur Webpack sur <a href=\"http://putaindecode.io/fr/tag/webpack\">les articles Putain de code !\ndédiés</a>.</p>\n<h2 id=\"css\"><a href=\"#css\" class=\"phenomic-HeadingAnchor\">#</a>CSS</h2>\n<p><img src=\"/assets/css-modules.png\"></p>\n<h3 id=\"le-saviez-vous--1\"><a href=\"#le-saviez-vous--1\" class=\"phenomic-HeadingAnchor\">#</a>Le saviez-vous ?</h3>\n<p>Le CSS est un sport de haut niveau.</p>\n<h3 id=\"css-in-2016\"><a href=\"#css-in-2016\" class=\"phenomic-HeadingAnchor\">#</a>CSS in 2016</h3>\n<p>Selon la complexité de vos designs, le CSS peut être ce qui prend le plus de\ntemps, entre l'intégration, le responsive, et les animations.</p>\n<p>Et la qualité et la modularité du CSS est essentielle pour la maintenabilité des\napplications.</p>\n<p>Pour créer des composants réutilisables nous pouvons maintenant utiliser les\n<a href=\"https://github.com/css-modules/css-modules\">CSS modules</a>, qui ont l'avantage\nd'être du CSS classique, mais d'être scopés aux composants, et, accessibles\ndepuis le JavaScript (plus de CSS global). Et le <a href=\"https://youtu.be/WyFGfMFjfH4?t=26m23s\">CSS in\nJS</a> peut compléter/remplacer si besoin\npour les cas les plus dynamiques.</p>\n<p>A défaut, vous pouvez toujours utiliser du CSS global si vous respectez\nscrupuleusement les <a href=\"http://putaindecode.io/fr/articles/css/bem/\">conventions\nBEM</a>. Découvrez d'autres <a href=\"http://putaindecode.io/fr/tag/css\">articles\ndédiés au CSS sur putaindecode.io</a>.</p>\n<p>Il existe plusieurs bibliothèques de composants UI assez fournies pour React :</p>\n<ul>\n<li><a href=\"http://jxnblk.com/rebass/\">rebass</a></li>\n<li><a href=\"http://ant.design\">ant.design</a></li>\n<li><a href=\"http://semantic-ui.com\">semantic-ui</a></li>\n<li><a href=\"http://react-toolbox.com/\">react-toolbox</a></li>\n<li><a href=\"http://blueprintjs.com\">blueprintjs</a></li>\n</ul>\n<p>Et voici un article recensant des <a href=\"http://davidwells.io/19-open-source-react-component-libraries-to-use-in-your-next-project/\">librairies de composants React\nopen-source</a>.</p>\n<h2 id=\"react--learn-once-run-everywhere\"><a href=\"#react--learn-once-run-everywhere\" class=\"phenomic-HeadingAnchor\">#</a>React : Learn once, run everywhere</h2>\n<p><img src=\"/assets/react.png\"></p>\n<p>Plus qu'une bibliothèque ou un framework, React est un paradigme de\nprogrammation d'interfaces utilisateurs, qui permet d'adresser de nombreuses\nplateformes, avec toujours du code React \"standard\".</p>\n<p>Théoriquement, une application codée en React est capable de produire n'importe\nquel output, par exemple du HTML pour le web, du natif avec\n<a href=\"https://facebook.github.io/react-native/\">react-native</a>, du\n<a href=\"https://github.com/ProjectSeptemberInc/gl-react\">WebGL</a>, du\n<a href=\"https://github.com/Yomguithereal/react-blessed\">terminal</a>, de la\n<a href=\"https://github.com/FormidableLabs/react-music\">musique</a>...</p>\n<p>Et pour toutes ces targets, une convention générale s'applique :</p>\n<pre><code style=\"font-size:2em\">ui = f(state)</pre></code>\n<p>À tout moment, à partir un <code>state</code> donné, une application ou un composant React\nest capable de se \"render\" correctement dans l'état désiré.</p>\n<p>Le fonctionnement interne est donc plutôt straightforward, les composants se\npassent simplement des <code>props</code> (valeurs et callbacks) de parent à enfant, et\ncertains composants peuvent avoir un <code>state</code> local qui, une fois modifié,\ndéclenchera un re-render du composant et de ses descendants.</p>\n<p>Les composants doivent être simples, focus, composables.</p>\n<pre><code class=\"hljs language-js\">&#x3C;Toolbar>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Icon</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"success\"</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">onClickSuccess</span> } /></span>\n  </span>&#x3C;Menu>\n    &#x3C;Icon name=\"warning\" onClick={ onClickWarning } />\n    &#x3C;Icon name=\"error\" onClick={ onClickError } />\n  &#x3C;/Menu>\n&#x3C;/Toolbar></code></pre>\n<p>Au niveau performances, React ne fait pas de miracles malgré le\n<a href=\"http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/\">virtual-dom</a>;</p>\n<p>À chaque fois qu'un composant reçoit de nouvelles props ou modifie son state,\nReact appelle la méthode <code>render</code> de ce dernier ainsi que de ces descendants.\nMême s'il ne modifie pas le DOM, le fait de comparer les deux arbres retournés\npar render peut s'avérer coûteux si votre composant présente beaucoup de\ncontenu. Heureusement, React permet aux développeurs d'intervenir avant le\nrender et l'annuler s'il n'est pas nécessaire avec <code>shouldComponentUpdate</code>.</p>\n<p>Plus d'<a href=\"http://putaindecode.io/fr/tag/react\">articles sur React sur putain de\ncode</a></p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"phenomic-HeadingAnchor\">#</a>Redux</h2>\n<p><a href=\"https://css-tricks.com/learning-react-redux/\"><img src=\"react-redux-csstricks.png\" alt=\"React standard VS redux architecture (from\ncss-tricks.com)\"></a></p>\n<p>Pour les applications plus complexes, <a href=\"http://reduxjs.org\">redux</a> va gèrer\nl'état de l'application de manière globale et externe aux composants,\nstandardiser les évènements (actions), gérer les re-renders, et permettre\nd'aller vers des <a href=\"https://github.com/markerikson/redux-ecosystem-links\">interactions plus\navancées</a>.</p>\n<p>Idéalement, <a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.j9rp2pr98\">tous vos composants sont\ndumbs</a>\net votre gestionnaire de state (par exemple redux) va gérer l'intelligence de\nl'application et les re-renders de manière découplée et optimisée.</p>\n<p>Plus d'articles sur redux sur Putain de code ! :\n<a href=\"http://putaindecode.io/fr/tag/redux/\">http://putaindecode.io/fr/tag/redux/</a></p>\n<h2 id=\"tips\"><a href=\"#tips\" class=\"phenomic-HeadingAnchor\">#</a>Tips</h2>\n<h3 id=\"storybook\"><a href=\"#storybook\" class=\"phenomic-HeadingAnchor\">#</a>Storybook</h3>\n<p>Utiliser un outil comme\n<a href=\"https://github.com/storybooks/react-storybook\">storybook</a> permet de travailler\nsur les composants hors-contexte, de pouvoir les visualiser dans différents\nétats pendant que vous travaillez... et ainsi d'avoir une base saine de\ncomposants réutilisables.</p>\n<p>Votre bibliothèque de composants peut même être un projet à part, que vous\nimporterez dans vos différentes applications. Par exemple, Cloudflare publie\nséparément <a href=\"https://github.com/cloudflare/cf-ui\">tous ses composants UI réutilisables</a>.</p>\n<h3 id=\"composition\"><a href=\"#composition\" class=\"phenomic-HeadingAnchor\">#</a>Composition</h3>\n<p>Utilisez au maximum la composition de composants React pour garder des\ncomposants simples et réutilisables.</p>\n<p>Plus de détails sur le <a href=\"http://putaindecode.io/fr/articles/js/react/higher-order-component\">pattern \"higher order\ncomponents\"</a></p>\n<h3 id=\"nvm\"><a href=\"#nvm\" class=\"phenomic-HeadingAnchor\">#</a>nvm</h3>\n<p>Utilisez <a href=\"https://github.com/creationix/nvm\">Node Version Manager</a> aka nvm qui\npermet de gérer plusieurs environnements Node.js sur une même machine.\nIndispensable pour travailler sur plusieurs projets.</p>\n<h3 id=\"learning-curve\"><a href=\"#learning-curve\" class=\"phenomic-HeadingAnchor\">#</a>Learning curve</h3>\n<p>Concentrez-vous sur une techno/outil à la fois et n'utilisez pas ce dont vous\nn'avez pas encore besoin.</p>\n<blockquote>\n<p>Make it work, make it right, make it fast.</p>\n</blockquote>\n<h2 id=\"comment-démarrer-\"><a href=\"#comment-d%C3%A9marrer-\" class=\"phenomic-HeadingAnchor\">#</a>Comment démarrer ?</h2>\n<p>Pour créer une application, le plus simple est d'utiliser\n<a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a>.</p>\n<p>Si c'est pour créer un composant React que vous allez publier, alors\n<a href=\"https://github.com/insin/nwb\">nwb</a> est plus adapté.</p>\n<p>Pour créer un site web comme <a href=\"http://putaindecode.io\">putaindecode.io</a> vous\npouvez utiliser un générateur de site statique comme\n<a href=\"http://phenomic.io\">phenomic.io</a>.</p>\n<h2 id=\"pourquoi-cest-si-complexe-\"><a href=\"#pourquoi-cest-si-complexe-\" class=\"phenomic-HeadingAnchor\">#</a>Pourquoi c'est si complexe ?</h2>\n<p>Cette stack, qui peut paraître lourde en outillage, permet de créer des apps\nriches, performantes, testables, évolutives, multi-plateformes.</p>\n<p>Une fois l'outillage en place et assimilé, la productivité est excellente\n(ES2015, npm, tests, developer experience, dev/build/deploy...).</p>\n<p>Dans la plupart des cas, les boilerplates cités ci-dessus vous fournissent tout\nle nécessaire.</p>\n<h2 id=\"must-read-and-watch\"><a href=\"#must-read-and-watch\" class=\"phenomic-HeadingAnchor\">#</a>Must read and watch</h2>\n<ul>\n<li><a href=\"https://facebook.github.io/react/tutorial/tutorial.html\">Intro to React</a></li>\n<li>Free videos\n<a href=\"https://egghead.io/courses/react-fundamentals\">egghead.io/react-fundamentals</a></li>\n<li>Free videos\n<a href=\"https://egghead.io/courses/getting-started-with-redux\">egghead.io/getting-started-with-redux</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367#.8swndjba2\">You might not need\nredux</a></li>\n<li><a href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.v583rvea1\">Smart VS dumb\ncomponents</a></li>\n<li><a href=\"http://putaindecode.io/fr/articles/js/react/higher-order-component/\">Les patterns Provider &#x26; Higher-Order Component avec\nReact</a></li>\n<li><a href=\"https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.t74wxicu0\">React higher components in\ndepth</a></li>\n</ul>\n<h2 id=\"liens\"><a href=\"#liens\" class=\"phenomic-HeadingAnchor\">#</a>Liens</h2>\n<blockquote>\n<p>Quelques pépites</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a> :\nCLI complet pour faire une application react</li>\n<li><a href=\"https://github.com/insin/nwb\">nwb</a> : CLI complet faire un composant react\n(dev,build,demo,tests,npm...)</li>\n<li><a href=\"https://github.com/andreypopp/react-css-components\">react-css-components</a> :\ncréer des composants React à partir de CSS</li>\n<li><a href=\"https://github.com/markerikson/redux-ecosystem-links\">redux-ecosystem-links</a></li>\n<li><a href=\"https://docs.npmjs.com/misc/scripts\">npm scripts docs</a></li>\n<li><a href=\"https://github.com/ngokevin/aframe-react\">aframe-react</a> : Build VR\nexperiences with A-Frame and React</li>\n<li><a href=\"http://reactpatterns.com\">reactpatterns.com</a> : quelques patterns react</li>\n<li><a href=\"http://phenomic.io\">phenomic.io</a> : react-based static site generator</li>\n<li><a href=\"http://jsbooks.revolunet.com\">jsbooks.revolunet.com</a> : free JavaScript\nebooks</li>\n</ul>\n","rawBody":"\nDepuis fin 2014, et un virage radical vers l'écosystème React, j'ai eu\nl'occasion de mener plusieurs projets (applis pros, mobiles/hybrides, sites\nweb...) sur cette stack : React, Webpack, Babel, npm...\n\nCes deux années ont été très prolifiques dans la communauté JavaScript et React,\nle tooling est encore parfois exotique, mais il se stabilise et de gros progrès\nont été faits sur la documentation.\n\n**Nous disposons maintenant d'un écosystème incroyablement riche et dynamique,\net d'un paradigme \"universel\" pour construire les applications de demain, web ou\nnatives.**\n\nReact est la bibliothèque de facto pour ce type d'applications, mais on peut le\nremplacer assez facilement par une alternative comme\n[Preact](https://preactjs.com/) ou [Inferno](http://infernojs.org/), donc toutes\nles connaissances acquises sur cette bibliothèque **et son écosystème** sont\nexploitables ailleurs dans la communauté JavaScript.\n\nVoici un petit recap de cette stack magique :)\n\n## TL;DR;\n\nReact en lui-même est le plus simple à appréhender dans cette stack.\n\nSon écosystème, riche et évolutif, l'est moins.\n\n## Babel/ES2015\n\n![](/assets/babel.png)\n\n### Use next generation JavaScript, today.\n\nLa communauté JavaScript a massivement adopté le transpileur Babel, qui permet\nde coder en JavaScript version ES2015 ou supérieure puis de convertir en code\ncompatible avec les navigateurs du marché.\n\nPour apprendre ES2015 et plus :\n  - [articles sur putaindecode.io](http://putaindecode.io/fr/tag/ES6)\n  - exercices en ligne : [es6katas.org](http://es6katas.org)\n  - tutorial Babel : [babeljs.io](http://babeljs.io/docs/learn-es2015)  \n  - comparaisons ES5/ES2015 :\n[es6-features.org](http://es6-features.org/#BlockScopedVariables)\n\nVous pouvez très bien faire de l'ES2015 sans Babel, puisque [les navigateurs\nmodernes en supportent une grande\npartie](https://kangax.github.io/compat-table/es6/), mais le support est inégal,\nd'où l'idée d'utiliser un transpileur comme Babel qui convertit en ES5.\n\nLe format JSX, est devenu un standard qui peut simplifier le développement :\n\n - il permet de centraliser la présentation et la logique d'un composant au même\nendroit\n - d'utiliser une syntaxe XML-like plus rigoureuse, mais bénéfique\n - d'utiliser du JavaScript pur au lieu d'un pseudo-langage comme on trouve dans\nles moteurs de template habituels\n\nÇa peut paraître déroutant au début mais ça rentre vite !\n\nPlus d'infos sur JSX dans [Introducing\nJSX](https://facebook.github.io/react/docs/introducing-jsx.html) sur la doc\nReact.\n\n## npm\n\n![](/assets/npm.png)\n\nQuel que soit votre besoin, il y a sûrement déjà un module npm pour ça :)\n\nPour bien choisir vos packages, regardez l'activité du projet sur GitHub\n(commits, issues, tests, contributeurs...)\n\n### Moins de code c'est moins de bugs\n\nVotre appli doit utiliser un maximum de code externe, qui est déjà validé,\ntesté... séparément. Publiez un maximum de modules indépendants, en open source\nsi possible, et utilisables hors-contexte ([FIRST\nprinciple](https://addyosmani.com/first/)).\n\nCeci implique de suivre les corrections/évolutions des dits modules et\nd'utiliser le [semantic\nversioning](https://docs.npmjs.com/getting-started/semantic-versioning) à bon\nescient.\n\nNB: Dans sa lancée open-source, Facebook vient de publier une alternative au CLI\nnpm : [yarn](http://yarnpkg.org) plus rapide, fiable et sécurisé.\n\n\n## Webpack\n\n![](/assets/webpack.png)\n\n### Le saviez-vous ?\n\nWebpack a coûté aux devs **2.312.533 heures** en 2015. Par jour.\n\n### Un grand pouvoir implique de grandes responsabilités\n\nWebpack est puissant, il remplace browserify ou vos multiples tâches grunt,\ngulp, blurp... qui géraient votre pipeline d'assets.\n\nÀ partir du point d'entrée de votre application uniquement, par exemple\n`index.js`, il est capable de servir et bundler toutes les dépendances (code,\nimages, CSS...) de votre projet automatiquement, grâce aux nombreux\n[loaders](https://webpack.github.io/docs/loaders.html).\n\nPour cela, les assets doivent être correctement déclarés dans le code :\n\n```js\n// require some CSS\nimport styles from './styles.css'\nconst ex1 = <div className={ styles.title }>title</div>\n\n// require an image\nimport logo from './logo.png'\nconst img = <img src={ logo } />\n```\n\nEt la célèbre [config de webpack](https://webpack.js.org/configuration/) permet\nde tuner votre build à tous les niveaux.\n\nPlus de détails sur Webpack sur [les articles Putain de code !\ndédiés](http://putaindecode.io/fr/tag/webpack).\n\n## CSS\n\n![](/assets/css-modules.png)\n\n### Le saviez-vous ?\n\nLe CSS est un sport de haut niveau.\n\n### CSS in 2016\n\nSelon la complexité de vos designs, le CSS peut être ce qui prend le plus de\ntemps, entre l'intégration, le responsive, et les animations.\n\nEt la qualité et la modularité du CSS est essentielle pour la maintenabilité des\napplications.\n\nPour créer des composants réutilisables nous pouvons maintenant utiliser les\n[CSS modules](https://github.com/css-modules/css-modules), qui ont l'avantage\nd'être du CSS classique, mais d'être scopés aux composants, et, accessibles\ndepuis le JavaScript (plus de CSS global). Et le [CSS in\nJS](https://youtu.be/WyFGfMFjfH4?t=26m23s) peut compléter/remplacer si besoin\npour les cas les plus dynamiques.\n\nA défaut, vous pouvez toujours utiliser du CSS global si vous respectez\nscrupuleusement les [conventions\nBEM](http://putaindecode.io/fr/articles/css/bem/). Découvrez d'autres [articles\ndédiés au CSS sur putaindecode.io](http://putaindecode.io/fr/tag/css).\n\nIl existe plusieurs bibliothèques de composants UI assez fournies pour React :\n\n - [rebass](http://jxnblk.com/rebass/)\n - [ant.design](http://ant.design)\n - [semantic-ui](http://semantic-ui.com)\n - [react-toolbox](http://react-toolbox.com/)\n - [blueprintjs](http://blueprintjs.com)\n\nEt voici un article recensant des [librairies de composants React\nopen-source](http://davidwells.io/19-open-source-react-component-libraries-to-use-in-your-next-project/).\n\n## React : Learn once, run everywhere\n\n![](/assets/react.png)\n\nPlus qu'une bibliothèque ou un framework, React est un paradigme de\nprogrammation d'interfaces utilisateurs, qui permet d'adresser de nombreuses\nplateformes, avec toujours du code React \"standard\".\n\nThéoriquement, une application codée en React est capable de produire n'importe\nquel output, par exemple du HTML pour le web, du natif avec\n[react-native](https://facebook.github.io/react-native/), du\n[WebGL](https://github.com/ProjectSeptemberInc/gl-react), du\n[terminal](https://github.com/Yomguithereal/react-blessed), de la\n[musique](https://github.com/FormidableLabs/react-music)...\n\nEt pour toutes ces targets, une convention générale s'applique :\n\n<pre><code style=\"font-size:2em\">ui = f(state)</pre></code>\n\nÀ tout moment, à partir un `state` donné, une application ou un composant React\nest capable de se \"render\" correctement dans l'état désiré.\n\nLe fonctionnement interne est donc plutôt straightforward, les composants se\npassent simplement des `props` (valeurs et callbacks) de parent à enfant, et\ncertains composants peuvent avoir un `state` local qui, une fois modifié,\ndéclenchera un re-render du composant et de ses descendants.\n\nLes composants doivent être simples, focus, composables.\n\n```js\n<Toolbar>\n  <Icon name=\"success\" onClick={ onClickSuccess } />\n  <Menu>\n    <Icon name=\"warning\" onClick={ onClickWarning } />\n    <Icon name=\"error\" onClick={ onClickError } />\n  </Menu>\n</Toolbar>\n```\n\nAu niveau performances, React ne fait pas de miracles malgré le\n[virtual-dom](http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/);\n\nÀ chaque fois qu'un composant reçoit de nouvelles props ou modifie son state,\nReact appelle la méthode `render` de ce dernier ainsi que de ces descendants.\nMême s'il ne modifie pas le DOM, le fait de comparer les deux arbres retournés\npar render peut s'avérer coûteux si votre composant présente beaucoup de\ncontenu. Heureusement, React permet aux développeurs d'intervenir avant le\nrender et l'annuler s'il n'est pas nécessaire avec `shouldComponentUpdate`.\n\n\nPlus d'[articles sur React sur putain de\ncode](http://putaindecode.io/fr/tag/react)\n\n## Redux\n\n[![React standard VS redux architecture (from\ncss-tricks.com)](react-redux-csstricks.png)](https://css-tricks.com/learning-react-redux/)\n\nPour les applications plus complexes, [redux](http://reduxjs.org) va gèrer\nl'état de l'application de manière globale et externe aux composants,\nstandardiser les évènements (actions), gérer les re-renders, et permettre\nd'aller vers des [interactions plus\navancées](https://github.com/markerikson/redux-ecosystem-links).\n\nIdéalement, [tous vos composants sont\ndumbs](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.j9rp2pr98)\net votre gestionnaire de state (par exemple redux) va gérer l'intelligence de\nl'application et les re-renders de manière découplée et optimisée.\n\nPlus d'articles sur redux sur Putain de code ! :\nhttp://putaindecode.io/fr/tag/redux/\n\n## Tips\n\n### Storybook\n\nUtiliser un outil comme\n[storybook](https://github.com/storybooks/react-storybook) permet de travailler\nsur les composants hors-contexte, de pouvoir les visualiser dans différents\nétats pendant que vous travaillez... et ainsi d'avoir une base saine de\ncomposants réutilisables.\n\nVotre bibliothèque de composants peut même être un projet à part, que vous\nimporterez dans vos différentes applications. Par exemple, Cloudflare publie\nséparément [tous ses composants UI réutilisables](https://github.com/cloudflare/cf-ui).\n\n### Composition\n\nUtilisez au maximum la composition de composants React pour garder des\ncomposants simples et réutilisables.\n\nPlus de détails sur le [pattern \"higher order\ncomponents\"](http://putaindecode.io/fr/articles/js/react/higher-order-component)\n\n### nvm\n\nUtilisez [Node Version Manager](https://github.com/creationix/nvm) aka nvm qui\npermet de gérer plusieurs environnements Node.js sur une même machine.\nIndispensable pour travailler sur plusieurs projets.\n\n### Learning curve\n\nConcentrez-vous sur une techno/outil à la fois et n'utilisez pas ce dont vous\nn'avez pas encore besoin.\n\n> Make it work, make it right, make it fast.\n\n## Comment démarrer ?\n\nPour créer une application, le plus simple est d'utiliser\n[create-react-app](https://github.com/facebookincubator/create-react-app).\n\nSi c'est pour créer un composant React que vous allez publier, alors\n[nwb](https://github.com/insin/nwb) est plus adapté.\n\nPour créer un site web comme [putaindecode.io](http://putaindecode.io) vous\npouvez utiliser un générateur de site statique comme\n[phenomic.io](http://phenomic.io).\n\n## Pourquoi c'est si complexe ?\n\nCette stack, qui peut paraître lourde en outillage, permet de créer des apps\nriches, performantes, testables, évolutives, multi-plateformes.\n\nUne fois l'outillage en place et assimilé, la productivité est excellente\n(ES2015, npm, tests, developer experience, dev/build/deploy...).\n\nDans la plupart des cas, les boilerplates cités ci-dessus vous fournissent tout\nle nécessaire.\n\n## Must read and watch\n\n - [Intro to React](https://facebook.github.io/react/tutorial/tutorial.html)\n - Free videos\n[egghead.io/react-fundamentals](https://egghead.io/courses/react-fundamentals)\n - Free videos\n[egghead.io/getting-started-with-redux](https://egghead.io/courses/getting-started-with-redux)\n - [You might not need\nredux](https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367#.8swndjba2)\n - [Smart VS dumb\ncomponents](https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.v583rvea1)\n - [Les patterns Provider & Higher-Order Component avec\nReact](http://putaindecode.io/fr/articles/js/react/higher-order-component/)\n - [React higher components in\ndepth](https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.t74wxicu0)\n\n## Liens\n\n> Quelques pépites\n\n - [create-react-app](https://github.com/facebookincubator/create-react-app) :\nCLI complet pour faire une application react\n - [nwb](https://github.com/insin/nwb) : CLI complet faire un composant react\n(dev,build,demo,tests,npm...)\n - [react-css-components](https://github.com/andreypopp/react-css-components) :\ncréer des composants React à partir de CSS\n - [redux-ecosystem-links](https://github.com/markerikson/redux-ecosystem-links)\n - [npm scripts docs](https://docs.npmjs.com/misc/scripts)\n - [aframe-react](https://github.com/ngokevin/aframe-react) : Build VR\nexperiences with A-Frame and React\n - [reactpatterns.com](http://reactpatterns.com) : quelques patterns react\n - [phenomic.io](http://phenomic.io) : react-based static site generator\n - [jsbooks.revolunet.com](http://jsbooks.revolunet.com) : free JavaScript\nebooks\n","__filename":"fr/articles/frontend/2016-2-ans-avec-react-babel-webpack-et-cie/index.md","__url":"/fr/articles/frontend/2016-2-ans-avec-react-babel-webpack-et-cie/","__resourceUrl":"/fr/articles/frontend/2016-2-ans-avec-react-babel-webpack-et-cie/index.html","__dataUrl":"/fr/articles/frontend/2016-2-ans-avec-react-babel-webpack-et-cie/index.html.84ba3eb6634f64b4c01276b5ae260dfc.json"}