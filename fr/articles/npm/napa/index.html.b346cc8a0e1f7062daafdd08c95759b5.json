{"head":{"layout":"Post","comments":true,"date":"2014-05-12","title":"napa ou comment télécharger un package qui napa de package.json","tags":["npm","javascript","nodejs"],"authors":["kud"],"description":"(Grosse grosse blague ce titre...) @kewah nous a récemment parlé de npm comme front-end packager manager, je vais aller encore plus loin.…"},"body":"<p>(Grosse grosse blague ce titre...)</p>\n<p><a href=\"https://twitter.com/kewah\">@kewah</a> nous a récemment parlé de <a href=\"/fr/articles/npm/frontend/\"><strong>npm</strong> comme front-end packager manager</a>, je vais aller encore plus loin. Je vais vous dévoiler comment installer des projets qui n'ont pas de <code>package.json</code>. Oui, car c'est bien beau de virer Bower (oh que oui c'est beau) mais comme npm requiert constamment un <code>package.json</code>, on ne va pas pouvoir télécharger grand chose sauf si on fait des <em>PR</em> afin d'ajouter ce fichier sur les projets que l'on souhaite obtenir.</p>\n<p>C'est pourquoi je vais vous parler de <a href=\"https://github.com/shama/napa\"><strong>napa</strong></a>.</p>\n<p>napa est un <em>helper for installing stuff without a package.json with npm</em>. Pardon, napa est un aideur pour installer des trucs sans un package.json avec npm. BON. napa vous aide à travers npm à installer des modules qui n'ont pas de package.json. C'est plus clair là ?</p>\n<p>napa est ce qui manque à npm où bower avait justement son utilité : télécharger n'importe quel <em>package</em> <em>front</em> n'importe où. Mais plutôt que d'installer un autre <em>packager</em>, napa s'insère directement dans npm afin de ne pas perturber le <em>workflow</em>, et ça, j'apprécie grandement.</p>\n<p>Simple, tout simple. Dans un premier temps, téléchargez-le :</p>\n<pre><code>$ npm install napa --save-dev\n</code></pre>\n<p>Cela ajoutera napa au <code>package.json</code>.</p>\n<p>Puis dans <code>package.json</code>, ajoutez :</p>\n<pre><code>{\n  \"scripts\": {\n    \"install\": \"napa\"\n  }\n}\n</code></pre>\n<p>Cela permettra de lancer napa à chaque fois que vous faites <code>npm install</code>.</p>\n<p>Afin d'ajouter les projets qui seront téléchargés par napa et donc par npm, il suffit d'ajouter un objet <code>napa</code> toujours dans <code>package.json</code> :</p>\n<pre><code>{\n  \"napa\": {\n    \"foo\": \"username/repo\",\n    \"bar\": \"git@example.com:user/repo\"\n  }\n}\n</code></pre>\n<p>ce qui donne au final :</p>\n<pre><code>{\n  \"scripts\": {\n    \"install\": \"napa\"\n  },\n  \"napa\": {\n    \"foo\": \"username/repo\",\n    \"bar\": \"git@example.com:user/repo\"\n  }\n}\n</code></pre>\n<p>Je vous ai volontairement donné la version structurée (et/ou explicite) parce que d'une, c'est celle que j'utilise :D et de deux, c'est celle que je trouve la plus claire, mais il y a d'<a href=\"https://github.com/shama/napa#want-to-name-the-package-something-else\">autres façons</a> de l'écrire.</p>\n<p>On se retrouve alors dans la vraie vie à avoir un <code>package.json</code> comme ceci :</p>\n<pre><code>{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Brilliant project\",\n  \"scripts\": {\n    \"install\": \"napa\"\n  },\n  \"devDependencies\": {\n    \"animate.css\": \"git://github.com/daneden/animate.css#3.1.1\",\n    \"backbone\": \"^1.1.2\",\n    \"jquery\": \"^1.9.0\",\n    \"jquery-migrate\": \"git://github.com/jquery/jquery-migrate#1.2.1\",\n    \"lodash\": \"^2.4.1\",\n    \"moment\": \"^2.6.0\",\n    \"napa\": \"^0.4.1\",\n    \"putainde-cookie\": \"^0.2.0\"\n  },\n  \"napa\": {\n    \"swfobject\": \"swfobject/swfobject#a22b7db077abc126d6aa5f2d0f44b11e4ed97940\",\n    \"modernizr\": \"Modernizr/Modernizr#v2.8.1\"\n  },\n  \"repository\": \"git://github.com/my/project.git\",\n  \"author\": \"Myself\",\n  \"license\": \"BSD\",\n  \"readmeFilename\": \"readme.md\"\n}\n</code></pre>\n<p>Top non ?</p>\n<p>Note : napa et npm-shrinkwrap, c'est pas encore ça, alors n'hésitez pas à supprimer la partie \"napa\" avant de lancer votre génération de npm-shrinkwrap.</p>\n<p>Bon download à vous.</p>\n","rawBody":"\n(Grosse grosse blague ce titre...)\n\n[@kewah](https://twitter.com/kewah) nous a récemment parlé de [**npm** comme front-end packager manager](/fr/articles/npm/frontend/), je vais aller encore plus loin. Je vais vous dévoiler comment installer des projets qui n'ont pas de `package.json`. Oui, car c'est bien beau de virer Bower (oh que oui c'est beau) mais comme npm requiert constamment un `package.json`, on ne va pas pouvoir télécharger grand chose sauf si on fait des _PR_ afin d'ajouter ce fichier sur les projets que l'on souhaite obtenir.\n\nC'est pourquoi je vais vous parler de [**napa**](https://github.com/shama/napa).\n\nnapa est un _helper for installing stuff without a package.json with npm_. Pardon, napa est un aideur pour installer des trucs sans un package.json avec npm. BON. napa vous aide à travers npm à installer des modules qui n'ont pas de package.json. C'est plus clair là ?\n\nnapa est ce qui manque à npm où bower avait justement son utilité : télécharger n'importe quel _package_ _front_ n'importe où. Mais plutôt que d'installer un autre _packager_, napa s'insère directement dans npm afin de ne pas perturber le _workflow_, et ça, j'apprécie grandement.\n\nSimple, tout simple. Dans un premier temps, téléchargez-le :\n\n```\n$ npm install napa --save-dev\n```\n\nCela ajoutera napa au `package.json`.\n\nPuis dans `package.json`, ajoutez :\n\n```\n{\n  \"scripts\": {\n    \"install\": \"napa\"\n  }\n}\n```\n\nCela permettra de lancer napa à chaque fois que vous faites `npm install`.\n\nAfin d'ajouter les projets qui seront téléchargés par napa et donc par npm, il suffit d'ajouter un objet `napa` toujours dans `package.json` :\n\n```\n{\n  \"napa\": {\n    \"foo\": \"username/repo\",\n    \"bar\": \"git@example.com:user/repo\"\n  }\n}\n```\n\nce qui donne au final :\n\n```\n{\n  \"scripts\": {\n    \"install\": \"napa\"\n  },\n  \"napa\": {\n    \"foo\": \"username/repo\",\n    \"bar\": \"git@example.com:user/repo\"\n  }\n}\n```\n\nJe vous ai volontairement donné la version structurée (et/ou explicite) parce que d'une, c'est celle que j'utilise :D et de deux, c'est celle que je trouve la plus claire, mais il y a d'[autres façons](https://github.com/shama/napa#want-to-name-the-package-something-else) de l'écrire.\n\nOn se retrouve alors dans la vraie vie à avoir un `package.json` comme ceci :\n\n```\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Brilliant project\",\n  \"scripts\": {\n    \"install\": \"napa\"\n  },\n  \"devDependencies\": {\n    \"animate.css\": \"git://github.com/daneden/animate.css#3.1.1\",\n    \"backbone\": \"^1.1.2\",\n    \"jquery\": \"^1.9.0\",\n    \"jquery-migrate\": \"git://github.com/jquery/jquery-migrate#1.2.1\",\n    \"lodash\": \"^2.4.1\",\n    \"moment\": \"^2.6.0\",\n    \"napa\": \"^0.4.1\",\n    \"putainde-cookie\": \"^0.2.0\"\n  },\n  \"napa\": {\n    \"swfobject\": \"swfobject/swfobject#a22b7db077abc126d6aa5f2d0f44b11e4ed97940\",\n    \"modernizr\": \"Modernizr/Modernizr#v2.8.1\"\n  },\n  \"repository\": \"git://github.com/my/project.git\",\n  \"author\": \"Myself\",\n  \"license\": \"BSD\",\n  \"readmeFilename\": \"readme.md\"\n}\n```\n\nTop non ?\n\nNote : napa et npm-shrinkwrap, c'est pas encore ça, alors n'hésitez pas à supprimer la partie \"napa\" avant de lancer votre génération de npm-shrinkwrap.\n\nBon download à vous.\n","__filename":"fr/articles/npm/napa/index.md","__url":"/fr/articles/npm/napa/","__resourceUrl":"/fr/articles/npm/napa/index.html","__dataUrl":"/fr/articles/npm/napa/index.html.b346cc8a0e1f7062daafdd08c95759b5.json"}