{"head":{"layout":"Post","comments":true,"date":"2014-07-16","title":"Maîtriser les redirections shell","tags":["shell"],"authors":["madx"],"description":"Le shell (ou ligne de commande) est l'outil de prédilection pour bon nombre d'entre nous qui utilisons un OS de la famille UNIX. Nous…"},"body":"<p>Le shell (ou ligne de commande) est l'outil de prédilection pour bon nombre\nd'entre nous qui utilisons un OS de la famille UNIX. Nous sommes persuadés que\nbien utilisé, il remplace avantageusement un IDE complexe et gourmand.</p>\n<p>Chez <em>Putain de code !</em>, on a une certaine tendance à utiliser <a href=\"http://fr.wikipedia.org/wiki/Z_Shell\">Zsh</a>, mais\npour ma part, j'utilise encore et toujours le vénérable <a href=\"http://fr.wikipedia.org/wiki/Bourne-Again_shell\">Bash</a>, non pas\npour faire mon barbu mais simplement car il me suffit amplement.</p>\n<p>La suite de l'article est donc basée sur celui-ci mais tout devrait fonctionner\nà l'identique sur Zsh.</p>\n<p>Venons en au sujet même de cet article, l'un des éléments essentiels de\nl'utilisation du shell : l'utilisation des redirections d'entrée/sortie de\nbase.</p>\n<p>Si ça vous paraît barbare, tenez-vous bien, on attaque tout de suite !</p>\n<h2 id=\"une-entrée-deux-sorties\"><a href=\"#une-entr%C3%A9e-deux-sorties\" class=\"phenomic-HeadingAnchor\">#</a>Une entrée, deux sorties</h2>\n<p>Un des principes de base sous UNIX est que tout est fichier et que l'activité du\nsystème est rendue par l'interaction de programmes (ou processus) à l'aide\ndes dits fichiers.</p>\n<p>Pour pouvoir collaborer avec ses congénères, chaque processus peut accéder par\ndéfaut à trois fichiers bien particuliers : l'entrée, la sortie, et la sortie\nd'erreur standards.</p>\n<ul>\n<li>L'entrée standard (<code>stdin</code>)</li>\n<li>La sortie standard (<code>stdout</code>)</li>\n<li>La sortie d'erreur (<code>stderr</code>)</li>\n</ul>\n<p>Habituellement, l'entrée standard est liée au clavier de l'utilisateur <em>via</em> son\némulateur de terminal, et les deux sorties sont liées à l'affichage dans ce même\némulateur.</p>\n<p>L'idée pour pouvoir faire collaborer les processus est donc de <em>brancher</em> les\nentrées et sorties de différents programmes afin d'obtenir un résultat.</p>\n<h2 id=\"les-redirections-de-base\"><a href=\"#les-redirections-de-base\" class=\"phenomic-HeadingAnchor\">#</a>Les redirections de base</h2>\n<p>Commençons par quelques redirections de base, celles qu'il faut connaître et qui\nsont employées systématiquement.</p>\n<p>Pour nous exercer, nous allons utiliser principalement deux commandes :</p>\n<ul>\n<li><code>echo</code> : permet d'écrire un message spécifié en tant qu'argument sur sa sortie\nstandard.</li>\n<li><code>cat</code> : permet d'afficher le contenu d'un fichier passé en argument sur sa\nsortie standard ou de répéter son entrée standard sur sa sortie standard.</li>\n</ul>\n<p>Rappelez vous que par défaut, la sortie standard est affichée dans le terminal\net l'entrée standard est le clavier de l'utilisateur.</p>\n<h3 id=\"redirection-de-sortie--\"><a href=\"#redirection-de-sortie--\" class=\"phenomic-HeadingAnchor\">#</a>Redirection de sortie : <code>></code></h3>\n<p>Ce type de redirection permet d'indiquer à un processus que tout ce qui devrait\naller sur la sortie standard (par défaut, le terminal), doit plutôt être stocké\ndans un fichier.</p>\n<p>Pour ça, on utilise la syntaxe <code>> [fichier]</code> :</p>\n<pre><code class=\"hljs language-console\">$ echo <span class=\"hljs-string\">\"Hello\"</span> > <span class=\"hljs-keyword\">message</span>\n$ cat <span class=\"hljs-keyword\">message</span>\nHello</code></pre>\n<h3 id=\"redirection-dentrée--\"><a href=\"#redirection-dentr%C3%A9e--\" class=\"phenomic-HeadingAnchor\">#</a>Redirection d'entrée : <code>&#x3C;</code></h3>\n<p>À l'inverse, on peut aussi spécifier à un programme qu'il doit utiliser un\nfichier comme son entrée standard, à la place du clavier de l'utilisateur.</p>\n<p>En réutilisant notre fichier <code>message</code>, on peut par exemple faire :</p>\n<pre><code class=\"hljs language-console\">$ cat &#x3C; <span class=\"hljs-keyword\">message</span>\nHello</code></pre>\n<p>Notez qu'on utilise bien <code>cat</code> <em>sans argument</em>, il utilise donc l'entrée\nstandard.</p>\n<h3 id=\"connecter-deux-processus--\"><a href=\"#connecter-deux-processus--\" class=\"phenomic-HeadingAnchor\">#</a>Connecter deux processus : <code>|</code></h3>\n<p>Dernier des connecteurs de base, l'opérateur <code>|</code>, aussi appelé <em>pipe</em> (et qui se\nprononce <em>paillepe</em>, avé l'accent).</p>\n<p>Il permet tout simplement d'utiliser la sortie d'un programme comme entrée d'un\nautre.</p>\n<p>Pour montrer ça, introduisons la commande <code>tr</code>, qui permet de remplacer des\ncaractères dans l'entrée par d'autres.</p>\n<pre><code class=\"hljs language-console\">$ <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"Hello!\"</span> | <span class=\"hljs-keyword\">tr</span> <span class=\"hljs-string\">\"[:lower:]\"</span> <span class=\"hljs-string\">\"[:upper:]\"</span>\nHELLO!</code></pre>\n<h2 id=\"descripteurs-de-fichiers-et-redirections-avancées\"><a href=\"#descripteurs-de-fichiers-et-redirections-avanc%C3%A9es\" class=\"phenomic-HeadingAnchor\">#</a>Descripteurs de fichiers et redirections avancées</h2>\n<p>Pour aller plus loin, on va maintenant voir que chaque descripteur de fichier\npossède son propre identifiant numérique.</p>\n<p>Pour <code>stdin</code>, <code>stdout</code> et <code>stderr</code> ce sera respectivement 0, 1 et 2.</p>\n<p>On peut se servir de ces identifiants pour faire des redirections plus\npoussées !</p>\n<h3 id=\"rediriger-les-autres-descripteur\"><a href=\"#rediriger-les-autres-descripteur\" class=\"phenomic-HeadingAnchor\">#</a>Rediriger les autres descripteur</h3>\n<p>Par défaut, <code>></code> ne redirige que la sortie standard vers un fichier. Pour\nrediriger un autre descripteur vers un fichier on emploiera la notation <code>X></code> où\n<em>X</em> prendra la valeur de l'identifiant du descripteur.</p>\n<p>Si vous avez bien suivi, on redirigera donc la sortie d'erreur vers un fichier à\nl'aide de la syntaxe <code>2></code>.</p>\n<h3 id=\"rediriger-vers-un-autre-descripteur--\"><a href=\"#rediriger-vers-un-autre-descripteur--\" class=\"phenomic-HeadingAnchor\">#</a>Rediriger vers un autre descripteur : <code>>&#x26;</code></h3>\n<p>On peut connecter les descripteurs d'un processus entre eux. C'est un mécanisme\nque l'on utilise très souvent quand on écrit des scripts Shell, notamment pour\nécrire sur la sortie d'erreur.</p>\n<p>Pour celà, on utilise la redirection <code>X>&#x26;Y</code> avec <em>X</em> étant l'identifiant\ndescripteur source et <em>Y</em> l'identifiant du descripteur sur lequel on veut\nrediriger.</p>\n<p>L'exemple suivant montre comment rediriger la sortie standard sur la sortie\nd'erreur (c'est comme ça qu'on écrit sur la sortie d'erreur dans un script).</p>\n<pre><code class=\"hljs language-console\">$ echo <span class=\"hljs-string\">\"Error\"</span> <span class=\"hljs-number\">1</span>>&#x26;<span class=\"hljs-number\">2</span></code></pre>\n<p>Plus généralement, on peut omettre la partie avant le <code>>&#x26;</code>, elle prendra la\nvaleur 1 par défaut. On aura donc le script suivant :</p>\n<pre><code class=\"hljs language-console\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Error\"</span> >&#x26;2</code></pre>\n<h3 id=\"ajouter-en-fin-de-fichier--\"><a href=\"#ajouter-en-fin-de-fichier--\" class=\"phenomic-HeadingAnchor\">#</a>Ajouter en fin de fichier : <code>>></code></h3>\n<p>Par défaut, <code>></code> écrase le fichier dans lequel la redirection va s'effectuer.\nPour éviter ce problème, on peut utiliser à la place <code>>></code> qui va ajouter en fin\nde fichier.</p>\n<pre><code class=\"hljs language-console\"># Sans >>\n<span class=\"hljs-symbol\">$</span> echo <span class=\"hljs-string\">\"1\"</span> > <span class=\"hljs-keyword\">file</span>\n<span class=\"hljs-symbol\">$</span> echo <span class=\"hljs-string\">\"2\"</span> > <span class=\"hljs-keyword\">file</span>\n<span class=\"hljs-symbol\">$</span> cat <span class=\"hljs-keyword\">file</span>\n<span class=\"hljs-number\">2</span></code></pre>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-comment\"># Avec >></span>\n$ echo <span class=\"hljs-string\">\"1\"</span> > file\n$ echo <span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-meta\">>> </span>file\n$ cat file\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span></code></pre>\n<h3 id=\"devnull-le-trou-noir\"><a href=\"#devnull-le-trou-noir\" class=\"phenomic-HeadingAnchor\">#</a><code>/dev/null</code>, le trou noir</h3>\n<p>Il existe un fichier un peu particulier sur tout bon UNIX qui se respecte :\n<code>/dev/null</code>.</p>\n<p>Ce dernier est en fait une sorte de trou noir : Si on affiche son contenu on\nn'obtient rien, et si on écrit quelque chose dedans elle disparait.</p>\n<p>On se sert souvent de ce fichier pour supprimer la sortie d'un programme :</p>\n<pre><code class=\"hljs language-console\">$ echo <span class=\"hljs-string\">\"Hello\"</span> ><span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-keyword\">null</span>\n$ cat <span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-keyword\">null</span>\n$</code></pre>\n<h3 id=\"ordre-des-redirections\"><a href=\"#ordre-des-redirections\" class=\"phenomic-HeadingAnchor\">#</a>Ordre des redirections</h3>\n<p>Un dernier mot avant la fin, l'ordre des redirections est très important !</p>\n<p>Imaginez la fonction suivante qui affiche un message sur la sortie standard et\nun sur la sortie d'erreur :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">programme</span><span class=\"hljs-params\">()</span> {</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Message\"</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Error\"</span> >&#x26;<span class=\"hljs-number\">2</span>\n}</code></pre>\n<p>Si on veut rediriger toutes les sorties vers <code>/dev/null</code> on peut utiliser la\nsyntaxe suivante :</p>\n<pre><code class=\"hljs language-console\">$ programme <span class=\"hljs-number\">2</span>><span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-keyword\">null</span> ><span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-keyword\">null</span></code></pre>\n<p>Vous remarquerez que c'est assez verbeux, et qu'on pourrait simplifier celà en\nutilisant <code>>&#x26;</code> comme vu précédemment.</p>\n<p>On essaie donc naïvement :</p>\n<pre><code class=\"hljs language-console\">$ programme <span class=\"hljs-number\">2</span>>&#x26;<span class=\"hljs-number\">1</span> ><span class=\"hljs-regexp\">/dev/</span><span class=\"hljs-literal\">null</span>\n<span class=\"hljs-built_in\">Error</span></code></pre>\n<p>Hmm, pourtant on a tout branché ensemble non ? En fait non, on a redirigé la\nsortie sur le fichier pointé par <code>1</code> au moment où on écrit la redirection, donc\navant qu'il soit redirigé sur <code>/dev/null</code>.</p>\n<p>Pour bien faire, il faut écrire les redirections dans l'autre ordre :</p>\n<pre><code class=\"hljs language-console\">$ programme ><span class=\"hljs-meta-keyword\">/dev/</span>null <span class=\"hljs-number\">2</span>><span class=\"hljs-variable\">&#x26;1</span></code></pre>\n<p>On lira ceci : Rediriger la sortie standard vers <code>/dev/null</code>, puis rediriger la\nsortie d'erreur vers la sortie standard.</p>\n<h3 id=\"pour-résumer\"><a href=\"#pour-r%C3%A9sumer\" class=\"phenomic-HeadingAnchor\">#</a>Pour résumer</h3>\n<p>On a en fait que deux redirections de sortie, <code>></code> et <code>>></code>, les symboles qui les\nentourent sont souvent optionnels.</p>\n<p>Si on veut spécifier un fichier on donnera son nom, si on veut spécifier un\ndescripteur on donnera son identifiant préfixé de <code>&#x26;</code>.</p>\n<h2 id=\"pour-aller-plus-loin\"><a href=\"#pour-aller-plus-loin\" class=\"phenomic-HeadingAnchor\">#</a>Pour aller plus loin</h2>\n<p>Le manuel de bash contient <a href=\"http://www.gnu.org/software/bash/manual/bashref.html#Redirections\">une section complète sur les\nredirections</a>. Elle va beaucoup plus loin que cet article et je vous\ninvite à la lire pour voir tout ce qu'il est possible de faire.</p>\n<p>Il y a aussi une section dédiée à ce sujet dans l'<a href=\"http://tldp.org/LDP/abs/html/io-redirection.html\">Advanced Bash-Scripting Guide</a>.</p>\n","rawBody":"\nLe shell (ou ligne de commande) est l'outil de prédilection pour bon nombre\nd'entre nous qui utilisons un OS de la famille UNIX. Nous sommes persuadés que\nbien utilisé, il remplace avantageusement un IDE complexe et gourmand.\n\nChez _Putain de code !_, on a une certaine tendance à utiliser [Zsh][wp:zsh], mais\npour ma part, j'utilise encore et toujours le vénérable [Bash][wp:bash], non pas\npour faire mon barbu mais simplement car il me suffit amplement.\n\nLa suite de l'article est donc basée sur celui-ci mais tout devrait fonctionner\nà l'identique sur Zsh.\n\nVenons en au sujet même de cet article, l'un des éléments essentiels de\nl'utilisation du shell : l'utilisation des redirections d'entrée/sortie de\nbase.\n\nSi ça vous paraît barbare, tenez-vous bien, on attaque tout de suite !\n\n## Une entrée, deux sorties\n\nUn des principes de base sous UNIX est que tout est fichier et que l'activité du\nsystème est rendue par l'interaction de programmes (ou processus) à l'aide\ndes dits fichiers.\n\nPour pouvoir collaborer avec ses congénères, chaque processus peut accéder par\ndéfaut à trois fichiers bien particuliers : l'entrée, la sortie, et la sortie\nd'erreur standards.\n\n* L'entrée standard (`stdin`)\n* La sortie standard (`stdout`)\n* La sortie d'erreur (`stderr`)\n\nHabituellement, l'entrée standard est liée au clavier de l'utilisateur *via* son\némulateur de terminal, et les deux sorties sont liées à l'affichage dans ce même\némulateur.\n\nL'idée pour pouvoir faire collaborer les processus est donc de *brancher* les\nentrées et sorties de différents programmes afin d'obtenir un résultat.\n\n## Les redirections de base\n\nCommençons par quelques redirections de base, celles qu'il faut connaître et qui\nsont employées systématiquement.\n\nPour nous exercer, nous allons utiliser principalement deux commandes :\n\n* `echo` : permet d'écrire un message spécifié en tant qu'argument sur sa sortie\n  standard.\n* `cat` : permet d'afficher le contenu d'un fichier passé en argument sur sa\n  sortie standard ou de répéter son entrée standard sur sa sortie standard.\n\nRappelez vous que par défaut, la sortie standard est affichée dans le terminal\net l'entrée standard est le clavier de l'utilisateur.\n\n### Redirection de sortie : `>`\n\nCe type de redirection permet d'indiquer à un processus que tout ce qui devrait\naller sur la sortie standard (par défaut, le terminal), doit plutôt être stocké\ndans un fichier.\n\nPour ça, on utilise la syntaxe `> [fichier]` :\n\n``` console\n$ echo \"Hello\" > message\n$ cat message\nHello\n```\n\n### Redirection d'entrée : `<`\n\nÀ l'inverse, on peut aussi spécifier à un programme qu'il doit utiliser un\nfichier comme son entrée standard, à la place du clavier de l'utilisateur.\n\nEn réutilisant notre fichier `message`, on peut par exemple faire :\n\n``` console\n$ cat < message\nHello\n```\n\nNotez qu'on utilise bien `cat` *sans argument*, il utilise donc l'entrée\nstandard.\n\n### Connecter deux processus : `|`\n\nDernier des connecteurs de base, l'opérateur `|`, aussi appelé *pipe* (et qui se\nprononce *paillepe*, avé l'accent).\n\nIl permet tout simplement d'utiliser la sortie d'un programme comme entrée d'un\nautre.\n\nPour montrer ça, introduisons la commande `tr`, qui permet de remplacer des\ncaractères dans l'entrée par d'autres.\n\n``` console\n$ echo \"Hello!\" | tr \"[:lower:]\" \"[:upper:]\"\nHELLO!\n```\n\n## Descripteurs de fichiers et redirections avancées\n\nPour aller plus loin, on va maintenant voir que chaque descripteur de fichier\npossède son propre identifiant numérique.\n\nPour `stdin`, `stdout` et `stderr` ce sera respectivement 0, 1 et 2.\n\nOn peut se servir de ces identifiants pour faire des redirections plus\npoussées !\n\n### Rediriger les autres descripteur\n\nPar défaut, `>` ne redirige que la sortie standard vers un fichier. Pour\nrediriger un autre descripteur vers un fichier on emploiera la notation `X>` où\n*X* prendra la valeur de l'identifiant du descripteur.\n\nSi vous avez bien suivi, on redirigera donc la sortie d'erreur vers un fichier à\nl'aide de la syntaxe `2>`.\n\n### Rediriger vers un autre descripteur : `>&`\n\nOn peut connecter les descripteurs d'un processus entre eux. C'est un mécanisme\nque l'on utilise très souvent quand on écrit des scripts Shell, notamment pour\nécrire sur la sortie d'erreur.\n\nPour celà, on utilise la redirection `X>&Y` avec *X* étant l'identifiant\ndescripteur source et *Y* l'identifiant du descripteur sur lequel on veut\nrediriger.\n\nL'exemple suivant montre comment rediriger la sortie standard sur la sortie\nd'erreur (c'est comme ça qu'on écrit sur la sortie d'erreur dans un script).\n\n``` console\n$ echo \"Error\" 1>&2\n```\n\nPlus généralement, on peut omettre la partie avant le `>&`, elle prendra la\nvaleur 1 par défaut. On aura donc le script suivant :\n\n``` console\n$ echo \"Error\" >&2\n```\n\n### Ajouter en fin de fichier : `>>`\n\nPar défaut, `>` écrase le fichier dans lequel la redirection va s'effectuer.\nPour éviter ce problème, on peut utiliser à la place `>>` qui va ajouter en fin\nde fichier.\n\n``` console\n# Sans >>\n$ echo \"1\" > file\n$ echo \"2\" > file\n$ cat file\n2\n```\n\n``` console\n# Avec >>\n$ echo \"1\" > file\n$ echo \"2\" >> file\n$ cat file\n1\n2\n```\n\n### `/dev/null`, le trou noir\n\nIl existe un fichier un peu particulier sur tout bon UNIX qui se respecte :\n`/dev/null`.\n\nCe dernier est en fait une sorte de trou noir : Si on affiche son contenu on\nn'obtient rien, et si on écrit quelque chose dedans elle disparait.\n\nOn se sert souvent de ce fichier pour supprimer la sortie d'un programme :\n\n``` console\n$ echo \"Hello\" >/dev/null\n$ cat /dev/null\n$\n```\n\n### Ordre des redirections\n\nUn dernier mot avant la fin, l'ordre des redirections est très important !\n\nImaginez la fonction suivante qui affiche un message sur la sortie standard et\nun sur la sortie d'erreur :\n\n``` console\nfunction programme() {\n  echo \"Message\"\n  echo \"Error\" >&2\n}\n```\n\nSi on veut rediriger toutes les sorties vers `/dev/null` on peut utiliser la\nsyntaxe suivante :\n\n``` console\n$ programme 2>/dev/null >/dev/null\n```\n\nVous remarquerez que c'est assez verbeux, et qu'on pourrait simplifier celà en\nutilisant `>&` comme vu précédemment.\n\nOn essaie donc naïvement :\n\n``` console\n$ programme 2>&1 >/dev/null\nError\n```\n\nHmm, pourtant on a tout branché ensemble non ? En fait non, on a redirigé la\nsortie sur le fichier pointé par `1` au moment où on écrit la redirection, donc\navant qu'il soit redirigé sur `/dev/null`.\n\nPour bien faire, il faut écrire les redirections dans l'autre ordre :\n\n``` console\n$ programme >/dev/null 2>&1\n```\n\nOn lira ceci : Rediriger la sortie standard vers `/dev/null`, puis rediriger la\nsortie d'erreur vers la sortie standard.\n\n### Pour résumer\n\nOn a en fait que deux redirections de sortie, `>` et `>>`, les symboles qui les\nentourent sont souvent optionnels.\n\nSi on veut spécifier un fichier on donnera son nom, si on veut spécifier un\ndescripteur on donnera son identifiant préfixé de `&`.\n\n## Pour aller plus loin\n\nLe manuel de bash contient [une section complète sur les\nredirections][man:bash]. Elle va beaucoup plus loin que cet article et je vous\ninvite à la lire pour voir tout ce qu'il est possible de faire.\n\nIl y a aussi une section dédiée à ce sujet dans l'[Advanced Bash-Scripting Guide][tldp:abs].\n\n[wp:zsh]: http://fr.wikipedia.org/wiki/Z_Shell\n[wp:bash]: http://fr.wikipedia.org/wiki/Bourne-Again_shell\n[man:bash]: http://www.gnu.org/software/bash/manual/bashref.html#Redirections\n[tldp:abs]: http://tldp.org/LDP/abs/html/io-redirection.html\n","__filename":"fr/articles/shell/redirections/index.md","__url":"/fr/articles/shell/redirections/","__resourceUrl":"/fr/articles/shell/redirections/index.html","__dataUrl":"/fr/articles/shell/redirections/index.html.02dfda7c47597b419c168b91da78af28.json"}