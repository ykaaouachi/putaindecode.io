{"head":{"layout":"Post","comments":true,"date":"2013-11-11","title":"Structurer son projet avec Revel et Mgo","tags":["golang","mongo","revel","mgo"],"authors":["OwlyCode"],"description":"Tu te sens l’âme d’un rebelle ? Tu veux tester de la techno atypique ? Ça tombe bien, aujourd’hui on est là pour ça. On va toucher à un…"},"body":"<p>Tu te sens l’âme d’un rebelle ? Tu veux tester de la techno atypique ? Ça tombe\nbien, aujourd’hui on est là pour ça. On va toucher à un sujet pas forcément\nmajoritaire : le langage Go. Si tu ne connais pas les bases, je t’invite à aller\nsur la <a href=\"http://golang.org/\">homepage du projet</a> et à parcourir le\n<a href=\"http://tour.golang.org/\">go-tour anglais</a> ou\n<a href=\"http://go-tour-fr.appspot.com/\">celui en français</a>, c'est un showcase complet du langage\n(et très bien fichu).\nMais si t'es juste curieux et que comprendre chaque pixel de l'article n'est pas\nune obsession pour toi, tu devrais pouvoir voir de quoi on parle. Même\nNyalab y est arrivé.</p>\n<p>Dans cet article on va voir <strong>comment brancher un projet go+revel à une base de\ndonnées mongodb</strong> et obtenir ainsi une base de travail sympa pour explorer le\ndéveloppement web avec Go.</p>\n<h2 id=\"les-technos-utilisées\"><a href=\"#les-technos-utilis%C3%A9es\" class=\"phenomic-HeadingAnchor\">#</a>Les technos utilisées</h2>\n<h3 id=\"golang\"><a href=\"#golang\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"http://golang.org\">Golang</a></h3>\n<p>Langage compilé, publié en 2009, communément considéré comme “désorienté objet”,\nc’est une alternative solide au C/C++ qui prône un découpage modulaire (par\n“package”) des applications. Il est prédisposé à une utilisation en\ndéveloppement web grâce à un package natif de gestion des réseaux et du\nprotocole http.</p>\n<h3 id=\"revel\"><a href=\"#revel\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"http://robfig.github.io/revel/\">Revel</a></h3>\n<p>Framework développé en Go et pour Go. Il intègre tout ce qu’il faut pour\ndévelopper une application web : rechargement du code à chaud, gestion des urls\npar routing, parsing des paramètres GET et POST, mécanisme de validation des\ndonnées, gestion de sessions, gestion du cache, framework de tests et même\nmoteur de tâches planifiées cron-likes. Il a pour particularité d’être\ncomplètement découplé sur la partie modèle et ne fourni aucun ORM ou ODM,\njuste un petit module pour gérer des transactions sur des bases sql-like.</p>\n<h3 id=\"mgo\"><a href=\"#mgo\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"http://labix.org/mgo\">Mgo</a></h3>\n<p>Driver Go complet pour MongoDB, permettant d’établir la connexion et d’envoyer\ndes requêtes. Il dispose d’un mécanisme de mapping des documents mongodb sur les\ntype struct de Go.</p>\n<h3 id=\"mongodb\"><a href=\"#mongodb\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"http://www.mongodb.org/\">MongoDB</a></h3>\n<p>Base de données NoSql agile et scalable, les documents sont stockés au format\njson dans des collections. Le requêtage se fait en manipulant des objets et des\nfonctions javascript.</p>\n<h2 id=\"attends-attends--pourquoi-go-\"><a href=\"#attends-attends--pourquoi-go-\" class=\"phenomic-HeadingAnchor\">#</a>Attends, attends ... Pourquoi Go ?</h2>\n<p>Le premier vrai argument, c'est la <strong>performance</strong>. Sans rentrer dans\nl'explication hyper poussée d'un <a href=\"http://jaxbot.me/articles/benchmarks_nodejs_vs_go_vs_php_3_14_2013\">benchmark</a>, on peut\naffirmer sans trop de risque que Go se hisse au moins au niveau de node.js.</p>\n<p>On peut aussi ajouter que Go est un <strong>langage moderne</strong>, qui inclut toutes les\n<strong>petites friandises pour attirer le développeur</strong> curieux et assoiffé de\nqualité. Framework de tests et outil de mise en forme du code sont natifs et\npermettent à la techno d'échapper aux interminables guerres de conventions :</p>\n<blockquote>\n<p>De toutes façons le no-newline avant \"{\" c'est vraiment pour les pourritures\nresponsables de 99% des maux de la Terre.</p>\n<ul>\n<li>Un évangeliste du PSR</li>\n</ul>\n</blockquote>\n<p>Troisième argument de choix en Go : la <strong>simplicité de parallélisation</strong>.\nPersonne ne viendra te dire <em>\"ça c'est synchrone, sry bro.\"</em> ou <em>\"ça c'est\nasynchrone, callback it bitch.\"</em>. Tout repose sur le mot clef qui a donné son\nnom au langage (ou l'inverse) <code>go</code>. Tu peux te faire un <code>go myFunc()</code> et paf !\nTout ce qui est appelé dans myFunc() saute sur un thread séparé. Et pour gérer\nla synchronicité entre plusieurs thread il y a un mécanisme de canaux. Ce sont\ndes files FIFO (the First In is the First Out) dont la lecture est bloquante\n(il existe des techniques évoluées pour faire du polling, cf\n<a href=\"http://tour.golang.org/#68\">gotour#68</a>).</p>\n<p>Pour finir, cerise sur le gateau, <strong>Go compile vite</strong>, extrêment vite, et ça va\nsauver ton intégrité mentale sur les gros projets. Par contre c'est foutu pour\ntes pauses cafés aux prétextes douteux.</p>\n<p>##Let’s Go (#nojoke, siriouz bizness)\nOn va partir du principe que tu as Go et Revel prêts pour la baston. On attaque\ndirect à sec par le classique “revel new” puisqu'on va partir de la structure de\nbase.</p>\n<pre><code class=\"hljs language-console\">$ revel <span class=\"hljs-keyword\">new</span> github.com<span class=\"hljs-regexp\">/OwlyCode/</span>PutainDeProjet</code></pre>\n<p>Là théoriquement, tu te retrouves avec la structure par défaut du boilerplate\nrevel, quelque chose comme ça:</p>\n<ul>\n<li>\n<p>app</p>\n<ul>\n<li>controllers</li>\n<li>views</li>\n</ul>\n</li>\n<li>conf</li>\n<li>messages</li>\n<li>public</li>\n<li>tests</li>\n</ul>\n<p>C’est là qu’on se met au boulot. On a de quoi faire un site complet avec ça mais\naucune trace de gestion de base de données là dedans. On commence donc par\ncréer un dossier <code>app/modules</code> et un sous dossier <code>app/modules/mongo</code>. C’est\ndans ce dossier que va se trouver notre gestionnaire de connexion à mongoDB.\nEn fait ce n’est rien de plus qu’un binding entre Revel et Mgo. La technique\nutilisée pour brancher ce binding côté Revel est celle des\n<a href=\"http://robfig.github.io/revel/manual/interceptors.html\">interceptors</a>.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> mongo\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">\"github.com/robfig/revel\"</span>\n    <span class=\"hljs-string\">\"labix.org/v2/mgo\"</span>\n    <span class=\"hljs-string\">\"sync\"</span>\n)\n\n<span class=\"hljs-comment\">// Extension du controlleur.</span>\n<span class=\"hljs-keyword\">type</span> Mongo <span class=\"hljs-keyword\">struct</span> {\n    *revel.Controller\n    MongoSession  *mgo.Session\n    MongoDatabase *mgo.Database\n}\n\n<span class=\"hljs-comment\">// Stockage global de la session dont la visibilité est restreinte au package.</span>\n<span class=\"hljs-keyword\">var</span> session *mgo.Session\n\n<span class=\"hljs-comment\">// Singleton</span>\n<span class=\"hljs-keyword\">var</span> dial sync.Once\n\n<span class=\"hljs-comment\">// Renvoie la session mgo en cours, si aucune n'existe, elle est créée.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetSession</span><span class=\"hljs-params\">()</span> *<span class=\"hljs-title\">mgo</span>.<span class=\"hljs-title\">Session</span></span> {\n\n    host, _ := revel.Config.String(<span class=\"hljs-string\">\"mongo.host\"</span>)\n\n    <span class=\"hljs-comment\">// Grâce au package sync cette fonction n'est appelée</span>\n    <span class=\"hljs-comment\">// qu'une seule fois et de manière synchrone.</span>\n    dial.Do(<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n        <span class=\"hljs-keyword\">var</span> err error\n        session, err = mgo.Dial(host)\n        <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n            <span class=\"hljs-built_in\">panic</span>(err)\n        }\n    })\n\n    <span class=\"hljs-keyword\">return</span> session\n}\n\n<span class=\"hljs-comment\">// Alimente les propriétés affectées au controlleur en clonant la session mongo.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Mongo)</span> <span class=\"hljs-title\">Bind</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">revel</span>.<span class=\"hljs-title\">Result</span></span> {\n    <span class=\"hljs-comment\">// Oublie pas de mettre mongo.database dans le app.conf, genre \"localhost\"</span>\n    databaseName, _ := revel.Config.String(<span class=\"hljs-string\">\"mongo.database\"</span>)\n\n    c.MongoSession = GetSession().Clone()\n    c.MongoDatabase = c.MongoSession.DB(databaseName)\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Ferme un clone</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Mongo)</span> <span class=\"hljs-title\">Close</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">revel</span>.<span class=\"hljs-title\">Result</span></span> {\n\n    <span class=\"hljs-keyword\">if</span> c.MongoSession != <span class=\"hljs-literal\">nil</span> {\n        c.MongoSession.Close()\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Fonction appelée au chargement de l'application.</span>\n<span class=\"hljs-comment\">// Elle effectue un appel a notre fonction Bind avant</span>\n<span class=\"hljs-comment\">// chaque execution du controlleur.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">()</span></span> {\n    revel.InterceptMethod((*Mongo).Bind, revel.BEFORE)\n    revel.InterceptMethod((*Mongo).Close, revel.AFTER)\n    <span class=\"hljs-comment\">// On veut aussi fermer le clone si le controlleur plante.</span>\n    revel.InterceptMethod((*Mongo).Close, revel.PANIC)\n}</code></pre>\n<p>On a créé notre connexion à mongo, mais maintenant on va aussi l’utiliser. Dans\nle contrôleur, rien de plus simple :</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">\"github.com/robfig/revel\"</span>\n    <span class=\"hljs-string\">\"github.com/OwlyCode/PutainDeProjet/app/modules/mongo\"</span>\n)\n\n<span class=\"hljs-keyword\">type</span> AppController <span class=\"hljs-keyword\">struct</span> {\n    *revel.Controller\n    mongo.Mongo <span class=\"hljs-comment\">// Le controlleur doit étendre notre type Mongo.</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *AppController)</span> <span class=\"hljs-title\">Index</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">revel</span>.<span class=\"hljs-title\">Result</span></span> {\n    usersCollection := c.MongoDatabase.C(<span class=\"hljs-string\">\"users\"</span>)\n    <span class=\"hljs-comment\">// tu peux maintenant manipuler ta mgo.Collection.</span>\n    <span class=\"hljs-comment\">// [ ... ]</span>\n}</code></pre>\n<p>Mais tu peux aussi l’appeler ailleurs dans le projet, par exemple dans un autre\nmodule :</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">\"github.com/OwlyCode/PutainDeProjet/app/modules/mongo\"</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">DoStuff</span><span class=\"hljs-params\">(user *models.User)</span></span> {\n    session := mongo.GetSession()\n    <span class=\"hljs-keyword\">defer</span> session.Close() <span class=\"hljs-comment\">// Oublie pas de fermer le robinet à la fin!</span>\n\n    <span class=\"hljs-comment\">// tu peux maintenant manipuler ta mgo.Session.</span>\n    <span class=\"hljs-comment\">// [ ... ]</span>\n}</code></pre>\n<p><strong>C'est bien beau de copier coller mais ...</strong></p>\n<p>... tu te demandes certainement pourquoi on a créé un dossier <code>app/modules</code>, si\nc’est pour n’y mettre qu’un sous dossier mongo dedans. Et c’est une très bonne\nquestion. En fait, notre dossier mongo représente un module du projet bien\ndélimité. A l’avenir, si tu veux aussi brancher du mysql, et bien y a juste à\ncréer <code>app/modules/mysql</code>. Rien ne change pour l’existant et tu ne pollues pas\nla racine de ton projet. L’autre avantage c’est qu’en un coup d’oeil dans ce\ndossier tu as un aperçu direct des features de l’application.</p>\n<p>Enfin, l'approche module, c'est aussi un gage de MVC. Admettons qu'on veuille\ncoder une application de facturation, il nous suffit de créer un dossier\n<code>app/modules/invoicing</code> et de travailler dans ce dossier sur toute la partie\nmétier. Comme par exemple le calcul des totaux, le calcul de la TVA etc... Grâce\nà cette approche, on garde des contrôleurs très fins et restreints à ce que\ndoit être leur rôle premier : faire communiquer le modèle et la vue.</p>\n<h2 id=\"modèles-globaux-modèles-locaux\"><a href=\"#mod%C3%A8les-globaux-mod%C3%A8les-locaux\" class=\"phenomic-HeadingAnchor\">#</a>Modèles globaux, modèles locaux</h2>\n<p>J’ai évoqué plus haut dans la liste des technos une feature hyper sexy de mgo :\nle mapping des documents mongodb en json sur les types struct. Ce qui veut dire\nqu’avec mgo, on peut définir des modèles bien structurés. Certains seront\ncommuns à toute l’application, par exemple un utilisateur, mais d’autres seront\nspécifiques à un module, comme par exemple une facture.</p>\n<p>Une bonne pratique est d’approcher le rangement des modèles selon cette\nstructure:</p>\n<ul>\n<li>\n<p>app</p>\n<ul>\n<li>controllers</li>\n<li><strong>models</strong></li>\n<li>\n<p>modules</p>\n<ul>\n<li>\n<p>invoicing</p>\n<ul>\n<li>engine</li>\n<li><strong>models</strong></li>\n</ul>\n</li>\n<li>mongo</li>\n</ul>\n</li>\n<li>views</li>\n</ul>\n</li>\n<li>conf</li>\n<li>messages</li>\n<li>public</li>\n<li>tests</li>\n</ul>\n<p>Le but du jeu évidemment c'est d'avoir le moins de modèles globaux possibles.\nIdéalement, si le dossier <code>app/models</code> n'existe pas ce n'est pas plus mal. Mais\nattention à ne pas chercher à l'éliminer au prix de la modularité du code. Il\nvaut mieux avoir un modèle explicitement déclaré comme global plutot que de\nl'isoler dans un module et de rendre tous les autres modules du projet\ndépendants de ce dernier.</p>\n<p>Pourquoi c'est important ? C'est surtout parce que ça pose les bonnes questions\net amène les bonnes remarques. \"Vais-je avoir besoin de ce modèle réellement\nPARTOUT ?\", \"C'est étrange j'ai créé deux modules mais au final je passe mon\ntemps à faire des va-et-vient de l'un à l'autre... Peut être que je devrais les\nfusionner.\" ou encore \"90% de mon projet se trouve dans un seul module, il y a\npeut être un problème.\". Mais au delà de ça, ça te permets d'isoler des modules\nquasi autonomes (deux ou trois coups d'abstraction avec des interfaces et ça\nroule). Tu pourras plus tard les sortir de ton projet si par exemple tu veux les\nréutiliser sur un autre (svn include pour les ancêtres, git submodules pour les\nautres).</p>\n<h2 id=\"pour-aller-plus-loin\"><a href=\"#pour-aller-plus-loin\" class=\"phenomic-HeadingAnchor\">#</a>Pour aller plus loin</h2>\n<p>Isoler distinctement le gestionnaire de connexion, la logique métier et les\nmodèles dans des modules est une première étape vers une architecture propre et\névolutive. Tu peux même pousser ça plus loin en utilisant des interfaces comme\nje l'ai brièvement mentionné un peu plus tôt, c'est même d'ailleurs ce que je te\nconseille. Si tu veux creuser ce sujet là tu trouveras pas mal de monde qui s'y\nintéresse en fouinant sur le\n<a href=\"https://groups.google.com/forum/#!forum/Golang-Nuts\">groupe de discussion des utilisateurs golang</a>.\nTu as par exemple ce gars là qui a\n<a href=\"https://groups.google.com/forum/#!searchin/Golang-Nuts/interface/golang-nuts/Q0WhF7vhw5Q/T1tSJHT4aCoJ\">remplacé sa dépendance à la librairie mgo par des interfaces</a>\npour éviter d'inclure le package a chaque fois et faciliter ses tests. Tu peux\nenvisager de faire la même chose pour découpler tes modèles et la logique métier\n.</p>\n<p>En attendant il ne me reste qu'à te souhaiter une bonne coding night, tu as\ntoutes les armes nécessaires pour gérer mongo dans ton projet revel. ;-)</p>\n","rawBody":"\nTu te sens l’âme d’un rebelle ? Tu veux tester de la techno atypique ? Ça tombe\nbien, aujourd’hui on est là pour ça. On va toucher à un sujet pas forcément\nmajoritaire : le langage Go. Si tu ne connais pas les bases, je t’invite à aller\nsur la [homepage du projet](http://golang.org/) et à parcourir le\n[go-tour anglais](http://tour.golang.org/) ou\n[celui en français](http://go-tour-fr.appspot.com/), c'est un showcase complet du langage\n(et très bien fichu).\nMais si t'es juste curieux et que comprendre chaque pixel de l'article n'est pas\nune obsession pour toi, tu devrais pouvoir voir de quoi on parle. Même\nNyalab y est arrivé.\n\nDans cet article on va voir **comment brancher un projet go+revel à une base de\ndonnées mongodb** et obtenir ainsi une base de travail sympa pour explorer le\ndéveloppement web avec Go.\n\n## Les technos utilisées\n\n### [Golang](http://golang.org)\n\nLangage compilé, publié en 2009, communément considéré comme “désorienté objet”,\nc’est une alternative solide au C/C++ qui prône un découpage modulaire (par\n“package”) des applications. Il est prédisposé à une utilisation en\ndéveloppement web grâce à un package natif de gestion des réseaux et du\nprotocole http.\n\n### [Revel](http://robfig.github.io/revel/)\n\nFramework développé en Go et pour Go. Il intègre tout ce qu’il faut pour\ndévelopper une application web : rechargement du code à chaud, gestion des urls\npar routing, parsing des paramètres GET et POST, mécanisme de validation des\ndonnées, gestion de sessions, gestion du cache, framework de tests et même\nmoteur de tâches planifiées cron-likes. Il a pour particularité d’être\ncomplètement découplé sur la partie modèle et ne fourni aucun ORM ou ODM,\njuste un petit module pour gérer des transactions sur des bases sql-like.\n\n### [Mgo](http://labix.org/mgo)\n\nDriver Go complet pour MongoDB, permettant d’établir la connexion et d’envoyer\ndes requêtes. Il dispose d’un mécanisme de mapping des documents mongodb sur les\ntype struct de Go.\n\n### [MongoDB](http://www.mongodb.org/)\n\nBase de données NoSql agile et scalable, les documents sont stockés au format\njson dans des collections. Le requêtage se fait en manipulant des objets et des\nfonctions javascript.\n\n## Attends, attends ... Pourquoi Go ?\nLe premier vrai argument, c'est la **performance**. Sans rentrer dans\nl'explication hyper poussée d'un [benchmark](http://jaxbot.me/articles/benchmarks_nodejs_vs_go_vs_php_3_14_2013), on peut\naffirmer sans trop de risque que Go se hisse au moins au niveau de node.js.\n\nOn peut aussi ajouter que Go est un **langage moderne**, qui inclut toutes les\n**petites friandises pour attirer le développeur** curieux et assoiffé de\nqualité. Framework de tests et outil de mise en forme du code sont natifs et\npermettent à la techno d'échapper aux interminables guerres de conventions :\n\n> De toutes façons le no-newline avant \"{\" c'est vraiment pour les pourritures\n> responsables de 99% des maux de la Terre.\n> - Un évangeliste du PSR\n\nTroisième argument de choix en Go : la **simplicité de parallélisation**.\nPersonne ne viendra te dire *\"ça c'est synchrone, sry bro.\"* ou *\"ça c'est\nasynchrone, callback it bitch.\"*. Tout repose sur le mot clef qui a donné son\nnom au langage (ou l'inverse) `go`. Tu peux te faire un `go myFunc()` et paf !\nTout ce qui est appelé dans myFunc() saute sur un thread séparé. Et pour gérer\nla synchronicité entre plusieurs thread il y a un mécanisme de canaux. Ce sont\ndes files FIFO (the First In is the First Out) dont la lecture est bloquante\n(il existe des techniques évoluées pour faire du polling, cf\n[gotour#68](http://tour.golang.org/#68)).\n\nPour finir, cerise sur le gateau, **Go compile vite**, extrêment vite, et ça va\nsauver ton intégrité mentale sur les gros projets. Par contre c'est foutu pour\ntes pauses cafés aux prétextes douteux.\n\n##Let’s Go (#nojoke, siriouz bizness)\nOn va partir du principe que tu as Go et Revel prêts pour la baston. On attaque\ndirect à sec par le classique “revel new” puisqu'on va partir de la structure de\nbase.\n\n```console\n$ revel new github.com/OwlyCode/PutainDeProjet\n```\n\nLà théoriquement, tu te retrouves avec la structure par défaut du boilerplate\nrevel, quelque chose comme ça:\n\n- app\n  - controllers\n  - views\n- conf\n- messages\n- public\n- tests\n\nC’est là qu’on se met au boulot. On a de quoi faire un site complet avec ça mais\n aucune trace de gestion de base de données là dedans. On commence donc par\n créer un dossier `app/modules` et un sous dossier `app/modules/mongo`. C’est\n dans ce dossier que va se trouver notre gestionnaire de connexion à mongoDB.\n En fait ce n’est rien de plus qu’un binding entre Revel et Mgo. La technique\n utilisée pour brancher ce binding côté Revel est celle des\n [interceptors](http://robfig.github.io/revel/manual/interceptors.html).\n\n```go\npackage mongo\n\nimport (\n    \"github.com/robfig/revel\"\n    \"labix.org/v2/mgo\"\n    \"sync\"\n)\n\n// Extension du controlleur.\ntype Mongo struct {\n    *revel.Controller\n    MongoSession  *mgo.Session\n    MongoDatabase *mgo.Database\n}\n\n// Stockage global de la session dont la visibilité est restreinte au package.\nvar session *mgo.Session\n\n// Singleton\nvar dial sync.Once\n\n// Renvoie la session mgo en cours, si aucune n'existe, elle est créée.\nfunc GetSession() *mgo.Session {\n\n    host, _ := revel.Config.String(\"mongo.host\")\n\n    // Grâce au package sync cette fonction n'est appelée\n    // qu'une seule fois et de manière synchrone.\n    dial.Do(func() {\n        var err error\n        session, err = mgo.Dial(host)\n        if err != nil {\n            panic(err)\n        }\n    })\n\n    return session\n}\n\n// Alimente les propriétés affectées au controlleur en clonant la session mongo.\nfunc (c *Mongo) Bind() revel.Result {\n    // Oublie pas de mettre mongo.database dans le app.conf, genre \"localhost\"\n    databaseName, _ := revel.Config.String(\"mongo.database\")\n\n    c.MongoSession = GetSession().Clone()\n    c.MongoDatabase = c.MongoSession.DB(databaseName)\n\n    return nil\n}\n\n// Ferme un clone\nfunc (c *Mongo) Close() revel.Result {\n\n    if c.MongoSession != nil {\n        c.MongoSession.Close()\n    }\n\n    return nil\n}\n\n// Fonction appelée au chargement de l'application.\n// Elle effectue un appel a notre fonction Bind avant\n// chaque execution du controlleur.\nfunc init() {\n    revel.InterceptMethod((*Mongo).Bind, revel.BEFORE)\n    revel.InterceptMethod((*Mongo).Close, revel.AFTER)\n    // On veut aussi fermer le clone si le controlleur plante.\n    revel.InterceptMethod((*Mongo).Close, revel.PANIC)\n}\n```\n\nOn a créé notre connexion à mongo, mais maintenant on va aussi l’utiliser. Dans\nle contrôleur, rien de plus simple :\n\n```go\nimport (\n    \"github.com/robfig/revel\"\n    \"github.com/OwlyCode/PutainDeProjet/app/modules/mongo\"\n)\n\ntype AppController struct {\n    *revel.Controller\n    mongo.Mongo // Le controlleur doit étendre notre type Mongo.\n}\n\nfunc (c *AppController) Index() revel.Result {\n    usersCollection := c.MongoDatabase.C(\"users\")\n    // tu peux maintenant manipuler ta mgo.Collection.\n    // [ ... ]\n}\n```\n\nMais tu peux aussi l’appeler ailleurs dans le projet, par exemple dans un autre\nmodule :\n\n```go\nimport (\n    \"github.com/OwlyCode/PutainDeProjet/app/modules/mongo\"\n)\n\nfunc DoStuff(user *models.User) {\n    session := mongo.GetSession()\n    defer session.Close() // Oublie pas de fermer le robinet à la fin!\n\n    // tu peux maintenant manipuler ta mgo.Session.\n    // [ ... ]\n}\n```\n\n**C'est bien beau de copier coller mais ...**\n\n... tu te demandes certainement pourquoi on a créé un dossier `app/modules`, si\nc’est pour n’y mettre qu’un sous dossier mongo dedans. Et c’est une très bonne\nquestion. En fait, notre dossier mongo représente un module du projet bien\ndélimité. A l’avenir, si tu veux aussi brancher du mysql, et bien y a juste à\ncréer `app/modules/mysql`. Rien ne change pour l’existant et tu ne pollues pas\nla racine de ton projet. L’autre avantage c’est qu’en un coup d’oeil dans ce\ndossier tu as un aperçu direct des features de l’application.\n\nEnfin, l'approche module, c'est aussi un gage de MVC. Admettons qu'on veuille\ncoder une application de facturation, il nous suffit de créer un dossier\n`app/modules/invoicing` et de travailler dans ce dossier sur toute la partie\nmétier. Comme par exemple le calcul des totaux, le calcul de la TVA etc... Grâce\n à cette approche, on garde des contrôleurs très fins et restreints à ce que\n doit être leur rôle premier : faire communiquer le modèle et la vue.\n\n## Modèles globaux, modèles locaux\nJ’ai évoqué plus haut dans la liste des technos une feature hyper sexy de mgo :\nle mapping des documents mongodb en json sur les types struct. Ce qui veut dire\nqu’avec mgo, on peut définir des modèles bien structurés. Certains seront\ncommuns à toute l’application, par exemple un utilisateur, mais d’autres seront\nspécifiques à un module, comme par exemple une facture.\n\nUne bonne pratique est d’approcher le rangement des modèles selon cette\nstructure:\n\n- app\n  - controllers\n  - __models__\n  - modules\n    - invoicing\n      - engine\n      - __models__\n    - mongo\n  - views\n- conf\n- messages\n- public\n- tests\n\nLe but du jeu évidemment c'est d'avoir le moins de modèles globaux possibles.\nIdéalement, si le dossier `app/models` n'existe pas ce n'est pas plus mal. Mais\nattention à ne pas chercher à l'éliminer au prix de la modularité du code. Il\nvaut mieux avoir un modèle explicitement déclaré comme global plutot que de\nl'isoler dans un module et de rendre tous les autres modules du projet\ndépendants de ce dernier.\n\nPourquoi c'est important ? C'est surtout parce que ça pose les bonnes questions\net amène les bonnes remarques. \"Vais-je avoir besoin de ce modèle réellement\nPARTOUT ?\", \"C'est étrange j'ai créé deux modules mais au final je passe mon\ntemps à faire des va-et-vient de l'un à l'autre... Peut être que je devrais les\nfusionner.\" ou encore \"90% de mon projet se trouve dans un seul module, il y a\npeut être un problème.\". Mais au delà de ça, ça te permets d'isoler des modules\nquasi autonomes (deux ou trois coups d'abstraction avec des interfaces et ça\nroule). Tu pourras plus tard les sortir de ton projet si par exemple tu veux les\nréutiliser sur un autre (svn include pour les ancêtres, git submodules pour les\nautres).\n\n## Pour aller plus loin\nIsoler distinctement le gestionnaire de connexion, la logique métier et les\nmodèles dans des modules est une première étape vers une architecture propre et\névolutive. Tu peux même pousser ça plus loin en utilisant des interfaces comme\nje l'ai brièvement mentionné un peu plus tôt, c'est même d'ailleurs ce que je te\nconseille. Si tu veux creuser ce sujet là tu trouveras pas mal de monde qui s'y\nintéresse en fouinant sur le\n[groupe de discussion des utilisateurs golang](https://groups.google.com/forum/#!forum/Golang-Nuts).\nTu as par exemple ce gars là qui a\n[remplacé sa dépendance à la librairie mgo par des interfaces](https://groups.google.com/forum/#!searchin/Golang-Nuts/interface/golang-nuts/Q0WhF7vhw5Q/T1tSJHT4aCoJ)\npour éviter d'inclure le package a chaque fois et faciliter ses tests. Tu peux\nenvisager de faire la même chose pour découpler tes modèles et la logique métier\n.\n\nEn attendant il ne me reste qu'à te souhaiter une bonne coding night, tu as\ntoutes les armes nécessaires pour gérer mongo dans ton projet revel. ;-)\n","__filename":"fr/articles/go/structure-revel-mgo/index.md","__url":"/fr/articles/go/structure-revel-mgo/","__resourceUrl":"/fr/articles/go/structure-revel-mgo/index.html","__dataUrl":"/fr/articles/go/structure-revel-mgo/index.html.d73189cc20d4a38e9dcf06c378b6bb8a.json"}