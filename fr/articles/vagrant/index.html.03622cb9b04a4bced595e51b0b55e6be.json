{"head":{"layout":"Post","comments":true,"date":"2013-11-08","title":"Vagrant, enlarge your VM","tags":["virtualbox","tools","vagrant"],"authors":["lionelB"],"description":"Vagrant, au cas où tu ne connaîtrais pas encore, permet de fournir des environnements de développements reproductibles, facilement…"},"body":"<p>Vagrant, au cas où tu ne connaîtrais pas encore, permet de fournir des\nenvironnements de développements reproductibles, facilement configurables et\nqui se partagent entre les membres de l’équipe. En gros, tu vas pouvoir décrire\net configurer des machines virtuelles (VM) depuis un seul fichier texte,\nle <code>Vagrantfile</code>.  Plutôt pratique pour avoir un environnement de dev\néquivalent à celui de la prod. Et tout cela avec un processus simplifié\nà l'extrême.</p>\n<h1 id=\"et-cest-pour-qui-le-beau-joujou-\"><a href=\"#et-cest-pour-qui-le-beau-joujou-\" class=\"phenomic-HeadingAnchor\">#</a>Et c’est pour qui le beau joujou ?</h1>\n<p>Vagrant s’adresse principalement à toi, mais aussi à un public\nde <strong>développeurs</strong> qui souhaitent pouvoir mettre en place rapidement\nun environnement de dev avec une machine virtuelle (genre Apache-PHP-SQL)\nsans y passer trop de temps.\nVagrant, c’est aussi pour des <strong>devops</strong> qui voudraient tester la mise en\nplace et le <em>provisioning</em> de leur infra.\nDans la doc, ils disent même que ça s’adresse aux designers\n(pour dire si c’est simple) mais faut pas déconner non plus,\non n'a jamais vu un designer dégainer une console :)</p>\n<p>Globalement le workflow Vagrant se résume à 2-3 commandes :</p>\n<ol>\n<li><code>vagrant init</code> au début du projet, puis ;</li>\n<li><code>vagrant up</code> pour lancer la VM, et ;</li>\n<li><code>vagrant halt</code>pour l’arrêter.</li>\n</ol>\n<h1 id=\"Étape-1---vagrant-init\"><a href=\"#%C3%89tape-1---vagrant-init\" class=\"phenomic-HeadingAnchor\">#</a>Étape 1 - <code>vagrant init</code></h1>\n<p>Vagrant fournit un support pour les principales plates-formes de virtualisation,\nappelées <em>Provider</em> dans la langue de Justin Bieber et avec par défaut celui\npour VirtualBox. Et cerise sur le clafoutis, tu as aussi la possibilité\nde configurer / provisionner tes box avec des scripts Chef ou Puppet\n(ou juste un script shell si t’es old-school \\o/ ).</p>\n<p>Bon, je suppose que c’est encore un peu flou, alors voilà comment ça se présente.\nUne fois installé (<a href=\"http://downloads.vagrantup.com/\">http://downloads.vagrantup.com/</a>), tu devrais avoir\nune nouvelle commande de dispo.\nAlors, dégaine ton terminal et envoie un <code>vagrant init</code>. Ça devrait créer\nun fichier <code>Vagrantfile</code>  qui va décrire ta machine virtuelle\n(ne t’inquiète pas, c’est juste écrit en Ruby).\nEn gros, de quelle box de base tu pars, comment tu la configures (réseaux,\ndossier partagé entre la VM et le host, ta machine réelle) et comment tu\nla provisionnes (via un shell, avec un script Puppet...).</p>\n<h2 id=\"la-config-de-la-box\"><a href=\"#la-config-de-la-box\" class=\"phenomic-HeadingAnchor\">#</a>La config de la box</h2>\n<p>Ensuite, voilà les quelques points à paramétrer :</p>\n<ul>\n<li><code>config.vm.box = \"base\"</code> pour spécifier le nom d’une box préalablement\ntéléchargée.</li>\n<li><code>config.vm.box_url = \"http://domain.com/path/to/above.box\"</code>. Tu remplaces\npar l’URL de la box de tes rêves. Tu peux trouver une liste assez complète\nde box plus ou moins configurées sur le site <a href=\"http://www.vagrantbox.es/\">http://www.vagrantbox.es/</a>\n(ProTip™: choisis bien le <em>provider</em> correspondant à ton gestionnaire de VM)</li>\n<li><code>config.vm.network :forwarded_port, guest: 80, host: 8080</code>. Pratique\npour accéder au serveur qui tourne sur la VM. Après, tu retrouves un peu\nles mêmes options de config réseau qu’avec VirtualBox\n(réseaux privés, connexion par pont, etc.)</li>\n<li><code># config.vm.synced_folder \"../data\", \"/vagrant_data\"</code>. Avec ça,\ntu vas pouvoir ajouter un répertoire qui sera partagé\navec ta machine virtuelle.\nPar défaut, Vagrant te permet d’accéder au répertoire courant\ndepuis <code>/home/vagrant</code> dans la VM.</li>\n</ul>\n<h2 id=\"le-provisioning-de-box\"><a href=\"#le-provisioning-de-box\" class=\"phenomic-HeadingAnchor\">#</a>Le provisioning de box</h2>\n<p>Alors attention, c'est un des trucs cools avec Vagrant. Avant, quand tu\nvoulais te monter une VM pour travailler, il fallait aussi la configurer,\ninstaller les bonnes versions de chaque brique que le projet utilise. Ça\npouvait être pénible et surtout prendre du temps.\nAvec Vagrant, tu peux automatiser cette partie, soit en utilisant simplement\nun script, soit avec un moyen moderne comme Chef ou Puppet. Et si jamais t'as\nbesoin d'un truc particulier, une config que tu utilises souvent, tu peux\ntoujours packager la box que t'as configuré avec amour pour pouvoir la\nréutiliser dès que l'occasion se présente. Sinon tu peux déjà trouver pas mal\nde box déjà prêtes à l'emploi, avec ou sans support pour Puppet, Chef...</p>\n<p>La suite du fichier contient des exemples de type de provisioning\n(Puppet, Chef Solo ou Chef Server).\nEt si jamais tu souhaites lancer un script de provisioning :</p>\n<pre><code class=\"hljs language-ruby\">Vagrant.configure(<span class=\"hljs-string\">\"2\"</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|config|</span>\n  config.vm.provision <span class=\"hljs-string\">\"shell\"</span>, <span class=\"hljs-symbol\">path:</span> <span class=\"hljs-string\">\"provision.sh\"</span>\n<span class=\"hljs-keyword\">end</span></code></pre>\n<blockquote>\n<p>Vagrant te permet aussi de créer tes propres box déjà provisionnées via\nla commande <code>vagrant package</code>. C’est assez pratique quand tu dois\ntélécharger-compiler-installer tout l’Internet.</p>\n</blockquote>\n<h1 id=\"Étape-2---vagrant-up\"><a href=\"#%C3%89tape-2---vagrant-up\" class=\"phenomic-HeadingAnchor\">#</a>Étape 2 - <code>vagrant up</code></h1>\n<p>Bon, la première fois risque de prendre du temps, parce que Vagrant\nva télécharger ta box, puis lancer le provisioning. Profites-en pour faire\nun tour sur <a href=\"http://vim-adventures.com/\">http://vim-adventures.com/</a> et jouer un peu en attendant.</p>\n<p>Une fois terminé, tu as maintenant une box dispo avec laquelle travailler.</p>\n<h1 id=\"Étape-3---joie-o\"><a href=\"#%C3%89tape-3---joie-o\" class=\"phenomic-HeadingAnchor\">#</a>Étape 3 - Joie \\o/.</h1>\n<p>Je pensais faire une troisième partie sur comment arrêter la VM mais\nça présente pas vraiment d’intérêt car ça tient en une ligne de commande.</p>\n<p>Bref, le point important de tout ça, c’est que les autres relous de ton équipe\nne pourront plus dire que pourtant ça marche bien chez eux, et qu’ils\ncomprennent pas, c’est vraiment étrange... enfin sauf s'ils sont\nde mauvaise foi :)</p>\n<ul>\n<li>L’intégrateur n’aura plus à se taper 14 installations de trucs en\nligne de commande qu’il ne retient jamais, pour rajouter un bout de CSS\nou de JS.\n(ProTip™: là, ça rentre sur un post-it !)</li>\n<li>Le dev backend n’aura plus à pleurer quand on lui demande de remettre le nez\ndans un projet vieux de 2 ans avec que des versions de PHP / Ruby ou MySQL\ndépassées qui vont casser la superbe config qu’il a mis 1 semaine à fignoler\navec les dernières techno à la mode.</li>\n<li>L’admin sys pourra packager les box de chaque projet, provisionnées\net configurées pour éviter d’avoir à configurer les postes des autres\ndev à chaque changement de projet.</li>\n</ul>\n<h1 id=\"quelques-commandes-pratiques\"><a href=\"#quelques-commandes-pratiques\" class=\"phenomic-HeadingAnchor\">#</a>Quelques commandes pratiques</h1>\n<blockquote>\n<p><code>vagrant ssh</code> te permet de te connecter en mode terminal\n<code>vagrant status</code> pour les têtes <del>à claques</del> en l’air</p>\n</blockquote>\n<h1 id=\"quelques-liens\"><a href=\"#quelques-liens\" class=\"phenomic-HeadingAnchor\">#</a>Quelques liens</h1>\n<ul>\n<li><a href=\"http://docs.vagrantup.com/v2/\">La documentation officielle de <del>viagra</del> Vagrant</a></li>\n<li><a href=\"http://jolicode.com/blog/cuisinez-vos-serveurs-comme-un-chef-premiere-partie\">Cuisinez vos serveurs comme un Chef – Première partie</a></li>\n</ul>\n","rawBody":"\nVagrant, au cas où tu ne connaîtrais pas encore, permet de fournir des\nenvironnements de développements reproductibles, facilement configurables et\nqui se partagent entre les membres de l’équipe. En gros, tu vas pouvoir décrire\net configurer des machines virtuelles (VM) depuis un seul fichier texte,\nle `Vagrantfile`.  Plutôt pratique pour avoir un environnement de dev\néquivalent à celui de la prod. Et tout cela avec un processus simplifié\nà l'extrême.\n\n# Et c’est pour qui le beau joujou ?\nVagrant s’adresse principalement à toi, mais aussi à un public\nde **développeurs** qui souhaitent pouvoir mettre en place rapidement\nun environnement de dev avec une machine virtuelle (genre Apache-PHP-SQL)\nsans y passer trop de temps.\nVagrant, c’est aussi pour des **devops** qui voudraient tester la mise en\nplace et le *provisioning* de leur infra.\nDans la doc, ils disent même que ça s’adresse aux designers\n(pour dire si c’est simple) mais faut pas déconner non plus,\non n'a jamais vu un designer dégainer une console :)\n\nGlobalement le workflow Vagrant se résume à 2-3 commandes :\n  1. `vagrant init` au début du projet, puis ;\n  2. `vagrant up` pour lancer la VM, et ;\n  1. `vagrant halt`pour l’arrêter.\n\n\n# Étape 1 - `vagrant init`\nVagrant fournit un support pour les principales plates-formes de virtualisation,\nappelées *Provider* dans la langue de Justin Bieber et avec par défaut celui\npour VirtualBox. Et cerise sur le clafoutis, tu as aussi la possibilité\nde configurer / provisionner tes box avec des scripts Chef ou Puppet\n(ou juste un script shell si t’es old-school \\o/ ).\n\nBon, je suppose que c’est encore un peu flou, alors voilà comment ça se présente.\nUne fois installé (http://downloads.vagrantup.com/), tu devrais avoir\nune nouvelle commande de dispo.\nAlors, dégaine ton terminal et envoie un `vagrant init`. Ça devrait créer\nun fichier `Vagrantfile`  qui va décrire ta machine virtuelle\n(ne t’inquiète pas, c’est juste écrit en Ruby).\nEn gros, de quelle box de base tu pars, comment tu la configures (réseaux,\ndossier partagé entre la VM et le host, ta machine réelle) et comment tu\nla provisionnes (via un shell, avec un script Puppet...).\n\n## La config de la box\nEnsuite, voilà les quelques points à paramétrer :\n- `config.vm.box = \"base\"` pour spécifier le nom d’une box préalablement\ntéléchargée.\n- `config.vm.box_url = \"http://domain.com/path/to/above.box\"`. Tu remplaces\npar l’URL de la box de tes rêves. Tu peux trouver une liste assez complète\nde box plus ou moins configurées sur le site http://www.vagrantbox.es/\n(ProTip™: choisis bien le *provider* correspondant à ton gestionnaire de VM)\n- `config.vm.network :forwarded_port, guest: 80, host: 8080`. Pratique\npour accéder au serveur qui tourne sur la VM. Après, tu retrouves un peu\nles mêmes options de config réseau qu’avec VirtualBox\n(réseaux privés, connexion par pont, etc.)\n- `# config.vm.synced_folder \"../data\", \"/vagrant_data\"`. Avec ça,\ntu vas pouvoir ajouter un répertoire qui sera partagé\navec ta machine virtuelle.\nPar défaut, Vagrant te permet d’accéder au répertoire courant\ndepuis `/home/vagrant` dans la VM.\n\n## Le provisioning de box\nAlors attention, c'est un des trucs cools avec Vagrant. Avant, quand tu\nvoulais te monter une VM pour travailler, il fallait aussi la configurer,\ninstaller les bonnes versions de chaque brique que le projet utilise. Ça\npouvait être pénible et surtout prendre du temps.\nAvec Vagrant, tu peux automatiser cette partie, soit en utilisant simplement\nun script, soit avec un moyen moderne comme Chef ou Puppet. Et si jamais t'as\nbesoin d'un truc particulier, une config que tu utilises souvent, tu peux\ntoujours packager la box que t'as configuré avec amour pour pouvoir la\nréutiliser dès que l'occasion se présente. Sinon tu peux déjà trouver pas mal\nde box déjà prêtes à l'emploi, avec ou sans support pour Puppet, Chef...\n\nLa suite du fichier contient des exemples de type de provisioning\n(Puppet, Chef Solo ou Chef Server).\nEt si jamais tu souhaites lancer un script de provisioning :\n\n```ruby\nVagrant.configure(\"2\") do |config|\n  config.vm.provision \"shell\", path: \"provision.sh\"\nend\n```\n\n> Vagrant te permet aussi de créer tes propres box déjà provisionnées via\nla commande `vagrant package`. C’est assez pratique quand tu dois\ntélécharger-compiler-installer tout l’Internet.\n\n# Étape 2 - `vagrant up`\nBon, la première fois risque de prendre du temps, parce que Vagrant\nva télécharger ta box, puis lancer le provisioning. Profites-en pour faire\nun tour sur http://vim-adventures.com/ et jouer un peu en attendant.\n\nUne fois terminé, tu as maintenant une box dispo avec laquelle travailler.\n\n# Étape 3 - Joie \\o/.\nJe pensais faire une troisième partie sur comment arrêter la VM mais\nça présente pas vraiment d’intérêt car ça tient en une ligne de commande.\n\nBref, le point important de tout ça, c’est que les autres relous de ton équipe\nne pourront plus dire que pourtant ça marche bien chez eux, et qu’ils\ncomprennent pas, c’est vraiment étrange... enfin sauf s'ils sont\nde mauvaise foi :)\n- L’intégrateur n’aura plus à se taper 14 installations de trucs en\nligne de commande qu’il ne retient jamais, pour rajouter un bout de CSS\nou de JS.\n(ProTip™: là, ça rentre sur un post-it !)\n- Le dev backend n’aura plus à pleurer quand on lui demande de remettre le nez\ndans un projet vieux de 2 ans avec que des versions de PHP / Ruby ou MySQL\ndépassées qui vont casser la superbe config qu’il a mis 1 semaine à fignoler\navec les dernières techno à la mode.\n- L’admin sys pourra packager les box de chaque projet, provisionnées\net configurées pour éviter d’avoir à configurer les postes des autres\ndev à chaque changement de projet.\n\n# Quelques commandes pratiques\n> `vagrant ssh` te permet de te connecter en mode terminal\n> `vagrant status` pour les têtes ~~à claques~~ en l’air\n\n# Quelques liens\n* [La documentation officielle de ~~viagra~~ Vagrant](http://docs.vagrantup.com/v2/)\n* [Cuisinez vos serveurs comme un Chef – Première partie](http://jolicode.com/blog/cuisinez-vos-serveurs-comme-un-chef-premiere-partie)\n","__filename":"fr/articles/vagrant/index.md","__url":"/fr/articles/vagrant/","__resourceUrl":"/fr/articles/vagrant/index.html","__dataUrl":"/fr/articles/vagrant/index.html.03622cb9b04a4bced595e51b0b55e6be.json"}