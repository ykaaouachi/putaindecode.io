{"head":{"layout":"Post","comments":true,"date":"2013-12-26","title":"Responsive webdesign et structure du DOM","tags":["responsive","html","javascript"],"authors":["neemzy"],"description":"Bien, commençons par le commencement, si tu veux bien. Le responsive webdesign, ça te dit quelque chose ? Oui ? Bon. Dans ce cas, tu as…"},"body":"<p>Bien, commençons par le commencement, si tu veux bien. Le <strong>responsive\nwebdesign</strong>, ça te dit quelque chose ? Oui ? Bon. Dans ce cas, tu as peut-être\ncomme moi déjà été confronté à un cas de figure plutôt ennuyeux. Que tu sois\nadepte du <em>mobile-first</em> ou irréductible dégradateur progressiste, il est\nforcément arrivé un moment où tu t'es dit cette chose toute bête :</p>\n<blockquote>\n<p>Ce serait quand même pas mal si cet élément était ici plutôt que là. Sauf que\nnon.</p>\n</blockquote>\n<p>Le cas typique est celui d'un menu un minimum complexe, dont on réordonnerait\nvolontiers les éléments un chouïa au-dessus ou en deçà d'une certaine taille\nd'écran. Et là, il faut bien avouer qu'il n'existe pas vraiment de solution\nmiracle.</p>\n<p>J'entends déjà les plus teigneux vociférer qu'avec une meilleure réflexion en\namont, le <em>markup</em> aurait été mieux conçu et on n'en serait pas là. Bien qu'un\npeu facile, cette réponse peut s'avérer vraie dans un certain nombre de cas\n(admire la phrase du mec qui ne se mouille pas). Mais quoi qu'il en soit, si tu\nen es au stade de ce type de questionnement, c'est qu'il est de toute façon trop\ntard pour faire machine arrière.</p>\n<p>Au train où va l'innovation dans notre branche, surtout pour tout ce qui touche\nau mobile en général et à la conception web en particulier, il n'est pas exclu\nque les bouts de ficelle que je vais t'exposer ici soient obsolètes dans six\nmois, et que cet article fasse un comeback incroyable sur Twitter, les RT\nmoquant gentiment les techniques précolombiennes auxquelles nous étions réduits\nil n'y a encore pas si longtemps. Va savoir, je pourrais bien faire l'objet\nd'une célébrité paradoxalement décadente, à la Rick Astley. En attendant, il\ns'agit des seules solutions que je connais pour ce type de cas. Si tu as mieux à\nproposer, je te recommande chaudement de l'ouvrir dans les commentaires pour\nqu'on en bénéficie tous. C'est bon, on y va ? Je t'attends, moi !</p>\n<h2 id=\"À-lancienne--do-repeat-yourself\"><a href=\"#%C3%80-lancienne--do-repeat-yourself\" class=\"phenomic-HeadingAnchor\">#</a>À l'ancienne : Do Repeat Yourself</h2>\n<p>Imagine une page de blog, où apparaissent consécutivement le titre de l'article,\nla photo l'illustrant, et enfin le texte. Comme une photo, selon la qualité de\nta connexion, ça peut être un peu galère à charger sur mobile (et que la\nquestion des images en responsive design\n<a href=\"http://css-tricks.com/responsive-images-hard/\">est encore un sacré bordel</a>), tu\nprends la décision de passer la photo en dessous du contenu textuel pour que tes\nvisiteurs puissent lire leur article peinards même si la photo n'a pas fini de\ncharger - et tu vas même en profiter pour la remplacer par une version plus\nlight.</p>\n<p>Dans un tel cas, la meilleure solution peut encore être de dupliquer ta balise\n<code>img</code>, et de masquer l'une ou l'autre avec CSS en fonction de la taille d'écran,\ngrâce à une <code>media query</code>. Voilà un exemple rudimentaire :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Mon super article<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/mon/image/desktop.jpg\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"img-desktop\"</span> /></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Lâche tes comm' !<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/mon/image/mobile.jpg\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"img-mobile\"</span> /></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span></code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.img-desktop</span> {\n  <span class=\"hljs-comment\">/* Par défaut, l'image desktop est cachée */</span>\n  <span class=\"hljs-attribute\">display</span>: none;\n}\n\n@<span class=\"hljs-keyword\">media</span> screen and (min-width: <span class=\"hljs-number\">768px</span>) {\n  <span class=\"hljs-comment\">/* Si on est sur \"grand\" écran, on affiche l'image desktop... */</span>\n  <span class=\"hljs-selector-class\">.img-desktop</span> {\n    <span class=\"hljs-attribute\">display</span>: block;\n  }\n\n  <span class=\"hljs-comment\">/* ...et on masque l'image mobile */</span>\n  <span class=\"hljs-selector-class\">.img-mobile</span> {\n    <span class=\"hljs-attribute\">display</span>: none;\n  }\n}</code></pre>\n<p>Évidemment, le gros inconvénient de ce type de solution est que qui dit\nduplication de contenu dit augmentation du poids total. Dans le cas d'un contenu\npurement textuel, selon sa taille, cela peut être négligeable. J'ai ici\nvolontairement pris l'exemple le moins adapté : une image, qu'il ne faut\nabsolument pas faire charger deux fois à nos visiteurs. On va tricher un peu\navec JavaScript :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Mon super article<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n\n  <span class=\"hljs-comment\">&#x3C;!-- Ces images ne seront pas chargées car elles n'ont pas d'attribut src --></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">data-src</span>=<span class=\"hljs-string\">\"/mon/image/desktop.jpg\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"img-desktop\"</span> /></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Lâche tes comm' !<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">data-src</span>=<span class=\"hljs-string\">\"/mon/image/mobile.jpg\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"img-mobile\"</span> /></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">noscript</span>></span>\n    <span class=\"hljs-comment\">&#x3C;!-- Cette image ne sera chargée que si le visiteur n'a pas activé le JS --></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/mon/image/mobile.jpg\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"img-mobile img-noscript\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">noscript</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span></code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.img-desktop</span> {\n  <span class=\"hljs-attribute\">display</span>: none;\n}\n\n@<span class=\"hljs-keyword\">media</span> screen and (min-width: <span class=\"hljs-number\">768px</span>) {\n  <span class=\"hljs-selector-class\">.img-desktop</span> {\n    <span class=\"hljs-attribute\">display</span>: block;\n  }\n\n  <span class=\"hljs-selector-class\">.img-mobile</span> {\n    <span class=\"hljs-attribute\">display</span>: none;\n  }\n}\n\n<span class=\"hljs-selector-class\">.img-noscript</span> {\n  <span class=\"hljs-comment\">/* On surcharge le style desktop pour s'assurer\n     que cette image s'affiche quelle que soit la taille de l'écran */</span>\n\n  <span class=\"hljs-attribute\">display</span>: block;\n}</code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> handleImages = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// On charge les images ayant l'attribut data-src,</span>\n  <span class=\"hljs-comment\">// non encore chargées (attribut src indéfini)</span>\n  <span class=\"hljs-comment\">// et non masquées par CSS</span>\n\n  [].forEach.call(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'img[data-src]:not([src])'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.getComputedStyle(el).display != <span class=\"hljs-string\">'none'</span>) {\n      el.src = el.getAttribute(<span class=\"hljs-string\">'data-src'</span>);\n    }\n  });\n};\n\n<span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'load'</span>, handleImages);\n<span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'resize'</span>, handleImages);</code></pre>\n<p>Ainsi, seules les images nécessaires seront chargées avec la page. J'applique\négalement le même traitement au <code>resize</code> ; c'est un peu bourrin, je te\nl'accorde, on pourrait probablement faire plus fin avec <code>matchMedia</code>.</p>\n<p>Dans le cas d'un visiteur naviguant sans JavaScript, seule l'image mobile est\nchargée : je pars du principe qu'étant donné qu'on ne peut pas définir laquelle\ndes deux versions de l'image est la mieux adaptée pour lui, autant lui envoyer\nla plus légère.</p>\n<h2 id=\"js-powa--enquirejs\"><a href=\"#js-powa--enquirejs\" class=\"phenomic-HeadingAnchor\">#</a>JS powa : enquire.js</h2>\n<p>La seconde solution peut tout à fait être réalisée \"à la main\", mais je vais te\nparler d'une petite librairie que j'aime beaucoup et que j'ai déjà utilisée dans\nce genre de cas. Elle se nomme <a href=\"http://wicky.nillia.ms/enquire.js/\">enquire.js</a>\net permet tout simplement d'affecter des callbacks à des media queries :</p>\n<pre><code class=\"hljs language-javascript\">enquire.register(<span class=\"hljs-string\">'screen and (min-width: 768px)'</span>, {\n  <span class=\"hljs-attr\">match</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// L'écran fait 768px de large ou plus...</span>\n  },\n\n  <span class=\"hljs-attr\">unmatch</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// ...et ici, 767px de large ou moins.</span>\n    <span class=\"hljs-comment\">// La librairie repose sur matchMedia et matchMedia.addListener</span>\n  }\n});</code></pre>\n<p>Plutôt sympa, non ? Pour reprendre notre exemple de tout à l'heure (le CSS n'est\nplus nécessaire) :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Mon super article<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">data-src</span>=<span class=\"hljs-string\">\"/mon/image/desktop.jpg\"</span> <span class=\"hljs-attr\">data-mobile-src</span>=<span class=\"hljs-string\">\"/mon/image/mobile.jpg\"</span> /></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>Lâche tes comm' !<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">noscript</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/mon/image/mobile.jpg\"</span> /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">noscript</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span></code></pre>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> content = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'p'</span>),\n\n  switchImage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">isMobile</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> attr = isMobile ? <span class=\"hljs-string\">'data-mobile-src'</span> : <span class=\"hljs-string\">'data-src'</span>;\n\n    [].forEach.call(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'img['</span> + attr + <span class=\"hljs-string\">']'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el</span>) </span>{\n      <span class=\"hljs-comment\">// On affecte l'une ou l'autre source à notre image,</span>\n      <span class=\"hljs-comment\">// entraînant son chargement si nécessaire.</span>\n      el.src = el.getAttribute(attr);\n\n      <span class=\"hljs-comment\">// On en profite pour la bouger avant ou après le contenu</span>\n      content.parentNode.insertBefore(el, isMobile ? content.nextSibling : content);\n    });\n  };\n\nenquire.register(<span class=\"hljs-string\">'screen and (min-width: 768px)'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  switchImage(<span class=\"hljs-literal\">false</span>);\n});\n\nenquire.register(<span class=\"hljs-string\">'screen and (max-width: 767px)'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  switchImage(<span class=\"hljs-literal\">true</span>);\n});</code></pre>\n<p>On peut ainsi gérer facilement le chargement de l'image, ainsi que son\nemplacement. J'utilise ici deux handlers distincts pour m'assurer qu'enquire\nfait bien son boulot au chargement aussi, dans tous les cas (les callbacks\n<code>unmatch</code> ne sont appelés qu'au redimensionnement, semble-t-il : avec un seul\nhandler, l'image n'arrive donc jamais si on charge la page avec un écran d'une\nlargeur inférieure à 768px).</p>\n<h2 id=\"thats-all-youve-got-bitch\"><a href=\"#thats-all-youve-got-bitch\" class=\"phenomic-HeadingAnchor\">#</a>That's all you've got, bitch?</h2>\n<p>On peut également, puisque tu y tiens tant, évoquer d'autres solutions plus\nmarginales mais qui méritent d'être citées.</p>\n<h3 id=\"foundation\"><a href=\"#foundation\" class=\"phenomic-HeadingAnchor\">#</a>Foundation</h3>\n<p><a href=\"http://foundation.zurb.com/\">Foundation</a> propose, dans sa version 5 (et\npeut-être même avant, j'ai pas vérifié) un peu de sucre syntaxique HTML\npermettant de switcher (via JS, œuf corse) simplement entre différents contenus\npour l'élément sur lequel on l'utilise.</p>\n<p>C'est pas mal. Ça donne ça (tiré de <a href=\"http://foundation.zurb.com/docs/components/interchange.html\">la doc</a>) :</p>\n<blockquote>\n<p>We use the data-interchange attribute on a markup container (probably a div)\nto do this. Here's an example which loads up a small, static map on mobile, a\nlarger static map for medium-sized devices, and a full interactive Google map\non large display devices.</p>\n</blockquote>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-interchange</span>=<span class=\"hljs-string\">\"[../examples/interchange/default.html, (small)],\n                       [../examples/interchange/medium.html, (medium)],\n                       [../examples/interchange/large.html, (large)]\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">data-alert</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"alert-box secondary radius\"</span>></span>\n    This is the default content.\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"close\"</span>></span>&#x26;times;<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></code></pre>\n<p><code>small</code>, <code>medium</code> et <code>large</code> étant des raccourcis pour des media queries données\n(c'est dans <a href=\"http://foundation.zurb.com/docs/components/interchange.html\">la doc</a>,\ntoujours. J'insiste.)</p>\n<h3 id=\"flexbox-pas-toi-david\"><a href=\"#flexbox-pas-toi-david\" class=\"phenomic-HeadingAnchor\">#</a>Flexbox (pas toi, David)</h3>\n<p>On peut également, comme l'a très justement souligné lionelB, se\npencher (mais pas trop) sur le cas de Flexbox, qui est un nouveau type de\npositionnement introduit en CSS3. La <a href=\"http://caniuse.com/#search=flexbox\">compatibilité</a>\nn'est pas encore au top (surtout grâce à IE, qui l'eût cru) mais autant se tenir\nprêts ! Pour ceux qui ont dormi, en gros, tu définis un conteneur :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.flex-container</span> {\n  <span class=\"hljs-attribute\">display</span>: flex;\n\n  <span class=\"hljs-comment\">/* ou bien */</span>\n\n  <span class=\"hljs-attribute\">display</span>: inline-flex;\n}</code></pre>\n<p>...et tu donnes des numéros à ses enfants, comme à Bangkok :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.title</span> {\n  <span class=\"hljs-attribute\">order</span>: <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-selector-class\">.content</span> {\n  <span class=\"hljs-attribute\">order</span>: <span class=\"hljs-number\">2</span>;\n}\n\n<span class=\"hljs-selector-class\">.image</span> {\n  <span class=\"hljs-attribute\">order</span>: <span class=\"hljs-number\">3</span>;\n}\n\n<span class=\"hljs-comment\">/*\nBien sûr, tu as été assez malin pour mettre ton image en dernier dans le DOM...\n...n'est-ce pas ?\n*/</span>\n\n@<span class=\"hljs-keyword\">media</span> screen and (min-width: <span class=\"hljs-number\">768px</span>) {\n  <span class=\"hljs-selector-class\">.content</span> {\n    <span class=\"hljs-attribute\">order</span>: <span class=\"hljs-number\">3</span>;\n  }\n\n  <span class=\"hljs-selector-class\">.image</span> {\n    <span class=\"hljs-attribute\">order</span>: <span class=\"hljs-number\">2</span>;\n  }\n}</code></pre>\n<p>Et voilà, pas besoin d'avoir fait Polly Pocket pour percevoir à quel point la\nflexibilité et la propreté du code que cette technique nous permet d'écrire\nrésolvent notre problème en deux secondes douze. Ce n'est évidemment ici que la\npartie émergée du flexberg ; il y a des tas de bonnes ressources qui vous\nexpliqueront ça en long, en large et en travers bien mieux que moi, notamment\n<a href=\"http://www.adobe.com/devnet/html5/articles/working-with-flexbox-the-new-spec.html\">cet article</a>\nsur lequel j'ai honteusement pompé les snippets de cette partie.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" class=\"phenomic-HeadingAnchor\">#</a>Conclusion</h2>\n<p>Comme tu l'as vu, rien de ce que je t'ai montré n'est réellement satisfaisant :\npour pouvoir contrôler le positionnement d'un élément dans le DOM dans le cadre\nd'un webdesign responsive, tu dois soit le dupliquer et jouer à cache-cache,\nsoit le déplacer avec JavaScript. Aussi, je serais ravi que tu partages ton\nopinion, tes idées ou tes retours d'XP à ce sujet. Ça me fera de la lecture pour\npasser le temps, et toi tu feras quelque chose de constructif !</p>\n<p>Il est temps pour moi de te laisser reprendre le cours de ta vie. Peut-être nos\nroutes se croiseront-elles de nouveau. Dans l'intervalle, va, vis, et code !</p>\n","rawBody":"\nBien, commençons par le commencement, si tu veux bien. Le **responsive\nwebdesign**, ça te dit quelque chose ? Oui ? Bon. Dans ce cas, tu as peut-être\ncomme moi déjà été confronté à un cas de figure plutôt ennuyeux. Que tu sois\nadepte du *mobile-first* ou irréductible dégradateur progressiste, il est\nforcément arrivé un moment où tu t'es dit cette chose toute bête :\n\n> Ce serait quand même pas mal si cet élément était ici plutôt que là. Sauf que\n> non.\n\nLe cas typique est celui d'un menu un minimum complexe, dont on réordonnerait\nvolontiers les éléments un chouïa au-dessus ou en deçà d'une certaine taille\nd'écran. Et là, il faut bien avouer qu'il n'existe pas vraiment de solution\nmiracle.\n\nJ'entends déjà les plus teigneux vociférer qu'avec une meilleure réflexion en\namont, le *markup* aurait été mieux conçu et on n'en serait pas là. Bien qu'un\npeu facile, cette réponse peut s'avérer vraie dans un certain nombre de cas\n(admire la phrase du mec qui ne se mouille pas). Mais quoi qu'il en soit, si tu\nen es au stade de ce type de questionnement, c'est qu'il est de toute façon trop\ntard pour faire machine arrière.\n\nAu train où va l'innovation dans notre branche, surtout pour tout ce qui touche\nau mobile en général et à la conception web en particulier, il n'est pas exclu\nque les bouts de ficelle que je vais t'exposer ici soient obsolètes dans six\nmois, et que cet article fasse un comeback incroyable sur Twitter, les RT\nmoquant gentiment les techniques précolombiennes auxquelles nous étions réduits\nil n'y a encore pas si longtemps. Va savoir, je pourrais bien faire l'objet\nd'une célébrité paradoxalement décadente, à la Rick Astley. En attendant, il\ns'agit des seules solutions que je connais pour ce type de cas. Si tu as mieux à\nproposer, je te recommande chaudement de l'ouvrir dans les commentaires pour\nqu'on en bénéficie tous. C'est bon, on y va ? Je t'attends, moi !\n\n## À l'ancienne : Do Repeat Yourself\n\nImagine une page de blog, où apparaissent consécutivement le titre de l'article,\nla photo l'illustrant, et enfin le texte. Comme une photo, selon la qualité de\nta connexion, ça peut être un peu galère à charger sur mobile (et que la\nquestion des images en responsive design\n[est encore un sacré bordel](http://css-tricks.com/responsive-images-hard/)), tu\nprends la décision de passer la photo en dessous du contenu textuel pour que tes\nvisiteurs puissent lire leur article peinards même si la photo n'a pas fini de\ncharger - et tu vas même en profiter pour la remplacer par une version plus\nlight.\n\nDans un tel cas, la meilleure solution peut encore être de dupliquer ta balise\n`img`, et de masquer l'une ou l'autre avec CSS en fonction de la taille d'écran,\ngrâce à une `media query`. Voilà un exemple rudimentaire :\n\n```html\n<article>\n  <h1>Mon super article</h1>\n\n  <img src=\"/mon/image/desktop.jpg\" class=\"img-desktop\" />\n\n  <p>Lâche tes comm' !</p>\n\n  <img src=\"/mon/image/mobile.jpg\" class=\"img-mobile\" />\n</article>\n```\n\n```css\n.img-desktop {\n  /* Par défaut, l'image desktop est cachée */\n  display: none;\n}\n\n@media screen and (min-width: 768px) {\n  /* Si on est sur \"grand\" écran, on affiche l'image desktop... */\n  .img-desktop {\n    display: block;\n  }\n\n  /* ...et on masque l'image mobile */\n  .img-mobile {\n    display: none;\n  }\n}\n```\n\nÉvidemment, le gros inconvénient de ce type de solution est que qui dit\nduplication de contenu dit augmentation du poids total. Dans le cas d'un contenu\npurement textuel, selon sa taille, cela peut être négligeable. J'ai ici\nvolontairement pris l'exemple le moins adapté : une image, qu'il ne faut\nabsolument pas faire charger deux fois à nos visiteurs. On va tricher un peu\navec JavaScript :\n\n```html\n<article>\n  <h1>Mon super article</h1>\n\n  <!-- Ces images ne seront pas chargées car elles n'ont pas d'attribut src -->\n  <img data-src=\"/mon/image/desktop.jpg\" class=\"img-desktop\" />\n\n  <p>Lâche tes comm' !</p>\n\n  <img data-src=\"/mon/image/mobile.jpg\" class=\"img-mobile\" />\n\n  <noscript>\n    <!-- Cette image ne sera chargée que si le visiteur n'a pas activé le JS -->\n    <img src=\"/mon/image/mobile.jpg\" class=\"img-mobile img-noscript\" />\n  </noscript>\n</article>\n```\n\n```css\n.img-desktop {\n  display: none;\n}\n\n@media screen and (min-width: 768px) {\n  .img-desktop {\n    display: block;\n  }\n\n  .img-mobile {\n    display: none;\n  }\n}\n\n.img-noscript {\n  /* On surcharge le style desktop pour s'assurer\n     que cette image s'affiche quelle que soit la taille de l'écran */\n\n  display: block;\n}\n```\n\n```javascript\nvar handleImages = function() {\n  // On charge les images ayant l'attribut data-src,\n  // non encore chargées (attribut src indéfini)\n  // et non masquées par CSS\n\n  [].forEach.call(document.querySelectorAll('img[data-src]:not([src])'), function(el) {\n    if (window.getComputedStyle(el).display != 'none') {\n      el.src = el.getAttribute('data-src');\n    }\n  });\n};\n\nwindow.addEventListener('load', handleImages);\nwindow.addEventListener('resize', handleImages);\n```\n\nAinsi, seules les images nécessaires seront chargées avec la page. J'applique\négalement le même traitement au `resize` ; c'est un peu bourrin, je te\nl'accorde, on pourrait probablement faire plus fin avec `matchMedia`.\n\nDans le cas d'un visiteur naviguant sans JavaScript, seule l'image mobile est\nchargée : je pars du principe qu'étant donné qu'on ne peut pas définir laquelle\ndes deux versions de l'image est la mieux adaptée pour lui, autant lui envoyer\nla plus légère.\n\n## JS powa : enquire.js\n\nLa seconde solution peut tout à fait être réalisée \"à la main\", mais je vais te\nparler d'une petite librairie que j'aime beaucoup et que j'ai déjà utilisée dans\nce genre de cas. Elle se nomme [enquire.js](http://wicky.nillia.ms/enquire.js/)\net permet tout simplement d'affecter des callbacks à des media queries :\n\n```javascript\nenquire.register('screen and (min-width: 768px)', {\n  match: function() {\n    // L'écran fait 768px de large ou plus...\n  },\n\n  unmatch: function() {\n    // ...et ici, 767px de large ou moins.\n    // La librairie repose sur matchMedia et matchMedia.addListener\n  }\n});\n```\n\nPlutôt sympa, non ? Pour reprendre notre exemple de tout à l'heure (le CSS n'est\nplus nécessaire) :\n\n```html\n<article>\n  <h1>Mon super article</h1>\n\n  <img data-src=\"/mon/image/desktop.jpg\" data-mobile-src=\"/mon/image/mobile.jpg\" />\n\n  <p>Lâche tes comm' !</p>\n\n  <noscript>\n    <img src=\"/mon/image/mobile.jpg\" />\n  </noscript>\n</article>\n```\n\n```javascript\nvar content = document.querySelector('p'),\n\n  switchImage = function(isMobile) {\n    var attr = isMobile ? 'data-mobile-src' : 'data-src';\n\n    [].forEach.call(document.querySelectorAll('img[' + attr + ']'), function(el) {\n      // On affecte l'une ou l'autre source à notre image,\n      // entraînant son chargement si nécessaire.\n      el.src = el.getAttribute(attr);\n\n      // On en profite pour la bouger avant ou après le contenu\n      content.parentNode.insertBefore(el, isMobile ? content.nextSibling : content);\n    });\n  };\n\nenquire.register('screen and (min-width: 768px)', function() {\n  switchImage(false);\n});\n\nenquire.register('screen and (max-width: 767px)', function() {\n  switchImage(true);\n});\n```\n\nOn peut ainsi gérer facilement le chargement de l'image, ainsi que son\nemplacement. J'utilise ici deux handlers distincts pour m'assurer qu'enquire\nfait bien son boulot au chargement aussi, dans tous les cas (les callbacks\n`unmatch` ne sont appelés qu'au redimensionnement, semble-t-il : avec un seul\nhandler, l'image n'arrive donc jamais si on charge la page avec un écran d'une\nlargeur inférieure à 768px).\n\n## That's all you've got, bitch?\n\nOn peut également, puisque tu y tiens tant, évoquer d'autres solutions plus\nmarginales mais qui méritent d'être citées.\n\n### Foundation\n\n[Foundation](http://foundation.zurb.com/) propose, dans sa version 5 (et\npeut-être même avant, j'ai pas vérifié) un peu de sucre syntaxique HTML\npermettant de switcher (via JS, œuf corse) simplement entre différents contenus\npour l'élément sur lequel on l'utilise.\n\nC'est pas mal. Ça donne ça (tiré de [la doc](http://foundation.zurb.com/docs/components/interchange.html)) :\n\n> We use the data-interchange attribute on a markup container (probably a div)\n> to do this. Here's an example which loads up a small, static map on mobile, a\n> larger static map for medium-sized devices, and a full interactive Google map\n> on large display devices.\n\n```html\n<div data-interchange=\"[../examples/interchange/default.html, (small)],\n                       [../examples/interchange/medium.html, (medium)],\n                       [../examples/interchange/large.html, (large)]\">\n  <div data-alert class=\"alert-box secondary radius\">\n    This is the default content.\n    <a href=\"#\" class=\"close\">&times;</a>\n  </div>\n</div>\n```\n\n`small`, `medium` et `large` étant des raccourcis pour des media queries données\n(c'est dans [la doc](http://foundation.zurb.com/docs/components/interchange.html),\ntoujours. J'insiste.)\n\n### Flexbox (pas toi, David)\n\nOn peut également, comme l'a très justement souligné lionelB, se\npencher (mais pas trop) sur le cas de Flexbox, qui est un nouveau type de\npositionnement introduit en CSS3. La [compatibilité](http://caniuse.com/#search=flexbox)\nn'est pas encore au top (surtout grâce à IE, qui l'eût cru) mais autant se tenir\nprêts ! Pour ceux qui ont dormi, en gros, tu définis un conteneur :\n\n```css\n.flex-container {\n  display: flex;\n\n  /* ou bien */\n\n  display: inline-flex;\n}\n```\n\n...et tu donnes des numéros à ses enfants, comme à Bangkok :\n\n```css\n.title {\n  order: 1;\n}\n\n.content {\n  order: 2;\n}\n\n.image {\n  order: 3;\n}\n\n/*\nBien sûr, tu as été assez malin pour mettre ton image en dernier dans le DOM...\n...n'est-ce pas ?\n*/\n\n@media screen and (min-width: 768px) {\n  .content {\n    order: 3;\n  }\n\n  .image {\n    order: 2;\n  }\n}\n```\n\nEt voilà, pas besoin d'avoir fait Polly Pocket pour percevoir à quel point la\nflexibilité et la propreté du code que cette technique nous permet d'écrire\nrésolvent notre problème en deux secondes douze. Ce n'est évidemment ici que la\npartie émergée du flexberg ; il y a des tas de bonnes ressources qui vous\nexpliqueront ça en long, en large et en travers bien mieux que moi, notamment\n[cet article](http://www.adobe.com/devnet/html5/articles/working-with-flexbox-the-new-spec.html)\nsur lequel j'ai honteusement pompé les snippets de cette partie.\n\n## Conclusion\n\nComme tu l'as vu, rien de ce que je t'ai montré n'est réellement satisfaisant :\npour pouvoir contrôler le positionnement d'un élément dans le DOM dans le cadre\nd'un webdesign responsive, tu dois soit le dupliquer et jouer à cache-cache,\nsoit le déplacer avec JavaScript. Aussi, je serais ravi que tu partages ton\nopinion, tes idées ou tes retours d'XP à ce sujet. Ça me fera de la lecture pour\npasser le temps, et toi tu feras quelque chose de constructif !\n\nIl est temps pour moi de te laisser reprendre le cours de ta vie. Peut-être nos\nroutes se croiseront-elles de nouveau. Dans l'intervalle, va, vis, et code !\n","__filename":"fr/articles/html/responsive-dom/index.md","__url":"/fr/articles/html/responsive-dom/","__resourceUrl":"/fr/articles/html/responsive-dom/index.html","__dataUrl":"/fr/articles/html/responsive-dom/index.html.35e14a7341d8d9587025e8ea3b415b79.json"}