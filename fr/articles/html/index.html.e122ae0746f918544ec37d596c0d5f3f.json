{"head":{"layout":"Post","comments":true,"date":"2013-11-07","title":"HTML ? Hache-Thé-Aime-Elle vous dites ?","tags":["html"],"authors":["MoOx"],"description":"Ahh, le HTML. LE H.T.M.L. Sacré langage hein ? On le connait tous ce fameux truc qu'on retrouve dans pas mal d'URL : .html. Oui, d'accord,…"},"body":"<p>Ahh, le HTML. LE <a href=\"http://fr.wikipedia.org/wiki/HTML\">H.T.M.L</a>. Sacré langage hein ?</p>\n<p>On le connait tous ce fameux truc qu'on retrouve dans pas mal d'URL : <code>.html</code>.\nOui, d'accord, par le passé on avait l'extension de radin <code>.htm</code>, mais elle n'a\nclairement pas duré.</p>\n<p>Vous vous demandez déjà ce qu'il y a à raconter sur l'HTML peut-être ? Et bien,\nje ne suis pas là pour vous apprendre toutes les balises, leurs enfants, parents,\nles cousins cousines, patati patata… Ah ça non, j'ai autre chose à faire,\net vous aussi. Et si c'est ce que vous cherchez, vous trouverez ce qu'il vous\nfaut sur <a href=\"http://docs.webplatform.org/wiki/html/elements\">tout</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">un</a>\n<a href=\"http://www.w3.org/html/wg/drafts/html/CR/dom.html#elements\">tas</a>\n<a href=\"http://en.wikipedia.org/wiki/HTML_element\">d'autres</a>\n<a href=\"http://www.vectorskin.com/referentiels-standards-w3c/balises-html5/\">sites</a>.</p>\n<p>Ce que je vais faire par contre, c'est tenter de partager un document sérieux\n(dans le fond hein) avec tout pleins de conseils super pertinents pour que vous\nécriviez de l'HTML comme personne.\nNon, je déconne. En fait, ça va être la grosse marrade avec les trucs\nles plus nazes que je peux vous raconter. C'est parti mon jQuéri.</p>\n<h2 id=\"lancien-testament\"><a href=\"#lancien-testament\" class=\"phenomic-HeadingAnchor\">#</a>L'ancien testament</h2>\n<p>Si vous avez ouvert ne serait-ce que quelques documents HTML dans votre vie,\nvous avez dû croiser ce qu'on appelle un <a href=\"http://fr.wikipedia.org/wiki/Doctype\">doctype</a>\nqui ressemble à ça :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"></span></code></pre>\n<p>Vous pourrez remarquer dans ce <del>petit</del> gros bout de code bien relou qu'il y a\nune <a href=\"http://fr.wikipedia.org/wiki/Uniform_Resource_Locator\">URL</a> :\nc'est tout simplement la DTD (doctype) du langage en question.\nAvec les spécifications pour la validation, toussa toussa…\nSi vous avez 2 minutes, allez jeter un coup d'œil.</p>\n<p>Je ne vais pas vous le cacher, et même si en théorie, par héritage de SGML/XML\nça part d'une bonne intention, dans la pratique ça sert juste à se toucher la\nnouille sur la validation.\nCar aujourd'hui HTML (5) n'est clairement plus du XML.</p>\n<p>Oui bon ok, moi-même à une époque j'ai eu ma passe où je collais ce petit badge\npartout dans mes footers :</p>\n<figure>\n  <a href=\"http://validator.w3.org/check?uri=referer\">\n    <img src=\"http://www.w3.org/Icons/valid-xhtml10\"\n        alt=\"Valid XHTML 1.0 Transitional\" height=\"31\" width=\"88\" />\n  </a>\n  <figcaption>Ça pète la classe hein ?</figcaption>\n</figure>\n<p>Mais bon les conneries, ça va un moment.\nPour info, j'ai dû valider le code suivant pour obtenir ce logo :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"></span>\n <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://www.w3.org/1999/xhtml\"</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span> <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></code></pre>\n<p>Ben dites donc, c'est propre tout ça. Un petit document tout vide mais déjà\nbien rempli.\nMais attendez, en 2013 on peut pas faire mieux ? Oh si !</p>\n<h2 id=\"le-nouveau-testament\"><a href=\"#le-nouveau-testament\" class=\"phenomic-HeadingAnchor\">#</a>Le nouveau testament</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!doctype html></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span> <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span></code></pre>\n<p>Il faut savoir qu'un simple document <em>valide</em>, peut se résumer à ça.\nOui oui mes cocos, ce document est parfaitement valide. Voilà, j'voulais vous le\ndire. Arrêtez d'utiliser des doctypes dans tous les sens, ça ne sert à rien.\nSachant la qualité du code qu'on trouve sur les internets, les navigateurs\ns'arrêtent au parsing lorsqu'ils voient ça <code>&#x3C;!doctype html</code>\n(c'est <a href=\"http://paulrouget.com/\">Paul Rouget</a> qui me l'a dit, je le crois donc\nsur parole).\nEt après ma petite parenthèse ci-dessous, je vais vous expliquer pourquoi.</p>\n<p>Car je sais ce que certains vont me rétorquer.</p>\n<blockquote>\n<p>Oui mais moi monsieur, je valide en <strong>XHTML 1.1 Strict Turbo X Prime Ultra</strong><br />\nPuis ton document valide là, il sera valide quand HTML5 sera finalisé…</p>\n</blockquote>\n<p>Dans un sens ils n'auraient pas tort. Mais dans la pratique, les navigateurs\ns'en contrebranlent de savoir quel type d'HTML vous utilisez\n<small>(à moins que vous aimiez jouer avec la mort et que vous utilisez le\nprologue XML lorsque vous servez de l'XHTML…)</small>.\nCar quand bien même vous utilisez un doctype à rallonge, il est tout à fait\npossible que vous vous chiiez, et que vous laissiez des erreurs.\nOui, l'erreur est humaine…\nPuis HTML 5 est déjà bien implémenté dans les grandes lignes. Et ça car il est\npresque rétrocompatible.\nVous devriez le comprendre d'ici la fin de cet écrit. Ou pas. Mais je vous le\ndis, il a été pensé dans ce sens.</p>\n<p>Revenons à la validation. Du coup, à quoi ça sert de valider ?\nOn va voir ça par un exemple digne des plus grands diplômes.</p>\n<h2 id=\"ce-p-fout-la-merde\"><a href=\"#ce-p-fout-la-merde\" class=\"phenomic-HeadingAnchor\">#</a>Ce <code>&#x3C;p></code> fout la merde</h2>\n<p>Prenons le code suivant :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!DOCTYPE html></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Putain de page<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"css\">\n<span class=\"hljs-selector-tag\">p</span> {\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">2em</span>;\n  <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">10em</span>;\n}\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Ma première putain de page html<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n  Ouais mec t'as vu ce code de ouf ?\n  Il est trop bien parce que:\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Il est<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">del</span>></span>valide<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">del</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">li</span>></span>Il est beau<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">li</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></code></pre>\n<p>Certains d'entre vous ont dû remarquer la coquille.\nCelle-là, mes élèves qui découvrent le HTML me la font à chaque fois lorsqu'ils\ncodent leur super CV\n(super exercice tavu, ils apprécient particulièrement le titre).</p>\n<p>Toi là au fond, t'as pas repéré le souci encore ?</p>\n<p>Regarde plutôt le rendu :</p>\n<iframe\n  class=\"putainde-Post-iframe\"\n  height=\"350\"\n  src=\"/fr/articles/html/notvalid.html\">\n</iframe>\n<blockquote>\n<p>WAT ?\nET MON MARGIN BOTTOM KESSIFÉLÀ EN DEUBEULE ?</p>\n</blockquote>\n<p>Le rapport avec la validation me direz-vous ? Et bien plutôt que de perdre du\ntemps à comprendre le pourquoi du comment, en validant le code ci-dessus,\nl'erreur vous est implicitement expliquée\n(oui, ce code n'a qu'une seule erreur à la validation).</p>\n<blockquote>\n<p>Line 17, Column 4: <strong>No p element in scope but a p end tag seen.</strong></p>\n</blockquote>\n<p>Typiquement, il faut savoir comprendre un message d'erreur et savoir lire entre\nles lignes. Pas faire \"mais monsieur, j'comprends pas là\" (d'ailleurs mes élèves\nvalident tous leur code, pour apprendre sur le tas, c'est une bonne façon).</p>\n<p>Celui-là nous dit en gros : <em>je ne vois pas d'élement <strong>p</strong> à fermer dans le coin</em>.\nÇa veut dire que… Ça veut dire que mon <strong>p</strong> ouvert n'est pas reconnu ?\nMais attends, qu'est-ce que c'est que cette histoire ?!</p>\n<p>Si vous prenez 10 secondes pour inspecter ce code, vous allez vite vous\naperçevoir qu'il est parsé ainsi :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>…<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ul</span>></span>…<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">ul</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></code></pre>\n<p><em>Mais qu'est-ce que… ? Hein ? Mais ? Quoi ? Comment ?</em></p>\n<p>Oui, vous avez bien vu. L'HTML est parsé n'importe comment. Enfin non, il est parsé\ncomme il peut, au mieux.\nJe pense que là vous commencez à comprendre ?</p>\n<p>Ce que j'essaye de vous montrer par là, c'est qu'il faut toujours faire attention\nà ce qu'on écrit et ce qu'on pense avoir comme résultat, même avec du\n<em>simple</em> HTML.</p>\n<p><strong>Bon après j'espère qu'en 2013, vous avez tous le réflexe d'inspecter\nl'HTML dès que vous avez un truc bizarre en CSS ou en JavaScript… Si\nc'est pas encore le cas, prenez l'habitude.</strong></p>\n<h2 id=\"mais-du-coup-le-navigateur-il-fait-nimporte-quoi-\"><a href=\"#mais-du-coup-le-navigateur-il-fait-nimporte-quoi-\" class=\"phenomic-HeadingAnchor\">#</a>Mais du coup le navigateur il fait n'importe quoi ?</h2>\n<p>Le navigateur essaye clairement de faire au mieux.\nSi vous inspectez l'exemple précédent, vous vous apercevrez aussi que je n'ai\nmis aucune balise <code>&#x3C;html></code>, <code>&#x3C;head></code> ou <code>&#x3C;body></code>.\nPourquoi ? Ben car le parseur le fait à ma place.\nMais pourquoi il fait ça ?\nTout simplement car on oublie (très - trop ?) souvent de bien écrire.\nComme quand j'écris en.</p>\n<p>La balise <a href=\"https://developer.mozilla.org/fr/docs/Web/HTML/Element/tbody\"><code>&#x3C;tbody></code></a>\nest un bon exemple.\nSi vous inspectez vos tableaux HTML, vous verrez vite fait que cette balise, que\nquasiment personne ne connait/utilise, est pourtant nécessaire/utile.\nMais du coup, si je me fais une petite requête JavaScript\n<code>document.querySelectorAll('table > tr')</code>,\nil est fort possible que je n'aie pas ce que je souhaite.\n<a href=\"http://codepen.io/MoOx/pen/esFjx\">La preuve</a>.</p>\n<p>Voyons un autre exemple : mettons-nous à la place d'un navigateur si,\nalors que je suis en XHTML 1.1 Strict, je lui glisse une balise <code>&#x3C;center></code>.</p>\n<ul>\n<li>\n<p><strong>Cas 1.</strong> Je n'ai pas fait attention au doctype et je veux vraiment une balise\n<code>&#x3C;center></code> : bah là, rien à dire à part \"<em>Merci</em>\". Le navigateur essaye clairement\nde faire au mieux, et dans un cas comme celui-là, on ne peut que le remercier.</p>\n</li>\n<li>\n<p><strong>Cas 2.</strong> Je sais exactement dans quel doctype je suis, j'ai conscience de ce\nque je fais : je joue au con, tant pis pour ma gueule !</p>\n</li>\n</ul>\n<p>Dans tous les cas, le navigateur va laisser passer cette balise au cas où que.\nPuis bon, faut avouer que c'est super pratique cette balise hein ?\nComme <code>&#x3C;blink></code> et <code>&#x3C;marquee></code> quoi. ❤</p>\n<figure>\n  <img src=\"canthandlemyswag.gif\" alt=\"Can't handle my swag\" />\n  <figcaption><marquee>Marquee for the win.</marquee></figcaption>\n</figure>\n<h2 id=\"note-de-service\"><a href=\"#note-de-service\" class=\"phenomic-HeadingAnchor\">#</a>Note de service</h2>\n<p>S'il vous plaît mesdames, messieurs, lorsque vous faites du CSS inline, ou que\nvous incorporez un JavaScript, arrêtez-vous à des choses simples,\nqui fonctionnent :</p>\n<ul>\n<li>\n<p><code>&#x3C;style></code> suffit. Pas besoin de mettre un type, un langage etc. Et ça vous\névitera des <a href=\"http://codepen.io/MoOx/pen/sEzuJ\">prises de têtes à la con</a>.\nPuis, vous avez déjà utilisé autre chose que du CSS vous ?!</p>\n</li>\n<li>\n<p><code>&#x3C;script></code>, idem, même sur IE 6.\nPareil que précédemment, pas besoin de mettre un hideux\n<code>&#x3C;script type=\"text/javascript\" language=\"JavaScript 1.1\"></code>.\nLa moindre faute de frappe ne pardonne pas.\nAucun intêret à se fatiguer, sauf si votre <a href=\"https://code.google.com/p/ruby-in-browser/\">script n'est pas du JavaScript</a>.</p>\n</li>\n</ul>\n<h2 id=\"le-mot-de-la-fin\"><a href=\"#le-mot-de-la-fin\" class=\"phenomic-HeadingAnchor\">#</a>Le mot de la fin</h2>\n<p>Ne soyez jamais sûr de vous, que ce soit pour écrire de l'HTML ou faire une mise\nen prod' un vendredi soir à <a href=\"http://www.miximum.fr/le-bug-de-17h30.html\">17h30</a>.\nFaites pas les malins. Ne sous-estimez pas HTML.\nSi ça merde quelque part, vérifiez plus loin que le bout de votre nez, que votre\nrègle CSS qui marche pas, ou votre morceau de JavaScript buggé.</p>\n<h2 id=\"aller-plus-loiiin-allez-plus-haaauuut-\"><a href=\"#aller-plus-loiiin-allez-plus-haaauuut-\" class=\"phenomic-HeadingAnchor\">#</a><a href=\"https://www.youtube.com/watch?v=BCYLQUdsN5g&#x26;t=39s\">Aller plus loiiin, allez plus haaauuut… !</a></h2>\n<ul>\n<li><a href=\"https://github.com/necolas/idiomatic-html\" lang=\"en\">idiomatic-html</a>\n(<a href=\"http://fr.wikipedia.org/wiki/Idiomatique\">ceci n'est pas une contraction d'<em>idiot</em> et d'<em>automatique</em></a>).</li>\n<li><a href=\"https://github.com/necolas/idiomatic-css\" lang=\"en\">idiomatic-css</a> (traduction incluse)</li>\n<li>\n<p>Validation automatique dans un workflow Grunt:</p>\n<ul>\n<li><a href=\"https://github.com/praveenvijayan/grunt-html-validation\">praveenvijayan/grunt-html-validation</a></li>\n<li><a href=\"https://github.com/jzaefferer/grunt-html\">jzaefferer/grunt-html</a> (basé sur validator.nu)</li>\n</ul>\n</li>\n</ul>\n","rawBody":"\nAhh, le HTML. LE [H.T.M.L](http://fr.wikipedia.org/wiki/HTML). Sacré langage hein ?\n\nOn le connait tous ce fameux truc qu'on retrouve dans pas mal d'URL : `.html`.\nOui, d'accord, par le passé on avait l'extension de radin `.htm`, mais elle n'a\nclairement pas duré.\n\nVous vous demandez déjà ce qu'il y a à raconter sur l'HTML peut-être ? Et bien,\nje ne suis pas là pour vous apprendre toutes les balises, leurs enfants, parents,\nles cousins cousines, patati patata… Ah ça non, j'ai autre chose à faire,\net vous aussi. Et si c'est ce que vous cherchez, vous trouverez ce qu'il vous\nfaut sur [tout](http://docs.webplatform.org/wiki/html/elements)\n[un](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\n[tas](http://www.w3.org/html/wg/drafts/html/CR/dom.html#elements)\n[d'autres](http://en.wikipedia.org/wiki/HTML_element)\n[sites](http://www.vectorskin.com/referentiels-standards-w3c/balises-html5/).\n\nCe que je vais faire par contre, c'est tenter de partager un document sérieux\n(dans le fond hein) avec tout pleins de conseils super pertinents pour que vous\nécriviez de l'HTML comme personne.\nNon, je déconne. En fait, ça va être la grosse marrade avec les trucs\nles plus nazes que je peux vous raconter. C'est parti mon jQuéri.\n\n## L'ancien testament\n\nSi vous avez ouvert ne serait-ce que quelques documents HTML dans votre vie,\nvous avez dû croiser ce qu'on appelle un [doctype](http://fr.wikipedia.org/wiki/Doctype)\nqui ressemble à ça :\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n```\n\nVous pourrez remarquer dans ce ~~petit~~ gros bout de code bien relou qu'il y a\nune [URL](http://fr.wikipedia.org/wiki/Uniform_Resource_Locator) :\nc'est tout simplement la DTD (doctype) du langage en question.\nAvec les spécifications pour la validation, toussa toussa…\nSi vous avez 2 minutes, allez jeter un coup d'œil.\n\nJe ne vais pas vous le cacher, et même si en théorie, par héritage de SGML/XML\nça part d'une bonne intention, dans la pratique ça sert juste à se toucher la\nnouille sur la validation.\nCar aujourd'hui HTML (5) n'est clairement plus du XML.\n\nOui bon ok, moi-même à une époque j'ai eu ma passe où je collais ce petit badge\npartout dans mes footers :\n\n<figure>\n  <a href=\"http://validator.w3.org/check?uri=referer\">\n    <img src=\"http://www.w3.org/Icons/valid-xhtml10\"\n        alt=\"Valid XHTML 1.0 Transitional\" height=\"31\" width=\"88\" />\n  </a>\n  <figcaption>Ça pète la classe hein ?</figcaption>\n</figure>\n\nMais bon les conneries, ça va un moment.\nPour info, j'ai dû valider le code suivant pour obtenir ce logo :\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n <html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n  <title> </title>\n</head>\n<body>\n\n</body>\n</html>\n```\n\nBen dites donc, c'est propre tout ça. Un petit document tout vide mais déjà\nbien rempli.\nMais attendez, en 2013 on peut pas faire mieux ? Oh si !\n\n## Le nouveau testament\n\n```html\n<!doctype html>\n<title> </title>\n```\n\nIl faut savoir qu'un simple document _valide_, peut se résumer à ça.\nOui oui mes cocos, ce document est parfaitement valide. Voilà, j'voulais vous le\ndire. Arrêtez d'utiliser des doctypes dans tous les sens, ça ne sert à rien.\nSachant la qualité du code qu'on trouve sur les internets, les navigateurs\ns'arrêtent au parsing lorsqu'ils voient ça `<!doctype html`\n(c'est [Paul Rouget](http://paulrouget.com/) qui me l'a dit, je le crois donc\nsur parole).\nEt après ma petite parenthèse ci-dessous, je vais vous expliquer pourquoi.\n\nCar je sais ce que certains vont me rétorquer.\n\n> Oui mais moi monsieur, je valide en **XHTML 1.1 Strict Turbo X Prime Ultra**<br />\n> Puis ton document valide là, il sera valide quand HTML5 sera finalisé…\n\nDans un sens ils n'auraient pas tort. Mais dans la pratique, les navigateurs\ns'en contrebranlent de savoir quel type d'HTML vous utilisez\n<small>(à moins que vous aimiez jouer avec la mort et que vous utilisez le\nprologue XML lorsque vous servez de l'XHTML…)</small>.\nCar quand bien même vous utilisez un doctype à rallonge, il est tout à fait\npossible que vous vous chiiez, et que vous laissiez des erreurs.\nOui, l'erreur est humaine…\nPuis HTML 5 est déjà bien implémenté dans les grandes lignes. Et ça car il est\npresque rétrocompatible.\nVous devriez le comprendre d'ici la fin de cet écrit. Ou pas. Mais je vous le\ndis, il a été pensé dans ce sens.\n\nRevenons à la validation. Du coup, à quoi ça sert de valider ?\nOn va voir ça par un exemple digne des plus grands diplômes.\n\n## Ce `<p>` fout la merde\n\nPrenons le code suivant :\n\n```html\n<!DOCTYPE html>\n<title>Putain de page</title>\n<style>\np {\n  margin-top: 2em;\n  margin-bottom: 10em;\n}\n</style>\n<h1>Ma première putain de page html</h1>\n<p>\n  Ouais mec t'as vu ce code de ouf ?\n  Il est trop bien parce que:\n  <ul>\n    <li>Il est<del>valide</del></li>\n    <li>Il est beau</li>\n  </ul>\n</p>\n```\n\nCertains d'entre vous ont dû remarquer la coquille.\nCelle-là, mes élèves qui découvrent le HTML me la font à chaque fois lorsqu'ils\ncodent leur super CV\n(super exercice tavu, ils apprécient particulièrement le titre).\n\nToi là au fond, t'as pas repéré le souci encore ?\n\nRegarde plutôt le rendu :\n\n<iframe\n  class=\"putainde-Post-iframe\"\n  height=\"350\"\n  src=\"/fr/articles/html/notvalid.html\">\n</iframe>\n\n> WAT ?\n> ET MON MARGIN BOTTOM KESSIFÉLÀ EN DEUBEULE ?\n\nLe rapport avec la validation me direz-vous ? Et bien plutôt que de perdre du\ntemps à comprendre le pourquoi du comment, en validant le code ci-dessus,\nl'erreur vous est implicitement expliquée\n(oui, ce code n'a qu'une seule erreur à la validation).\n\n> Line 17, Column 4: **No p element in scope but a p end tag seen.**\n\nTypiquement, il faut savoir comprendre un message d'erreur et savoir lire entre\nles lignes. Pas faire \"mais monsieur, j'comprends pas là\" (d'ailleurs mes élèves\nvalident tous leur code, pour apprendre sur le tas, c'est une bonne façon).\n\nCelui-là nous dit en gros : _je ne vois pas d'élement **p** à fermer dans le coin_.\nÇa veut dire que… Ça veut dire que mon **p** ouvert n'est pas reconnu ?\nMais attends, qu'est-ce que c'est que cette histoire ?!\n\nSi vous prenez 10 secondes pour inspecter ce code, vous allez vite vous\naperçevoir qu'il est parsé ainsi :\n\n```html\n<p>…</p>\n<ul>…</ul>\n<p></p>\n```\n\n_Mais qu'est-ce que… ? Hein ? Mais ? Quoi ? Comment ?_\n\nOui, vous avez bien vu. L'HTML est parsé n'importe comment. Enfin non, il est parsé\ncomme il peut, au mieux.\nJe pense que là vous commencez à comprendre ?\n\nCe que j'essaye de vous montrer par là, c'est qu'il faut toujours faire attention\nà ce qu'on écrit et ce qu'on pense avoir comme résultat, même avec du\n_simple_ HTML.\n\n**Bon après j'espère qu'en 2013, vous avez tous le réflexe d'inspecter\nl'HTML dès que vous avez un truc bizarre en CSS ou en JavaScript… Si\nc'est pas encore le cas, prenez l'habitude.**\n\n## Mais du coup le navigateur il fait n'importe quoi ?\n\nLe navigateur essaye clairement de faire au mieux.\nSi vous inspectez l'exemple précédent, vous vous apercevrez aussi que je n'ai\nmis aucune balise `<html>`, `<head>` ou `<body>`.\nPourquoi ? Ben car le parseur le fait à ma place.\nMais pourquoi il fait ça ?\nTout simplement car on oublie (très - trop ?) souvent de bien écrire.\nComme quand j'écris en.\n\nLa balise [`<tbody>`](https://developer.mozilla.org/fr/docs/Web/HTML/Element/tbody)\nest un bon exemple.\nSi vous inspectez vos tableaux HTML, vous verrez vite fait que cette balise, que\nquasiment personne ne connait/utilise, est pourtant nécessaire/utile.\nMais du coup, si je me fais une petite requête JavaScript\n`document.querySelectorAll('table > tr')`,\nil est fort possible que je n'aie pas ce que je souhaite.\n[La preuve](http://codepen.io/MoOx/pen/esFjx).\n\nVoyons un autre exemple : mettons-nous à la place d'un navigateur si,\nalors que je suis en XHTML 1.1 Strict, je lui glisse une balise `<center>`.\n\n- **Cas 1.** Je n'ai pas fait attention au doctype et je veux vraiment une balise\n `<center>` : bah là, rien à dire à part \"_Merci_\". Le navigateur essaye clairement\n de faire au mieux, et dans un cas comme celui-là, on ne peut que le remercier.\n\n- **Cas 2.** Je sais exactement dans quel doctype je suis, j'ai conscience de ce\nque je fais : je joue au con, tant pis pour ma gueule !\n\nDans tous les cas, le navigateur va laisser passer cette balise au cas où que.\nPuis bon, faut avouer que c'est super pratique cette balise hein ?\nComme `<blink>` et `<marquee>` quoi. ❤\n\n<figure>\n  <img src=\"canthandlemyswag.gif\" alt=\"Can't handle my swag\" />\n  <figcaption><marquee>Marquee for the win.</marquee></figcaption>\n</figure>\n\n## Note de service\n\nS'il vous plaît mesdames, messieurs, lorsque vous faites du CSS inline, ou que\nvous incorporez un JavaScript, arrêtez-vous à des choses simples,\nqui fonctionnent :\n\n- `<style>` suffit. Pas besoin de mettre un type, un langage etc. Et ça vous\névitera des [prises de têtes à la con](http://codepen.io/MoOx/pen/sEzuJ).\nPuis, vous avez déjà utilisé autre chose que du CSS vous ?!\n\n- `<script>`, idem, même sur IE 6.\nPareil que précédemment, pas besoin de mettre un hideux\n`<script type=\"text/javascript\" language=\"JavaScript 1.1\">`.\nLa moindre faute de frappe ne pardonne pas.\nAucun intêret à se fatiguer, sauf si votre [script n'est pas du JavaScript](https://code.google.com/p/ruby-in-browser/).\n\n## Le mot de la fin\n\nNe soyez jamais sûr de vous, que ce soit pour écrire de l'HTML ou faire une mise\nen prod' un vendredi soir à [17h30](http://www.miximum.fr/le-bug-de-17h30.html).\nFaites pas les malins. Ne sous-estimez pas HTML.\nSi ça merde quelque part, vérifiez plus loin que le bout de votre nez, que votre\nrègle CSS qui marche pas, ou votre morceau de JavaScript buggé.\n\n## [Aller plus loiiin, allez plus haaauuut… !](https://www.youtube.com/watch?v=BCYLQUdsN5g&t=39s)\n\n* <a href=\"https://github.com/necolas/idiomatic-html\" lang=\"en\">idiomatic-html</a>\n([ceci n'est pas une contraction d'_idiot_ et d'_automatique_](http://fr.wikipedia.org/wiki/Idiomatique)).\n* <a href=\"https://github.com/necolas/idiomatic-css\" lang=\"en\">idiomatic-css</a> (traduction incluse)\n* Validation automatique dans un workflow Grunt:\n  * [praveenvijayan/grunt-html-validation](https://github.com/praveenvijayan/grunt-html-validation)\n  * [jzaefferer/grunt-html](https://github.com/jzaefferer/grunt-html) (basé sur validator.nu)\n","__filename":"fr/articles/html/index.md","__url":"/fr/articles/html/","__resourceUrl":"/fr/articles/html/index.html","__dataUrl":"/fr/articles/html/index.html.e122ae0746f918544ec37d596c0d5f3f.json"}