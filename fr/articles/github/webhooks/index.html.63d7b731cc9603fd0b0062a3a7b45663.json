{"head":{"layout":"Post","comments":true,"date":"2015-06-09","title":"Les webhooks GitHub","tags":["github","webhooks"],"authors":["magsout"],"header":{"credit":"https://www.flickr.com/photos/haru__q/14396323454/"},"description":"Vous avez pu lire récemment une introduction sur l'intégration continue qui mène vers le déploiement continu. Si vous utilisez GitHub pour…"},"body":"<p>Vous avez pu lire récemment une <a href=\"/fr/articles/ci/deploiement-continu/\">introduction sur l'intégration\ncontinue</a> qui mène vers <a href=\"/fr/articles/ci/\">le déploiement\ncontinu</a>. Si vous utilisez GitHub pour héberger vos\nsources et que vous cherchez un moyen très simple (peut-être un peu trop) de\nmettre en place le déploiement continu <em>sans serveur d'intégration continue\ndédié</em>, alors les webhooks peuvent répondre parfaitement à votre besoin.</p>\n<h2 id=\"les-quoi-\"><a href=\"#les-quoi-\" class=\"phenomic-HeadingAnchor\">#</a>Les quoi ?</h2>\n<p>Les webhooks permettent de lancer une action de façon automatique par\nl'intermédiaire d'un ou plusieurs événements depuis un dépôt\n<a href=\"http://github.com\">GitHub</a>. Concrètement, il va être possible de déployer son\nprojet sur un serveur de production, sauvegarder son site Internet, ou même\nmettre à jour des stats dès qu'un commit sera envoyé ou même une issue ouverte.\nIl est possible de faire tout ce que l'on veut dans la limite de son imagination\ncomme l'explique GitHub.</p>\n<h2 id=\"comment-ça-marche-\"><a href=\"#comment-%C3%A7a-marche-\" class=\"phenomic-HeadingAnchor\">#</a>Comment ça marche ?</h2>\n<p>Le fonctionnement est on ne peut plus simple, un événement (merge, push, release\netc.) va déclencher une requête HTTP POST vers l'URL que vous avez configurée.\nLe reste de l'exécution se fera sur le serveur où pointe l'URL, libre à vous\nd'écrire le script que vous voulez pour effectuer les opérations que vous\nsouhaitez.</p>\n<p>Il faut cependant être conscient que la simplification a un coût, à savoir que\nmême si une PR ou un commit venaient à rendre inopérant votre projet l'événement\nse lancerait quand même.</p>\n<h2 id=\"la-mise-en-place\"><a href=\"#la-mise-en-place\" class=\"phenomic-HeadingAnchor\">#</a>La mise en place</h2>\n<p>Seul le propriétaire d'un dépôt dispose des droits nécessaires pour configurer\nun webhook. Il suffit pour cela de se rendre dans <code>Settings</code> puis <code>Webhooks &#x26; Services</code> :</p>\n<p><img src=\"setting_webhook.jpg\" alt=\"Settings Webhooks GitHub\"></p>\n<p>Un petit clic sur <code>Add webhook</code> et vous obtenez une interface encore une fois\ntrès simple :</p>\n<p><img src=\"configuration_webhook.jpg\" alt=\"Configuration Webhooks GitHub\"></p>\n<p>Cette interface se compose de trois parties :</p>\n<ol>\n<li>l'URL vers laquelle votre requête sera lancée</li>\n<li>une secret key pour sécuriser votre requête</li>\n<li>l'événement qui va déclencher votre requête</li>\n</ol>\n<p>La partie événement est relativement complète et là encore vous disposez de\ntrois possibilités :</p>\n<ol>\n<li>se déclenche au push</li>\n<li>se déclenche à chaque événement</li>\n<li>à vous de choisir les événements (un ou plusieurs) qui vous conviennent</li>\n</ol>\n<p>Une fois le <em>Webhook</em> activé un premier test ou plus exactement un <code>ping</code> va se\nlancer. Il permettra de détecter que votre serveur répond bien à la requête :</p>\n<p><img src=\"test_webhook.jpg\" alt=\"Test Webhooks request GitHub\"></p>\n<p>La requête envoyée est très basique et embarque un JSON sur les informations de\nvotre dépôt (description, URL) et une liste des API mises à disposition. Le\nreste du travail doit se faire sur votre serveur par l'intermédiaire de votre\nAPI/script, etc.</p>\n<p>Voici un petit exemple utilisant <code>express</code> :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express\"</span>)\n<span class=\"hljs-keyword\">var</span> app = express()\n<span class=\"hljs-keyword\">var</span> bodyParser = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"body-parser\"</span>)\n<span class=\"hljs-keyword\">var</span> xhub = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"express-x-hub\"</span>)\n\n<span class=\"hljs-comment\">//Const</span>\n<span class=\"hljs-keyword\">var</span> xhubSecret = <span class=\"hljs-string\">\"MySecretKey\"</span>\n<span class=\"hljs-keyword\">var</span> port = <span class=\"hljs-string\">\"8085\"</span>\n<span class=\"hljs-keyword\">var</span> host = <span class=\"hljs-string\">\"localhost\"</span>\n\n<span class=\"hljs-comment\">//Secret key</span>\napp.use(xhub({ <span class=\"hljs-attr\">algorithm</span>: <span class=\"hljs-string\">\"sha1\"</span>, <span class=\"hljs-attr\">secret</span>: xhubSecret }))\n\n<span class=\"hljs-comment\">// Configure express json</span>\napp.use(bodyParser.json())\n\n<span class=\"hljs-comment\">// Main : Start the express http server</span>\n<span class=\"hljs-keyword\">var</span> server = app.listen(port, host, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(\n    <span class=\"hljs-string\">\"App listening at http://%s:%s\"</span>,\n    server.address().address,\n    server.address().port\n  )\n})\n\n<span class=\"hljs-comment\">// Add default route</span>\napp.post(<span class=\"hljs-string\">\"/webhook\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{\n  <span class=\"hljs-keyword\">if</span>(!req.isXHubValid()){\n    res.status(<span class=\"hljs-number\">400</span>).send(<span class=\"hljs-string\">'Invalid X-Hub Request'</span>)\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Secret key is invalid\"</span>)\n    <span class=\"hljs-keyword\">return</span>\n  }\n\n  <span class=\"hljs-keyword\">var</span> command = req.headers[<span class=\"hljs-string\">\"x-github-event\"</span>]\n\n  <span class=\"hljs-keyword\">switch</span>(command) {\n\n    <span class=\"hljs-comment\">//Event create (Branch, or tag created)</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"create\"</span>:\n      res.send(<span class=\"hljs-string\">\"Event create trigger\"</span>)\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Create event\"</span>)\n      <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-comment\">//Event release (Release published in a repository)</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"release\"</span>:\n      res.send(<span class=\"hljs-string\">\"Event release trigger\"</span>)\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Release Event\"</span>)\n      <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">default</span>:\n      res.status(<span class=\"hljs-number\">400</span>).send(<span class=\"hljs-string\">\"Event not supported : \"</span> + command)\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Event not supported : \"</span> + req.headers[<span class=\"hljs-string\">\"X-Github-Event\"</span>])\n  }\n})</code></pre>\n<p>Pour vous donner une idée de ce que peut envoyer GitHub, voici deux gists :</p>\n<ul>\n<li><a href=\"header.txt\">Headers</a></li>\n<li><a href=\"payload.json\">Payload</a></li>\n</ul>\n<h2 id=\"this-is-just-the-beginning\"><a href=\"#this-is-just-the-beginning\" class=\"phenomic-HeadingAnchor\">#</a>This is just the beginning</h2>\n<p>Cette solution est un début de piste pour le déploiement continu, mais elle ne\ndoit pas se faire sans une solution de test que ce soit coté GitHub ou coté\nserveur.</p>\n<p>Si vous souhaitez plus d'informations ou même pousser un peu plus la mise en\nplace des webhooks, GitHub a comme à son habitude publié un\n<a href=\"https://developer.github.com/webhooks/\">guide</a> très bien détaillé et complet.</p>\n","rawBody":"\nVous avez pu lire récemment une [introduction sur l'intégration\ncontinue](/fr/articles/ci/deploiement-continu/) qui mène vers [le déploiement\ncontinu](/fr/articles/ci/). Si vous utilisez GitHub pour héberger vos\nsources et que vous cherchez un moyen très simple (peut-être un peu trop) de\nmettre en place le déploiement continu _sans serveur d'intégration continue\ndédié_, alors les webhooks peuvent répondre parfaitement à votre besoin.\n\n## Les quoi ?\n\nLes webhooks permettent de lancer une action de façon automatique par\nl'intermédiaire d'un ou plusieurs événements depuis un dépôt\n[GitHub](http://github.com). Concrètement, il va être possible de déployer son\nprojet sur un serveur de production, sauvegarder son site Internet, ou même\nmettre à jour des stats dès qu'un commit sera envoyé ou même une issue ouverte.\nIl est possible de faire tout ce que l'on veut dans la limite de son imagination\ncomme l'explique GitHub.\n\n## Comment ça marche ?\n\nLe fonctionnement est on ne peut plus simple, un événement (merge, push, release\netc.) va déclencher une requête HTTP POST vers l'URL que vous avez configurée.\nLe reste de l'exécution se fera sur le serveur où pointe l'URL, libre à vous\nd'écrire le script que vous voulez pour effectuer les opérations que vous\nsouhaitez.\n\nIl faut cependant être conscient que la simplification a un coût, à savoir que\nmême si une PR ou un commit venaient à rendre inopérant votre projet l'événement\nse lancerait quand même.\n\n## La mise en place\n\nSeul le propriétaire d'un dépôt dispose des droits nécessaires pour configurer\nun webhook. Il suffit pour cela de se rendre dans `Settings` puis `Webhooks &\nServices` :\n\n![Settings Webhooks GitHub](setting_webhook.jpg)\n\nUn petit clic sur `Add webhook` et vous obtenez une interface encore une fois\ntrès simple :\n\n![Configuration Webhooks GitHub](configuration_webhook.jpg)\n\nCette interface se compose de trois parties :\n\n1. l'URL vers laquelle votre requête sera lancée\n2. une secret key pour sécuriser votre requête\n3. l'événement qui va déclencher votre requête\n\nLa partie événement est relativement complète et là encore vous disposez de\ntrois possibilités :\n\n1. se déclenche au push\n2. se déclenche à chaque événement\n3. à vous de choisir les événements (un ou plusieurs) qui vous conviennent\n\nUne fois le _Webhook_ activé un premier test ou plus exactement un `ping` va se\nlancer. Il permettra de détecter que votre serveur répond bien à la requête :\n\n![Test Webhooks request GitHub](test_webhook.jpg)\n\nLa requête envoyée est très basique et embarque un JSON sur les informations de\nvotre dépôt (description, URL) et une liste des API mises à disposition. Le\nreste du travail doit se faire sur votre serveur par l'intermédiaire de votre\nAPI/script, etc.\n\nVoici un petit exemple utilisant `express` :\n\n```js\nvar express = require(\"express\")\nvar app = express()\nvar bodyParser = require(\"body-parser\")\nvar xhub = require(\"express-x-hub\")\n\n//Const\nvar xhubSecret = \"MySecretKey\"\nvar port = \"8085\"\nvar host = \"localhost\"\n\n//Secret key\napp.use(xhub({ algorithm: \"sha1\", secret: xhubSecret }))\n\n// Configure express json\napp.use(bodyParser.json())\n\n// Main : Start the express http server\nvar server = app.listen(port, host, function () {\n  console.log(\n    \"App listening at http://%s:%s\",\n    server.address().address,\n    server.address().port\n  )\n})\n\n// Add default route\napp.post(\"/webhook\", function (req, res) {\n  if(!req.isXHubValid()){\n    res.status(400).send('Invalid X-Hub Request')\n    console.log(\"Secret key is invalid\")\n    return\n  }\n\n  var command = req.headers[\"x-github-event\"]\n\n  switch(command) {\n\n    //Event create (Branch, or tag created)\n    case \"create\":\n      res.send(\"Event create trigger\")\n      console.log(\"Create event\")\n      break\n\n    //Event release (Release published in a repository)\n    case \"release\":\n      res.send(\"Event release trigger\")\n      console.log(\"Release Event\")\n      break\n\n    default:\n      res.status(400).send(\"Event not supported : \" + command)\n      console.log(\"Event not supported : \" + req.headers[\"X-Github-Event\"])\n  }\n})\n```\n\nPour vous donner une idée de ce que peut envoyer GitHub, voici deux gists :\n\n- [Headers](header.txt)\n- [Payload](payload.json)\n\n## This is just the beginning\n\nCette solution est un début de piste pour le déploiement continu, mais elle ne\ndoit pas se faire sans une solution de test que ce soit coté GitHub ou coté\nserveur.\n\nSi vous souhaitez plus d'informations ou même pousser un peu plus la mise en\nplace des webhooks, GitHub a comme à son habitude publié un\n[guide](https://developer.github.com/webhooks/) très bien détaillé et complet.\n","__filename":"fr/articles/github/webhooks/index.md","__url":"/fr/articles/github/webhooks/","__resourceUrl":"/fr/articles/github/webhooks/index.html","__dataUrl":"/fr/articles/github/webhooks/index.html.63d7b731cc9603fd0b0062a3a7b45663.json"}