{"head":{"layout":"Post","comments":true,"date":"2015-05-21","title":"Qu'est-ce que l'intégration continue ?","tags":["ci","tests"],"authors":["MoOx"],"header":{"credit":"https://www.flickr.com/photos/zunami/3780218641/"},"description":"Certains risquent d'être déçus puisque nous ne parlerons pas ici des fameux 3x8, technique qui consiste à faire tourner 3 équipes…"},"body":"<p>Certains risquent d'être déçus puisque nous ne parlerons pas ici des fameux <code>3x8</code>,\ntechnique qui consiste à faire tourner 3 équipes d'intégrateurs HTML en\ncontinu afin d'avoir du PSD > HTML 24h sur 24.</p>\n<h2 id=\"le-principe-de-lintégration-continue\"><a href=\"#le-principe-de-lint%C3%A9gration-continue\" class=\"phenomic-HeadingAnchor\">#</a>Le principe de l'intégration continue</h2>\n<blockquote>\n<p>L'intégration continue est un ensemble de pratiques utilisées en génie\nlogiciel consistant à vérifier à chaque modification de code source que le\nrésultat des modifications ne produit pas de régression dans l'application\ndéveloppée.</p>\n</blockquote>\n<p><small>\n<a href=\"https://fr.wikipedia.org/wiki/Int%C3%A9gration_continue\">Source: Wikipédia</a>\n</small></p>\n<h2 id=\"pré-requis-pour-mettre-en-place-lintégration-continue\"><a href=\"#pr%C3%A9-requis-pour-mettre-en-place-lint%C3%A9gration-continue\" class=\"phenomic-HeadingAnchor\">#</a>Pré-requis pour mettre en place l'intégration continue</h2>\n<p>Avant de rentrer dans le vif du sujet, assurez-vous d'avoir déjà de bonne bases,\npour maintenir une base de code saine en\n<a href=\"/fr/articles/git/\">versionnant avec git</a>.\nNous sommes en 2015, l'année où l'on était censé avoir les voitures\nvolantes, nous n'allons donc pas expliquer ici à quoi sert de versionner du\ncode.</p>\n<p>Du code versionné ne suffit pas, il faut avoir des tests automatisés bien\nentendu.\n<a href=\"/fr/articles/js/tests/frontend/\">Front</a> et back, il en faut de tous\nles côtés.</p>\n<p>Ensuite, il nous faudra choisir un serveur qui va gérer l'intégration continue.\nIl existe des services tels que:</p>\n<ul>\n<li><a href=\"http://travis-ci.org/\">Travis</a></li>\n<li><a href=\"https://circleci.com/\">CircleCI</a></li>\n<li><a href=\"https://www.atlassian.com/software/bamboo/\">Bamboo</a></li>\n<li><a href=\"https://codeship.com/\">Codeship</a></li>\n<li><a href=\"http://jenkins-ci.org/\">Jenkins</a></li>\n</ul>\n<h2 id=\"lintégration-continue-en-pratique\"><a href=\"#lint%C3%A9gration-continue-en-pratique\" class=\"phenomic-HeadingAnchor\">#</a>L'intégration continue en pratique</h2>\n<p>Un fois qu'on a notre code testé et versionné et qu'on a configuré son serveur\nde <em>CI</em>, chaque modification va déclencher des actions sur ce serveur, puis,\nen fonction des résultats, va déclencher d'autres actions tout en vous notifiant\nsi besoin.</p>\n<p>Un exemple classique serait le suivant : une fois les dernières modifications de\ncode poussées sur la branche principale sur votre dépôt de code, le serveur\nd'intégration continue va jouer tous les tests et déployer le tout en production si\ntout a marché sur des roulettes.</p>\n<p>Si des problèmes surviennent, rien ne sera déployé et vous serez notifié sur\nles services que vous avez configurés (email, IRC, webhook, etc).</p>\n<p>Nous pouvons imaginer que votre serveur vienne vous insulter sur\nvotre logiciel de chat interne, en vous montrant du doigt.\nOn pourrait aussi imaginer une synthèse vocale crier votre nom et préciser à\ntoute l'équipe que\n<a href=\"https://www.youtube.com/watch?v=mbDcnUH6rOc\">vous avez merté</a> :\n<em>“MoOx, you just fucked up the build by breaking 42 tests!\nFix that please”</em>.\nPour finir dans les exemples farfelus, nous pourrions avoir une petite tourelle\ntype <em>Nerf</em> qui vous met un petit headshot qui va bien.\nDes équipes font vraiment ça, et vous vous en doutez, y'a de la grosse marrade au\nprogramme.</p>\n<p>L'idée est vraiment de pousser le plus souvent possible, les plus petites\nmodifications possibles avec la meilleure couverture de tests possible.\nCeci afin de minimiser les risques. De plus, cela aide à rester focalisé.</p>\n<p>Tout ce processus (versionné aussi tant qu'à faire), qui permet de jouer tous\nles tests <strong>rapidement</strong> (dans un environnement similaire à la production), doit\nêtre transparent et accessible localement, afin que les développeurs aient une\nbonne visibilité et une bonne compréhension du système en place.</p>\n<h2 id=\"faire-des-tests-automatisés-cest-la-vie\"><a href=\"#faire-des-tests-automatis%C3%A9s-cest-la-vie\" class=\"phenomic-HeadingAnchor\">#</a>Faire des tests automatisés, c'est la vie</h2>\n<p>J'ai mis un titre pour ça car c'est important. Vraiment.\nTout développeur qui n'a pas encore écrit ses premiers tests a peur.\nPuis avec le temps, il se dit que finalement, il ne fallait pas\navoir autant d'appréhension et qu'il était très con de ne pas avoir\ntesté automatiquement tout ses codes sources plus tôt.\nÀ tel point qu'une\n<a href=\"http://the--kyza.deviantart.com/art/What-the-Flux-511691704\">DeLorean modifiée</a>\npour se prévenir soi-même ne serait pas de refus.</p>\n<p>Une fois la barrière franchie, on se dit vraiment qu'on était stupide de pas\navoir essayé avant.</p>\n<h2 id=\"une-commande-qui-exécute-les-tests\"><a href=\"#une-commande-qui-ex%C3%A9cute-les-tests\" class=\"phenomic-HeadingAnchor\">#</a>Une commande qui exécute les tests</h2>\n<p>Un fois qu'on a écrit des tests, ou même souvent avant, on automatise\nl'exécution des tests. En général c'est rapide, étant donné qu'une simple\ncommande ou un simple script suffit.\nBeaucoup de <em>test runners</em> existent et vous n'aurez aucune difficulté à en\ntrouver un en adéquation avec votre language favori.</p>\n<p>Pour notre site, la commande est <code>npm test</code>. Simple, efficace.</p>\n<p>Elle exécute tout ce qui est nécessaire à compiler notre application et à jouer\nles tests tout en retournant un résultat lisible et un code d'erreur si besoin.</p>\n<h2 id=\"et-après-\"><a href=\"#et-apr%C3%A8s-\" class=\"phenomic-HeadingAnchor\">#</a>Et après ?</h2>\n<p>Là, si vous avez déjà mis tout ça en place, le bonheur ultime du développeur\nn'est pas loin : vous pouvez rapidement vérifier qu'il n'y a pas de régressions\net agir en conséquence.</p>\n<p>Chez <em>Putain de code !</em> (en date de cet article), notre couverture de\ntests est loin d'être bonne. Mais ce site étant un petit plaisir un peu risqué,\nnous faisons quand même du\n<a href=\"/fr/articles/ci/deploiement-continu/\">déploiement continu</a>, l'étape d'après !\nOn aime bien l'idée du <em><a href=\"http://zachholman.com/talk/move-fast-break-nothing\">move fast &#x26; break <del>no</del>thing\n</a></em>.</p>\n","rawBody":"\nCertains risquent d'être déçus puisque nous ne parlerons pas ici des fameux `3x8`,\ntechnique qui consiste à faire tourner 3 équipes d'intégrateurs HTML en\ncontinu afin d'avoir du PSD > HTML 24h sur 24.\n\n## Le principe de l'intégration continue\n\n> L'intégration continue est un ensemble de pratiques utilisées en génie\nlogiciel consistant à vérifier à chaque modification de code source que le\nrésultat des modifications ne produit pas de régression dans l'application\ndéveloppée.\n\n<small>\n[Source: Wikipédia](https://fr.wikipedia.org/wiki/Int%C3%A9gration_continue)\n</small>\n\n## Pré-requis pour mettre en place l'intégration continue\n\nAvant de rentrer dans le vif du sujet, assurez-vous d'avoir déjà de bonne bases,\npour maintenir une base de code saine en\n[versionnant avec git](/fr/articles/git/).\nNous sommes en 2015, l'année où l'on était censé avoir les voitures\nvolantes, nous n'allons donc pas expliquer ici à quoi sert de versionner du\ncode.\n\nDu code versionné ne suffit pas, il faut avoir des tests automatisés bien\nentendu.\n[Front](/fr/articles/js/tests/frontend/) et back, il en faut de tous\nles côtés.\n\nEnsuite, il nous faudra choisir un serveur qui va gérer l'intégration continue.\nIl existe des services tels que:\n\n- [Travis](http://travis-ci.org/)\n- [CircleCI](https://circleci.com/)\n- [Bamboo](https://www.atlassian.com/software/bamboo/)\n- [Codeship](https://codeship.com/)\n- [Jenkins](http://jenkins-ci.org/)\n\n## L'intégration continue en pratique\n\nUn fois qu'on a notre code testé et versionné et qu'on a configuré son serveur\nde _CI_, chaque modification va déclencher des actions sur ce serveur, puis,\nen fonction des résultats, va déclencher d'autres actions tout en vous notifiant\nsi besoin.\n\nUn exemple classique serait le suivant : une fois les dernières modifications de\ncode poussées sur la branche principale sur votre dépôt de code, le serveur\nd'intégration continue va jouer tous les tests et déployer le tout en production si\ntout a marché sur des roulettes.\n\nSi des problèmes surviennent, rien ne sera déployé et vous serez notifié sur\nles services que vous avez configurés (email, IRC, webhook, etc).\n\nNous pouvons imaginer que votre serveur vienne vous insulter sur\nvotre logiciel de chat interne, en vous montrant du doigt.\nOn pourrait aussi imaginer une synthèse vocale crier votre nom et préciser à\ntoute l'équipe que\n[vous avez merté](https://www.youtube.com/watch?v=mbDcnUH6rOc) :\n_“MoOx, you just fucked up the build by breaking 42 tests!\nFix that please”_.\nPour finir dans les exemples farfelus, nous pourrions avoir une petite tourelle\ntype _Nerf_ qui vous met un petit headshot qui va bien.\nDes équipes font vraiment ça, et vous vous en doutez, y'a de la grosse marrade au\nprogramme.\n\nL'idée est vraiment de pousser le plus souvent possible, les plus petites\nmodifications possibles avec la meilleure couverture de tests possible.\nCeci afin de minimiser les risques. De plus, cela aide à rester focalisé.\n\nTout ce processus (versionné aussi tant qu'à faire), qui permet de jouer tous\nles tests **rapidement** (dans un environnement similaire à la production), doit\nêtre transparent et accessible localement, afin que les développeurs aient une\nbonne visibilité et une bonne compréhension du système en place.\n\n## Faire des tests automatisés, c'est la vie\n\nJ'ai mis un titre pour ça car c'est important. Vraiment.\nTout développeur qui n'a pas encore écrit ses premiers tests a peur.\nPuis avec le temps, il se dit que finalement, il ne fallait pas\navoir autant d'appréhension et qu'il était très con de ne pas avoir\ntesté automatiquement tout ses codes sources plus tôt.\nÀ tel point qu'une\n[DeLorean modifiée](http://the--kyza.deviantart.com/art/What-the-Flux-511691704)\npour se prévenir soi-même ne serait pas de refus.\n\nUne fois la barrière franchie, on se dit vraiment qu'on était stupide de pas\navoir essayé avant.\n\n## Une commande qui exécute les tests\n\nUn fois qu'on a écrit des tests, ou même souvent avant, on automatise\nl'exécution des tests. En général c'est rapide, étant donné qu'une simple\ncommande ou un simple script suffit.\nBeaucoup de _test runners_ existent et vous n'aurez aucune difficulté à en\ntrouver un en adéquation avec votre language favori.\n\nPour notre site, la commande est `npm test`. Simple, efficace.\n\nElle exécute tout ce qui est nécessaire à compiler notre application et à jouer\nles tests tout en retournant un résultat lisible et un code d'erreur si besoin.\n\n## Et après ?\n\nLà, si vous avez déjà mis tout ça en place, le bonheur ultime du développeur\nn'est pas loin : vous pouvez rapidement vérifier qu'il n'y a pas de régressions\net agir en conséquence.\n\nChez _Putain de code !_ (en date de cet article), notre couverture de\ntests est loin d'être bonne. Mais ce site étant un petit plaisir un peu risqué,\nnous faisons quand même du\n[déploiement continu](/fr/articles/ci/deploiement-continu/), l'étape d'après !\nOn aime bien l'idée du _[move fast & break ~~no~~thing\n](http://zachholman.com/talk/move-fast-break-nothing)_.\n","__filename":"fr/articles/ci/index.md","__url":"/fr/articles/ci/","__resourceUrl":"/fr/articles/ci/index.html","__dataUrl":"/fr/articles/ci/index.html.5d857e6a1fb1799fa444affd76b97d7e.json"}