{"head":{"layout":"Post","comments":true,"date":"2015-05-25","title":"Introduction au déploiement continu","tags":["ci","tests"],"authors":["MoOx"],"header":{"linearGradient":"160deg, rgb(204, 51, 51), rgba(204, 51, 51, .6)","credit":"https://www.flickr.com/photos/luciano_meirelles/3461046001/"},"description":"Déployer en continu ? Il s'agit d'avoir un site stable en production, ceci de manière automatisée et continue. Rien que ça. Il faut…"},"body":"<h1 id=\"déployer-en-continu-\"><a href=\"#d%C3%A9ployer-en-continu-\" class=\"phenomic-HeadingAnchor\">#</a>Déployer en continu ?</h1>\n<p>Il s'agit d'avoir un site stable en production, ceci de manière automatisée et\ncontinue. Rien que ça.</p>\n<p>Il faut comprendre par là sans passer par FTP avec Filezilla.\nPas de bouton \"Upload\" ou \"Sync\" après avoir fait une modification de code.\nPas de risque de péter tout votre site si vos modifications rentrent en conflit\navec les modifications de votre collègue, qui lui aussi vient de pousser un\nbon gros patch bien sale.</p>\n<p>La première conséquence est que les mises en\nproduction ne sont plus stressantes, car très régulières.\n<a href=\"http://www.estcequonmetenprodaujourdhui.info/\">Certaines personnes ne recommandent pas les mises en production tous les jours\n</a> mais lorsque vous avez mis en\nplace l'intégration continue, vous minimisez grandement les risques.</p>\n<p>La preuve en est que certaines entreprises font des mises en productions plusieurs\ncentaines de fois par jour ! (GitHub est un bon exemple).</p>\n<h2 id=\"pré-requis-au-déploiement-continu\"><a href=\"#pr%C3%A9-requis-au-d%C3%A9ploiement-continu\" class=\"phenomic-HeadingAnchor\">#</a>Pré-requis au déploiement continu</h2>\n<p>Vous n'avez qu'une chose à faire avant de vous attaquer à la mise en place du\ndéploiement continu : vous devez déjà avoir\n<a href=\"/fr/articles/ci/\">l'intégration continue</a> en place.</p>\n<p>Une fois vous êtes bon à ce niveau, vous pouvez passer à l'étape suivante.</p>\n<h2 id=\"faire-un-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien\"><a href=\"#faire-un-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien\" class=\"phenomic-HeadingAnchor\">#</a>Faire un script qui fait les choses qui vont bien quand les tests vont bien</h2>\n<p>Une fois qu'on a une commande qui peut jouer tous les tests et dire \"y'a bon\" ou\n\"tatoukassé\", il nous faut prévoir les actions à réaliser quand nos tests sont\nOK.</p>\n<p>Un déploiement FTP, un déploiement git, ou plus compliqué via CDN, peu importe.\n<strong>Il faut juste une commande qui marche simplement.</strong></p>\n<p>Pour notre site, la commande est <code>npm run deploy</code>. Cette commande pousse le site\ngénéré sur la branche <code>gh-pages</code>\n(puisqu'on se sert <a href=\"https://pages.github.com/\">des pages GitHub</a>).</p>\n<h2 id=\"automatiser-le-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien\"><a href=\"#automatiser-le-script-qui-fait-les-choses-qui-vont-bien-quand-les-tests-vont-bien\" class=\"phenomic-HeadingAnchor\">#</a>Automatiser le script qui fait les choses qui vont bien quand les tests vont bien</h2>\n<p>On peut ensuite éventuellement englober les précédentes étapes dans une seule\ncommande qui va se débrouiller s'il n'y a pas d'erreur. Mais bon, si vous n'avez\nque deux commandes (comme on a dans l'exemple de notre site), un simple appel de\ncette façon devrait faire l'affaire :</p>\n<pre><code class=\"hljs language-console\">$ <span class=\"hljs-built_in\">npm</span> test &#x26;&#x26; <span class=\"hljs-built_in\">npm</span> run deploy</code></pre>\n<p>Si <code>npm test</code> retourne une erreur, la deuxième commande ne sera pas exécutée.</p>\n<h2 id=\"la-suite-au-prochaine-épisode\"><a href=\"#la-suite-au-prochaine-%C3%A9pisode\" class=\"phenomic-HeadingAnchor\">#</a>La suite au prochaine épisode</h2>\n<p>La prochaine étape (dans un prochain article) sera de mettre ça en place sur un\nserveur d'intégration continue, nous y étudierons simplement ce que nous avons\nfait pour notre site.</p>\n<p>Si vous êtes trop curieux, vous pouvez déjà <a href=\"https://github.com/putaindecode/putaindecode.io\">consulter le code source de notre\nsite</a> et fouiller dans le\n<code>package.json</code> (section <code>scripts</code>) pour deviner la suite...</p>\n","rawBody":"\n# Déployer en continu ?\n\nIl s'agit d'avoir un site stable en production, ceci de manière automatisée et\ncontinue. Rien que ça.\n\nIl faut comprendre par là sans passer par FTP avec Filezilla.\nPas de bouton \"Upload\" ou \"Sync\" après avoir fait une modification de code.\nPas de risque de péter tout votre site si vos modifications rentrent en conflit\navec les modifications de votre collègue, qui lui aussi vient de pousser un\nbon gros patch bien sale.\n\nLa première conséquence est que les mises en\nproduction ne sont plus stressantes, car très régulières.\n[Certaines personnes ne recommandent pas les mises en production tous les jours\n](http://www.estcequonmetenprodaujourdhui.info/) mais lorsque vous avez mis en\nplace l'intégration continue, vous minimisez grandement les risques.\n\nLa preuve en est que certaines entreprises font des mises en productions plusieurs\ncentaines de fois par jour ! (GitHub est un bon exemple).\n\n## Pré-requis au déploiement continu\n\nVous n'avez qu'une chose à faire avant de vous attaquer à la mise en place du\ndéploiement continu : vous devez déjà avoir\n[l'intégration continue](/fr/articles/ci/) en place.\n\nUne fois vous êtes bon à ce niveau, vous pouvez passer à l'étape suivante.\n\n## Faire un script qui fait les choses qui vont bien quand les tests vont bien\n\nUne fois qu'on a une commande qui peut jouer tous les tests et dire \"y'a bon\" ou\n\"tatoukassé\", il nous faut prévoir les actions à réaliser quand nos tests sont\nOK.\n\nUn déploiement FTP, un déploiement git, ou plus compliqué via CDN, peu importe.\n**Il faut juste une commande qui marche simplement.**\n\nPour notre site, la commande est `npm run deploy`. Cette commande pousse le site\ngénéré sur la branche `gh-pages`\n(puisqu'on se sert [des pages GitHub](https://pages.github.com/)).\n\n## Automatiser le script qui fait les choses qui vont bien quand les tests vont bien\n\nOn peut ensuite éventuellement englober les précédentes étapes dans une seule\ncommande qui va se débrouiller s'il n'y a pas d'erreur. Mais bon, si vous n'avez\nque deux commandes (comme on a dans l'exemple de notre site), un simple appel de\ncette façon devrait faire l'affaire :\n\n\n```console\n$ npm test && npm run deploy\n```\n\nSi `npm test` retourne une erreur, la deuxième commande ne sera pas exécutée.\n\n## La suite au prochaine épisode\n\nLa prochaine étape (dans un prochain article) sera de mettre ça en place sur un\nserveur d'intégration continue, nous y étudierons simplement ce que nous avons\nfait pour notre site.\n\nSi vous êtes trop curieux, vous pouvez déjà [consulter le code source de notre\nsite](https://github.com/putaindecode/putaindecode.io) et fouiller dans le\n`package.json` (section `scripts`) pour deviner la suite...\n","__filename":"fr/articles/ci/deploiement-continu/index.md","__url":"/fr/articles/ci/deploiement-continu/","__resourceUrl":"/fr/articles/ci/deploiement-continu/index.html","__dataUrl":"/fr/articles/ci/deploiement-continu/index.html.5eb0697c9f00f8833060f62ca9dec485.json"}