{"head":{"layout":"Post","comments":true,"date":"2016-03-01","title":"Hello Swift","tags":["swift","playgroud","helloworld"],"authors":["leoderbois"],"reviewers":["Uhsac","MoOx","Macxim"],"header":{"image":"swift.jpg","linearGradient":"0deg, rgba(249,82,51, .9), rgba(252, 136, 63, .7)"},"description":"Le Swift est un langage de programmation pr√©sent√© en 2014 par Apple. Il a √©t√© cr√©√© pour simplifier le d√©veloppement d'applications pour les‚Ä¶"},"body":"<blockquote>\n<p>Le <strong>Swift</strong> est un langage de programmation pr√©sent√© en <strong>2014</strong> par\n<strong>Apple</strong>. Il a √©t√© cr√©√© pour simplifier le d√©veloppement d'applications pour\nles environnements d'Apple (iOS, OS X, tvOS, watchOS), car les nouveaux\nd√©veloppeurs,  non habitu√©s √† <code>Objective C</code>, trouvent souvent celui-ci  trop dur\n√† appr√©hender. En 2015, Apple pr√©sente <strong>Swift 2.0</strong>, une version finalis√©e et\nstable du langage. <strong>Swift</strong> est <strong>open-source</strong> depuis novembre 2015.</p>\n</blockquote>\n<h2 id=\"le-playground\"><a href=\"#le-playground\" class=\"phenomic-HeadingAnchor\">#</a>Le playground</h2>\n<p>Avec Swift, Apple a introduit un nouveau moyen de s'amuser avec du code : le\n<strong>playground</strong>. C'est √† mi-chemin entre le script <code>python</code> et le <code>main de C</code>.\nVous pouvez y √©crire des <code>fonctions</code>, y d√©finir des <code>classes</code>, mais aussi y\nex√©cuter du code en direct. Tout ceci est vraiment pratique pour <strong>tester des\nalgorithmes</strong>, des animations ou plus simplement <strong>apprendre √† maitriser le\nlangage</strong>. Les <code>playgrounds</code> servent √† prototyper plus qu‚Äô√† √©crire de vrais\noutils.</p>\n<p>Gr√¢ce √† un partenariat entre Apple et IBM,  vous pouvez faire du <strong>Swift sur\nvotre navigateur</strong> avec Bluemix. La plate-forme de cloud coding d'IBM\n<a href=\"https://swiftlang.ng.bluemix.net\">swiftlang.ng.bluemix.net</a> offre ainsi un\n<strong><code>playground</code> en ligne</strong> pour apprendre et vous entrainer en <strong>Swift</strong>. Donc\nplus de limitation due √† l'OS pour apprendre !</p>\n<p>Sur OS X vous pouvez utiliser les <code>playground</code> avec Xcode, l'IDE d'Apple. Pour\ncr√©er un  <strong><code>playground</code></strong>,  vous ouvrez Xcode et <code>File‚ÜíNew‚ÜíPlayground</code>(ou\n<kbd>‚å•</kbd> + <kbd>‚áß</kbd> + <kbd>‚åò</kbd> + <kbd>N</kbd>). Vous nommez votre\n<code>playground</code> et choisissez une plate-forme pour utiliser des frameworks\nsp√©cifiques pour chaque environnement (iOS ou OS X).</p>\n<p><img src=\"./playground.jpg\" alt=\"Playground\"></p>\n<p>Enfin, Swift peut √™tre utilis√© comme langage de script, en cr√©ant un fichier\n<code>.swift</code>, √† ex√©cuter dans le terminal avec <code>swift [file].swift</code>. Cette m√©thode\noffre peu de confort, car m√™me en ouvrant le fichier sur Xcode vous n'aurez pas\nl'autocompl√©tion. Mais si vous √™tes un mordu de <strong>Linux</strong>, sachez qu'il existe\nun compilateur Swift Linux fourni par Apple sur la <a href=\"https://swift.org/download/#linux\">page d√©di√©e sur\nswift.org</a>.</p>\n<h2 id=\"les-variables\"><a href=\"#les-variables\" class=\"phenomic-HeadingAnchor\">#</a>Les variables</h2>\n<p>Les variables peuvent √™tre constantes ou non. Le pr√©compilateur d'Xcode est\nassez strict avec la notion de constante. Si vous d√©clarez une variable non\nconstante mais que vous ne la modifiez nulle part, il vous proposera toujours de\nla passer en constante.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-comment\">// Exemple de variables/constantes</span>\n<span class=\"hljs-keyword\">var</span> aVariable:<span class=\"hljs-type\">Type</span> = something <span class=\"hljs-comment\">// variable (mutable)</span>\n<span class=\"hljs-keyword\">let</span> aConstant:<span class=\"hljs-type\">Type</span> = somethingElse <span class=\"hljs-comment\">// constante</span></code></pre>\n<p>Swift est un langage typ√©, mais le type peut √™tre implicite lors de la\nd√©claration. Swift typera alors la variable automatiquement.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">let</span> explicitString:<span class=\"hljs-type\">String</span> = <span class=\"hljs-string\">\"Mario\"</span>\n<span class=\"hljs-keyword\">let</span> implicitString = <span class=\"hljs-string\">\"Luigi\"</span> <span class=\"hljs-comment\">// This is a string too</span></code></pre>\n<p>Par d√©faut, les variables ne peuvent pas √™tre nulles. Pour qu'une variable soit\ndite <em>optionelle</em>, il faut d√©clarer une variable explicite en ajoutant un <code>?</code> √†\nson type.</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-comment\">// Ce code ne compile pas :</span>\n<span class=\"hljs-keyword\">var</span> implicitString = <span class=\"hljs-string\">\"Luigi\"</span>\nname = <span class=\"hljs-literal\">nil</span> <span class=\"hljs-comment\">// Error : Nil cannot be assigned to type 'String'</span>\n\n<span class=\"hljs-comment\">// Mais celui-ci, si</span>\n<span class=\"hljs-keyword\">let</span> explicitOptionalString:<span class=\"hljs-type\">String</span>? = <span class=\"hljs-string\">\"Mario\"</span>\nexplicitOptionalString = <span class=\"hljs-literal\">nil</span> <span class=\"hljs-comment\">// Ol√© üíÉ</span></code></pre>\n<h2 id=\"affichage\"><a href=\"#affichage\" class=\"phenomic-HeadingAnchor\">#</a>Affichage</h2>\n<p>La fonction <code>print()</code> sert √† afficher une cha√Æne de caract√®res dans la console\npour un script ou une application. Pour afficher des variables dans des cha√Ænes\nde caract√®res, on utilise cette syntaxe <code>\\(maVariable)</code>. Exemple :</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">let</span> age:<span class=\"hljs-type\">Int</span> = <span class=\"hljs-number\">32</span>\n<span class=\"hljs-keyword\">let</span> name:<span class=\"hljs-type\">String</span> = <span class=\"hljs-string\">\"Luigi\"</span>\n<span class=\"hljs-keyword\">let</span> point:<span class=\"hljs-type\">Float</span> = <span class=\"hljs-number\">43.4</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"<span class=\"hljs-subst\">\\(name)</span> have <span class=\"hljs-subst\">\\(age)</span> and <span class=\"hljs-subst\">\\(point)</span> points\"</span>)\n\n<span class=\"hljs-comment\">// Ou</span>\n<span class=\"hljs-keyword\">let</span> toPrint:<span class=\"hljs-type\">String</span> = <span class=\"hljs-string\">\"<span class=\"hljs-subst\">\\(name)</span> have <span class=\"hljs-subst\">\\(age)</span> and <span class=\"hljs-subst\">\\(point)</span> points\"</span>\n<span class=\"hljs-built_in\">print</span>(toPrint)</code></pre>\n<h2 id=\"conditions--boucles\"><a href=\"#conditions--boucles\" class=\"phenomic-HeadingAnchor\">#</a>Conditions &#x26; boucles</h2>\n<p>Un langage sans condition √ßa sert pas √† grand-chose, donc voici la syntaxe :</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-keyword\">if</span> (a > x) || (a &#x3C; y) { <span class=\"hljs-comment\">// Si a est plus grand que x ou plus petit que y</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"a > x OR a &#x3C; y \"</span>) <span class=\"hljs-comment\">// j'affiche</span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> a &#x3C; z { <span class=\"hljs-comment\">// Sinon si ...</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"a &#x3C; z\"</span>)\n} <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// Sinon</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"y &#x3C;= a &#x3C;= x\"</span>)\n}</code></pre>\n<p>Quelques exemples de boucles <code>while</code> et <code>for</code> :</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-comment\">// While</span>\n<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">while</span> i &#x3C; <span class=\"hljs-number\">10</span> { <span class=\"hljs-comment\">// Tant que i &#x3C; 10 j'affiche</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"i = <span class=\"hljs-subst\">\\(i)</span>\"</span>)\n    i+=<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// incr√©mente i de 1</span>\n}\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>...<span class=\"hljs-number\">10</span>) { <span class=\"hljs-comment\">// pour i de 0 √† 10</span>\n\t<span class=\"hljs-built_in\">print</span>(i)\n}\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>...<span class=\"hljs-number\">10</span>).<span class=\"hljs-built_in\">reverse</span>() { <span class=\"hljs-comment\">// pour i de 1 √† 10 en moonwalk</span>\n    <span class=\"hljs-built_in\">print</span>(i)\n}\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>.<span class=\"hljs-built_in\">stride</span>(to: <span class=\"hljs-number\">10</span>, by: <span class=\"hljs-number\">2</span>) { <span class=\"hljs-comment\">// pour i de 0 √† 10 par saut de 2 (10 non compris)</span>\n    <span class=\"hljs-built_in\">print</span>(i)\n}\n\n<span class=\"hljs-comment\">// autre notation de For utilisant des Ranges</span>\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..&#x3C;<span class=\"hljs-number\">3</span>{\n    <span class=\"hljs-built_in\">print</span>(i)\n}\n\n<span class=\"hljs-comment\">// For-In : Pour mes √©l√©ments d'un Array</span>\n<span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> myCollection {\n    element.doSomething()\n}\n\n<span class=\"hljs-comment\">// For-In : en enumurant la boucle</span>\n<span class=\"hljs-keyword\">for</span> (index,valeur) <span class=\"hljs-keyword\">in</span> myCollection.<span class=\"hljs-built_in\">enumerate</span>(){\n\t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"valeur √† l'index [<span class=\"hljs-subst\">\\(index)</span>] -> <span class=\"hljs-subst\">\\(valeur)</span>\"</span>)\n}</code></pre>\n<blockquote>\n<p>Depuis Swift 2.2, les notations <code>--</code> et <code>++</code> sont d√©pr√©ci√©es, donc plus de i++ dans les boucles üò©. Ce qui explique aussi que les boucles For C-Style sont aussi d√©pr√©ci√©es. Ex:<code>for var i = 0; i &#x3C; 3; i++</code>. Pour ce genre de boucle il faut utiliser la notation <code>(0...3)</code>.</p>\n</blockquote>\n<h2 id=\"fonctions\"><a href=\"#fonctions\" class=\"phenomic-HeadingAnchor\">#</a>Fonctions</h2>\n<p>Un script sans fonction c'est comme une raclette sans Saint-Nectaire. Beaucoup\nde d√©butants le font mais une fois qu'on y a gout√©, il est impossible s'en\npasser !</p>\n<p>Donc voici la syntaxe <del>d'un Saint-Nectaire</del>... d'une fonction :</p>\n<pre><code class=\"hljs language-swift\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">myFunctionName</span><span class=\"hljs-params\">(myStringInput:String,myIntInput:Int)</span></span>-><span class=\"hljs-type\">Int</span>{\n\n    <span class=\"hljs-comment\">// Votre code</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">42</span> <span class=\"hljs-comment\">// Retour</span>\n}</code></pre>\n<p>En r√©alit√©, les fonctions sont un cas particulier d'utilisation d'une notion\nintroduite par Swift qu'ils appellent les <em>closures</em>. Pour les amateurs de\n<em>Block</em> (Objective C, C++14) et  <strong>Lambdas</strong> (C++, Java,...), les closures\nseront d√©taill√©es dans un prochain article.</p>\n<h2 id=\"le-mot-de-la-fin\"><a href=\"#le-mot-de-la-fin\" class=\"phenomic-HeadingAnchor\">#</a>Le mot de la fin</h2>\n<p>Avec tout √ßa vous devriez d√©j√† vous amuser un peu !\nPour information, les scripts Swift peuvent <strong>utiliser <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/ObjC_classic/\">Foundation</a></strong>\nsur Linux ou OS X , le framework de base des OS d'Apple bien connu des\nd√©veloppeurs OS X/iOS. Il permet le traitement des fichiers, des <code>String</code> et\n<a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/ObjC_classic/\">bien plus</a>.</p>\n","rawBody":"> Le **Swift** est un langage de programmation pr√©sent√© en **2014** par\n**Apple**. Il a √©t√© cr√©√© pour simplifier le d√©veloppement d'applications pour\nles environnements d'Apple (iOS, OS X, tvOS, watchOS), car les nouveaux\nd√©veloppeurs,  non habitu√©s √† `Objective C`, trouvent souvent celui-ci  trop dur\n√† appr√©hender. En 2015, Apple pr√©sente **Swift 2.0**, une version finalis√©e et\nstable du langage. **Swift** est **open-source** depuis novembre 2015.\n\n## Le playground\n\nAvec Swift, Apple a introduit un nouveau moyen de s'amuser avec du code : le\n**playground**. C'est √† mi-chemin entre le script `python` et le `main de C`.\nVous pouvez y √©crire des `fonctions`, y d√©finir des `classes`, mais aussi y\nex√©cuter du code en direct. Tout ceci est vraiment pratique pour **tester des\nalgorithmes**, des animations ou plus simplement **apprendre √† maitriser le\nlangage**. Les `playgrounds` servent √† prototyper plus qu‚Äô√† √©crire de vrais\noutils.\n\nGr√¢ce √† un partenariat entre Apple et IBM,  vous pouvez faire du **Swift sur\nvotre navigateur** avec Bluemix. La plate-forme de cloud coding d'IBM\n[swiftlang.ng.bluemix.net](https://swiftlang.ng.bluemix.net) offre ainsi un\n**`playground` en ligne** pour apprendre et vous entrainer en **Swift**. Donc\nplus de limitation due √† l'OS pour apprendre !\n\nSur OS X vous pouvez utiliser les `playground` avec Xcode, l'IDE d'Apple. Pour\ncr√©er un  **`playground`**,  vous ouvrez Xcode et `File‚ÜíNew‚ÜíPlayground`(ou\n<kbd>‚å•</kbd> + <kbd>‚áß</kbd> + <kbd>‚åò</kbd> + <kbd>N</kbd>). Vous nommez votre\n`playground` et choisissez une plate-forme pour utiliser des frameworks\nsp√©cifiques pour chaque environnement (iOS ou OS X).\n\n![Playground](./playground.jpg)\n\nEnfin, Swift peut √™tre utilis√© comme langage de script, en cr√©ant un fichier\n`.swift`, √† ex√©cuter dans le terminal avec `swift [file].swift`. Cette m√©thode\noffre peu de confort, car m√™me en ouvrant le fichier sur Xcode vous n'aurez pas\nl'autocompl√©tion. Mais si vous √™tes un mordu de **Linux**, sachez qu'il existe\nun compilateur Swift Linux fourni par Apple sur la [page d√©di√©e sur\nswift.org](https://swift.org/download/#linux).\n\n## Les variables\n\nLes variables peuvent √™tre constantes ou non. Le pr√©compilateur d'Xcode est\nassez strict avec la notion de constante. Si vous d√©clarez une variable non\nconstante mais que vous ne la modifiez nulle part, il vous proposera toujours de\nla passer en constante.\n\n```swift\n// Exemple de variables/constantes\nvar aVariable:Type = something // variable (mutable)\nlet aConstant:Type = somethingElse // constante\n```\n\nSwift est un langage typ√©, mais le type peut √™tre implicite lors de la\nd√©claration. Swift typera alors la variable automatiquement.\n\n```swift\nlet explicitString:String = \"Mario\"\nlet implicitString = \"Luigi\" // This is a string too\n```\n\nPar d√©faut, les variables ne peuvent pas √™tre nulles. Pour qu'une variable soit\ndite *optionelle*, il faut d√©clarer une variable explicite en ajoutant un `?` √†\nson type.\n\n```swift\n\n// Ce code ne compile pas :\nvar implicitString = \"Luigi\"\nname = nil // Error : Nil cannot be assigned to type 'String'\n\n// Mais celui-ci, si\nlet explicitOptionalString:String? = \"Mario\"\nexplicitOptionalString = nil // Ol√© üíÉ\n```\n\n## Affichage\n\nLa fonction `print()` sert √† afficher une cha√Æne de caract√®res dans la console\npour un script ou une application. Pour afficher des variables dans des cha√Ænes\nde caract√®res, on utilise cette syntaxe `\\(maVariable)`. Exemple :\n\n```swift\nlet age:Int = 32\nlet name:String = \"Luigi\"\nlet point:Float = 43.4\n\nprint(\"\\(name) have \\(age) and \\(point) points\")\n\n// Ou\nlet toPrint:String = \"\\(name) have \\(age) and \\(point) points\"\nprint(toPrint)\n```\n\n## Conditions & boucles\n\nUn langage sans condition √ßa sert pas √† grand-chose, donc voici la syntaxe :\n\n```swift\nif (a > x) || (a < y) { // Si a est plus grand que x ou plus petit que y\n    print(\"a > x OR a < y \") // j'affiche\n} else if a < z { // Sinon si ...\n    print(\"a < z\")\n} else { // Sinon\n    print(\"y <= a <= x\")\n}\n```\n\nQuelques exemples de boucles `while` et `for` :\n\n```swift\n\n// While\nvar i = 0\nwhile i < 10 { // Tant que i < 10 j'affiche\n    print(\"i = \\(i)\")\n    i+=1 // incr√©mente i de 1\n}\n\nfor i in (0...10) { // pour i de 0 √† 10\n\tprint(i)\n}\n\nfor i in (1...10).reverse() { // pour i de 1 √† 10 en moonwalk\n    print(i)\n}\n\nfor i in 0.stride(to: 10, by: 2) { // pour i de 0 √† 10 par saut de 2 (10 non compris)\n    print(i)\n}\n\n// autre notation de For utilisant des Ranges\nfor i in 0..<3{\n    print(i)\n}\n\n// For-In : Pour mes √©l√©ments d'un Array\nfor element in myCollection {\n    element.doSomething()\n}\n\n// For-In : en enumurant la boucle\nfor (index,valeur) in myCollection.enumerate(){\n\tprint(\"valeur √† l'index [\\(index)] -> \\(valeur)\")\n}\n\n\n```\n\n> Depuis Swift 2.2, les notations `--` et `++` sont d√©pr√©ci√©es, donc plus de i++ dans les boucles üò©. Ce qui explique aussi que les boucles For C-Style sont aussi d√©pr√©ci√©es. Ex:`for var i = 0; i < 3; i++`. Pour ce genre de boucle il faut utiliser la notation `(0...3)`.\n\n## Fonctions\n\nUn script sans fonction c'est comme une raclette sans Saint-Nectaire. Beaucoup\nde d√©butants le font mais une fois qu'on y a gout√©, il est impossible s'en\npasser !\n\nDonc voici la syntaxe ~~d'un Saint-Nectaire~~... d'une fonction :\n\n```swift\nfunc myFunctionName(myStringInput:String,myIntInput:Int)->Int{\n\n    // Votre code\n    return 42 // Retour\n}\n```\n\nEn r√©alit√©, les fonctions sont un cas particulier d'utilisation d'une notion\nintroduite par Swift qu'ils appellent les *closures*. Pour les amateurs de\n*Block* (Objective C, C++14) et  **Lambdas** (C++, Java,...), les closures\nseront d√©taill√©es dans un prochain article.\n\n## Le mot de la fin\n\nAvec tout √ßa vous devriez d√©j√† vous amuser un peu !\nPour information, les scripts Swift peuvent **utiliser [Foundation](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/ObjC_classic/)**\nsur Linux ou OS X , le framework de base des OS d'Apple bien connu des\nd√©veloppeurs OS X/iOS. Il permet le traitement des fichiers, des `String` et\n[bien plus](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/ObjC_classic/).\n","__filename":"fr/articles/swift/hello/index.md","__url":"/fr/articles/swift/hello/","__resourceUrl":"/fr/articles/swift/hello/index.html","__dataUrl":"/fr/articles/swift/hello/index.html.fe335384a152822c01f68c4372c6e2da.json"}