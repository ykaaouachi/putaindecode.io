{"head":{"layout":"Post","comments":true,"date":"2015-12-13","title":"ES6, ES2015 : les nouvelles m√©thodes d'Array","tags":["javascript","ES6","ES2015"],"authors":["lionelB"],"description":"ES6  ES2015 enrichit les objets de la bibilioth√®que standard de nouvelles fonctionnalit√©s. Voici les nouveaut√©s que l'on va trouver dans‚Ä¶"},"body":"<p><del>ES6</del>  ES2015 enrichit les objets de la bibilioth√®que standard de nouvelles fonctionnalit√©s.\nVoici les nouveaut√©s que l'on va trouver dans <code>Array</code>.</p>\n<h2 id=\"arrayfrom\"><a href=\"#arrayfrom\" class=\"phenomic-HeadingAnchor\">#</a>Array.from()</h2>\n<p>Parmi les nouvelles m√©thodes ajout√©es √† Array, <code>Array.from()</code> est peut-√™tre celle que vous allez utiliser le plus souvent. Elle va nous permettre de cr√©er un tableau √† partir d'un it√©rable ou d'un objet qui ressemble √† un tableau comme une NodeList, ou encore <code>arguments</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> nodes = <span class=\"hljs-built_in\">Array</span>.from(<span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'div'</span>))\nnodes.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">node</span> =></span> <span class=\"hljs-built_in\">console</span>.log(node))</code></pre>\n<h2 id=\"arrayof\"><a href=\"#arrayof\" class=\"phenomic-HeadingAnchor\">#</a>Array.of()</h2>\n<p>Cette m√©thode va permettre de cr√©er un tableau √† partir des arguments re√ßus.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> arr = <span class=\"hljs-built_in\">Array</span>.of(<span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-string\">\"world\"</span>)\n<span class=\"hljs-built_in\">console</span>.log(arr.join(<span class=\"hljs-string\">\" \"</span>)) <span class=\"hljs-comment\">// \"hello world\"</span></code></pre>\n<h2 id=\"arrayprototypekeys--arrayprototypeentries\"><a href=\"#arrayprototypekeys--arrayprototypeentries\" class=\"phenomic-HeadingAnchor\">#</a>Array.prototype.keys() &#x26; Array.prototype.entries()</h2>\n<p>On retrouve aussi ces m√©thodes sur d'autres it√©rables comme Map ou Set.\n<code>Array.prototype.keys()</code> va renvoyer un nouveau tableau dont les valeurs seront les clefs du tableau pass√©es en param√®tre¬†:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> arr =  [...Array(<span class=\"hljs-number\">3</span>).keys()]\n<span class=\"hljs-built_in\">console</span>.log(arr) <span class=\"hljs-comment\">// [0,1,2]</span></code></pre>\n<p><code>Array.prototype.entries()</code> quant √† lui va renvoyer un tableau compos√© des paires cl√©/valeur¬†:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-string\">\"world\"</span>]\n<span class=\"hljs-built_in\">console</span>.log(arr.entries()) <span class=\"hljs-comment\">// [[0, \"hello\"], [1, \"world\"]]</span></code></pre>\n<h2 id=\"arrayprototypefind\"><a href=\"#arrayprototypefind\" class=\"phenomic-HeadingAnchor\">#</a>Array.prototype.find()</h2>\n<p>Cette m√©thode va permettre de renvoyer une valeur contenue dans le tableau si celle-ci v√©rifie\nla condition d√©finie par la fonction de pr√©dicat pass√©e en param√®tre. On retrouve le m√™me principe qu'avec <code>filter</code>, <code>some</code> et <code>every</code>. Si aucune valeur ne\nvalide la fonction de pr√©dicat, alors la m√©thode renverra <code>undefined</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> arr = [{<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">label</span>:<span class=\"hljs-string\">\"hello\"</span>}, {<span class=\"hljs-attr\">id</span>:<span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"world\"</span>}]\n<span class=\"hljs-keyword\">const</span> found = arr.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> item.id === <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-keyword\">const</span> notfound = arr.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =></span> item.id === <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-built_in\">console</span>.log(found, notfound) <span class=\"hljs-comment\">// {id:2, name: \"worl\"}, undefined</span></code></pre>\n<p>√Ä noter qu'il existe aussi <code>Array.prototype.findIndex()</code> qui renverra non pas l'objet, mais l'index de l'objet qui validera la fonction de pr√©dicat.</p>\n<h2 id=\"arrayprototypefill\"><a href=\"#arrayprototypefill\" class=\"phenomic-HeadingAnchor\">#</a>Array.prototype.fill()</h2>\n<p>Cette m√©thode va permettre de remplir un tableau avec une valeur pass√©e en param√®tre. Il est toutefois possible de d√©finir un index de d√©but et un index de fin (comme avec slice par exemple) si l'on ne souhaite remplacer qu'une partie du tableau.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> arr = <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">3</span>).fill(<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-built_in\">console</span>.log(arr) <span class=\"hljs-comment\">// [1,1,1]</span></code></pre>\n<h2 id=\"arrayprototypecopywithin\"><a href=\"#arrayprototypecopywithin\" class=\"phenomic-HeadingAnchor\">#</a>Array.prototype.copyWithin()</h2>\n<p>Cette m√©thode va permettre de renvoyer un nouveau tableau en rempla√ßant une partie du tableau par une s√©quence de ce dernier. Pour cela, on va indiquer √† partir de quel index on souhaite d√©marrer la copie de la s√©quence, ainsi que l'index de d√©but et de fin de la s√©quence que l'on souhaite voir r√©p√©t√©e.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-string\">\"hello\"</span>,<span class=\"hljs-string\">\"alice\"</span>, <span class=\"hljs-string\">\"my\"</span>, <span class=\"hljs-string\">\"name\"</span>, <span class=\"hljs-string\">\"is\"</span> <span class=\"hljs-string\">\"bob\"</span>]\n<span class=\"hljs-built_in\">console</span>.log(arr.copyWithin(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)]) <span class=\"hljs-comment\">//  \"hello\",\"bob\", \"my\", \"name\", \"is\" \"bob\"]</span></code></pre>\n<p>Certaines m√©thodes ne paraissent pas forc√©ment super utiles alors n'h√©sitez √† utiliser les commentaires pour partager des exemples d'utilisation plus int√©ressants üòõ</p>\n","rawBody":"\n~~ES6~~  ES2015 enrichit les objets de la bibilioth√®que standard de nouvelles fonctionnalit√©s.\nVoici les nouveaut√©s que l'on va trouver dans `Array`.\n\n## Array.from()\n\nParmi les nouvelles m√©thodes ajout√©es √† Array, `Array.from()` est peut-√™tre celle que vous allez utiliser le plus souvent. Elle va nous permettre de cr√©er un tableau √† partir d'un it√©rable ou d'un objet qui ressemble √† un tableau comme une NodeList, ou encore `arguments`.\n\n```javascript\nconst nodes = Array.from(document.querySelectorAll('div'))\nnodes.forEach(node => console.log(node))\n```\n\n## Array.of()\n\nCette m√©thode va permettre de cr√©er un tableau √† partir des arguments re√ßus.\n\n```javascript\nconst arr = Array.of(\"hello\", \"world\")\nconsole.log(arr.join(\" \")) // \"hello world\"\n```\n\n## Array.prototype.keys() & Array.prototype.entries()\n\nOn retrouve aussi ces m√©thodes sur d'autres it√©rables comme Map ou Set.\n`Array.prototype.keys()` va renvoyer un nouveau tableau dont les valeurs seront les clefs du tableau pass√©es en param√®tre¬†:\n\n```javascript\nconst arr =  [...Array(3).keys()]\nconsole.log(arr) // [0,1,2]\n```\n\n`Array.prototype.entries()` quant √† lui va renvoyer un tableau compos√© des paires cl√©/valeur¬†:\n\n```javascript\nconst arr = [\"hello\", \"world\"]\nconsole.log(arr.entries()) // [[0, \"hello\"], [1, \"world\"]]\n```\n\n## Array.prototype.find()\n\nCette m√©thode va permettre de renvoyer une valeur contenue dans le tableau si celle-ci v√©rifie \nla condition d√©finie par la fonction de pr√©dicat pass√©e en param√®tre. On retrouve le m√™me principe qu'avec `filter`, `some` et `every`. Si aucune valeur ne \nvalide la fonction de pr√©dicat, alors la m√©thode renverra `undefined`.\n\n```javascript\nconst arr = [{id:1, label:\"hello\"}, {id:2, name: \"world\"}]\nconst found = arr.find(item => item.id === 2)\nconst notfound = arr.find(item => item.id === 3)\nconsole.log(found, notfound) // {id:2, name: \"worl\"}, undefined\n```\n\n√Ä noter qu'il existe aussi `Array.prototype.findIndex()` qui renverra non pas l'objet, mais l'index de l'objet qui validera la fonction de pr√©dicat.\n\n## Array.prototype.fill()\n\nCette m√©thode va permettre de remplir un tableau avec une valeur pass√©e en param√®tre. Il est toutefois possible de d√©finir un index de d√©but et un index de fin (comme avec slice par exemple) si l'on ne souhaite remplacer qu'une partie du tableau.\n\n```javascript\nconst arr = Array(3).fill(1)\nconsole.log(arr) // [1,1,1]\n```\n\n## Array.prototype.copyWithin()\n\nCette m√©thode va permettre de renvoyer un nouveau tableau en rempla√ßant une partie du tableau par une s√©quence de ce dernier. Pour cela, on va indiquer √† partir de quel index on souhaite d√©marrer la copie de la s√©quence, ainsi que l'index de d√©but et de fin de la s√©quence que l'on souhaite voir r√©p√©t√©e.\n\n```javascript\nconst arr = [\"hello\",\"alice\", \"my\", \"name\", \"is\" \"bob\"]\nconsole.log(arr.copyWithin(1, 5)]) //  \"hello\",\"bob\", \"my\", \"name\", \"is\" \"bob\"]\n```\n\nCertaines m√©thodes ne paraissent pas forc√©ment super utiles alors n'h√©sitez √† utiliser les commentaires pour partager des exemples d'utilisation plus int√©ressants üòõ\n","__filename":"fr/articles/js/es2015/array-methods-addition.md","__url":"/fr/articles/js/es2015/array-methods-addition/","__resourceUrl":"/fr/articles/js/es2015/array-methods-addition/index.html","__dataUrl":"/fr/articles/js/es2015/array-methods-addition/index.html.6072ef066f25c2332c2dfdf44d93c318.json"}