{"head":{"layout":"Post","comments":true,"date":"2015-05-07","title":"Utiliser React en moteur de templates","tags":["javascript","react"],"authors":["MoOx"],"description":"Vous connaissez probablement tous des moteurs de templates. En JavaScript nous avons Handlebars, Jade, EJS, Slim... Tous ces projets‚Ä¶"},"body":"<p>Vous connaissez probablement tous des moteurs de templates.\nEn JavaScript nous avons Handlebars, Jade, EJS, Slim...\nTous ces projets partent de bonnes intentions mais √† l'utilisation,\non peut sentir des limitations et donc de l'insatisfaction.</p>\n<p>Utiliser Handlebars par exemple, c'est un peu devoir coder tout un tas de helpers\npour g√©rer une partie de votre affichage, √ßa peut vite devenir lourd.\n√ätre restreint √† une syntaxe limit√©e par choix est un peu frustrant.\nQuand c'est pas √ßa, c'est la syntaxe du moteur qui va √™tre lourde.</p>\n<p>On peut en venir √† regretter PHP. Faut avouer que ce langage √©tait plut√¥t simple\n√† utiliser en tant que moteur de template.\nEfficace et pas de restrictions. On trouve m√™me parfois des <code>mysql_query()</code>\ndans des templates‚Ä¶</p>\n<p>Blague √† part, nous cherchions des langages pour refaire une partie de notre site\npuisque nous n'√©tions pas vraiment satisfaits du processus actuel\n(anciennement Handlebars, puis Jade).</p>\n<p>Mais finalement, pourquoi ne pas rester avec du JavaScript, purement et simplement¬†?</p>\n<p>C'est ce que nous avons fait avec React et JSX qui sont de plus en plus utilis√©s.\nLa syntaxe est plut√¥t lib√©ratrice.</p>\n<p>Pour ceux qui ne connaissent pas JSX, il s'agit d'un superset de JavaScript qui\nsupporte une syntaxe XML transform√© en appel de fonctions JavaScript.\nIl faut dire que le XML a beau √™tre verbeux, pour d√©finir des\n√©l√©ments ayant des propri√©t√©s et des enfants, on a pas vraiment fait plus\nlisible et clair sur ce point. Le HTML est plut√¥t simple √† prendre en main c'est\ncertain. Les m√©thodes de rendu de React (ce qui va nous int√©resser) sont tr√®s proches\nde l'HTML.</p>\n<p>Ceux qui ont utilis√© JSX (bien qu'ayant pu avoir des naus√©es au premier contact)\navouent souvent qu'ils ont fini par aimer cette petite syntaxe cr√©√©e par Facebook qui\nfonctionne tr√®s bien avec React.</p>\n<p>Du coup, si on utilisait √ßa pour faire de simple templates et non pas des composants\nd'interface utilisateur dynamiques¬†? Qui peut le plus peut le moins (quoi qu'en\nfait, des templates, c'est un peu des composants d'interface).</p>\n<h2 id=\"exemple-de-template-reactjsx\"><a href=\"#exemple-de-template-reactjsx\" class=\"phenomic-HeadingAnchor\">#</a>Exemple de template React/JSX</h2>\n<p>Si vous ne savez pas trop ce qu'est React, nous vous recommandons de lire\nnotre <a href=\"/fr/articles/js/react/\">introduction √† React</a>.</p>\n<p>Dans notre cas, on ne va pas sp√©cialement b√©n√©ficier de certaines de ses forces,\nmais √ßa fera tr√®s bien le job pour notre besoin.</p>\n<p>Nous n'aborderons pas dans le d√©tail la syntaxe React/JSX, ni ES6, pour rester\nfocalis√©s sur la finalit√© (on a pr√©vu des articles √† ce propos, en attendant\n<a href=\"http://babeljs.io/docs/learn-es6/\">voici de quoi vous occuper avec ES6</a>).</p>\n<p><em>Attention, pour ceux qui sont encore sur des plugins jQuery, √ßa risque de vous\npiquer les yeux</em> üò≠.</p>\n<p><a name=\"es6-class\"></a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, {Component} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PostTemplate</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n        </span>&#x3C;head>\n          &#x3C;title>{this.props.pageTitle}&#x3C;/title>\n        &#x3C;/head><span class=\"xml\">\n        </span>&#x3C;body>\n          &#x3C;article className=\"org-Post\">\n            &#x3C;header className=\"org-Post-header\">\n              &#x3C;h1>{this.props.pageTitle}&#x3C;/h1>\n            &#x3C;/header>\n            &#x3C;div\n              className=\"org-Post-content\"\n              dangerouslySetInnerHTML={{__html: this.props.pageContent}}\n            />\n          &#x3C;/article>\n        &#x3C;/body>\n      &#x3C;/html><span class=\"xml\">\n    )\n  }\n}</span></code></pre>\n<p>Ce que vous voyez c'est bien du JavaScript. Un peu am√©lior√© via JSX, on ne va\npas le nier (dans notre cas, on g√®re tout √ßa de mani√®re transparente avec\n<a href=\"http://babeljs.io/\">babel(-node)</a>).</p>\n<p>√áa ressemble dr√¥lement √† de l'HTML et c'est √ßa qui est appr√©ciable pour nous.\nVous noterez que l'attribut pour d√©finir une classe HTML est <code>className</code> puisque\nReact est en JavaScript et que le mot <code>class</code> est r√©serv√©\n(cf. <a href=\"#es6-class\">la d√©finition en ES6 de la classe</a>).</p>\n<p>En m√™me temps ce qui est cool, c'est qu'on reste dans du JavaScript.</p>\n<p>On peut donc utiliser toutes nos biblioth√®ques pr√©f√©r√©es via <em>npm</em> pour l'affichage\n(exemple¬†: <code>momentjs</code>), ou simplement des boucles via les m√©thodes de parcours de\ntableau tel que <code>forEach()</code> ou <code>map()</code> en appelant d'autres composants.</p>\n<p>Ci-dessous vous trouverez un exemple plus complexe avec une page pour la liste\ndes posts et quelques composants.\nLes balises qui ressemblent √† du HTML et qui commencent par une majuscule sont li√©es √† des\ncomposants qui doivent √™tre d√©finis (dans notre cas import√©s).\nC'est une particularit√© de React.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, {Component} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n\n<span class=\"hljs-keyword\">import</span> Html <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../Html\"</span>\n<span class=\"hljs-keyword\">import</span> Head <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../Head\"</span>\n<span class=\"hljs-keyword\">import</span> Body <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../Body\"</span>\n<span class=\"hljs-keyword\">import</span> PostsList <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../PostsList\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Posts</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Html</span>></span>\n        </span>&#x3C;Head title={head.title} />\n        &#x3C;Body>\n          &#x3C;h1>{head.title}&#x3C;/h1>\n          &#x3C;PostsList\n            posts={\n              this.props.collection\n                .filter((item) => {\n                  /*\n                    ce que vous voulez pour filtrer votre collection\n                    eg:\n                    return !item.draft\n                  */\n                }\n              }\n          />\n        &#x3C;/Body>\n      &#x3C;/Html>\n    )\n  }\n}</code></pre>\n<p>Voici deux exemples de composants utilis√©s ci-dessus¬†:</p>\n<h3 id=\"head\"><a href=\"#head\" class=\"phenomic-HeadingAnchor\">#</a>Head</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, {Component} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Head</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n        </span>&#x3C;meta charSet=\"utf-8\" />\n        &#x3C;meta httpEquiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n        &#x3C;meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0\"\n        />\n        &#x3C;title>{this.props.title}&#x3C;/title>\n        &#x3C;link\n          rel=\"stylesheet\"\n          href=\"/index.css\"\n        />\n        &#x3C;link\n          rel=\"alternate\"\n          href=\"/feed.xml\"\n          title={this.props.title}\n          type=\"application/atom+xml\"\n        />\n        {this.props.children}\n      &#x3C;/head>\n    )\n  }\n}</code></pre>\n<h3 id=\"body\"><a href=\"#body\" class=\"phenomic-HeadingAnchor\">#</a>Body</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> React, {Component, PropTypes} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n\n<span class=\"hljs-keyword\">import</span> Header <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../Header\"</span>\n<span class=\"hljs-keyword\">import</span> Footer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../Footer\"</span>\n<span class=\"hljs-keyword\">import</span> GoogleAnalytics <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../Analytics\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Body</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n\n        </span>&#x3C;Header /><span class=\"xml\">\n\n        </span>&#x3C;div className=\"Main\">\n          {this.props.children}\n        &#x3C;/div><span class=\"xml\">\n\n        </span>&#x3C;Footer /><span class=\"xml\">\n\n        </span>&#x3C;script src={\"/index.js\"}>&#x3C;/script><span class=\"xml\">\n\n        </span>&#x3C;GoogleAnalytics /><span class=\"xml\">\n\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span></span>\n    )\n  }\n}</code></pre>\n<p>Bon c'est bien beau mais comment je g√®re l'affichage du composant initial\nfinalement (le parent)¬†?</p>\n<h2 id=\"comment-utiliser-un-template-reactjsx-\"><a href=\"#comment-utiliser-un-template-reactjsx-\" class=\"phenomic-HeadingAnchor\">#</a>Comment utiliser un template React/JSX¬†?</h2>\n<p>C'est bien simple. Dans notre cas, pas besoin de React c√¥t√© client. On doit g√©rer\n√ßa c√¥t√© ¬´¬†serveur¬†¬ª (je mets √ßa entre guillemets puisque dans notre cas pr√©cis, c'est\npour g√©n√©rer un site statique, et c'est donc sur une machine quelconque que la\ng√©n√©ration se fait).</p>\n<p>Voil√† de quoi effectuer le rendu de nos composants vers du bon vieux HTML (car c'est la finalit√©\nd'un <em>moteur de template</em>).</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> react <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> markdownify <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./markdown-parser\"</span>\n<span class=\"hljs-comment\">// je vous conseille marked pour rendre du markdown</span>\n<span class=\"hljs-comment\">// c'est ce que nous utilisons pour rendre nos pages √† l'heure o√π j'√©cris ce post</span>\n\n<span class=\"hljs-keyword\">const</span> reactClass = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./template/PostTemplate\"</span>)\n<span class=\"hljs-keyword\">const</span> component = <span class=\"hljs-keyword\">new</span> (react.createFactory(reactClass))({\n  <span class=\"hljs-comment\">// ici on passe nos \"props\" react</span>\n  pageTitle: <span class=\"hljs-string\">\"Test\"</span>,\n  <span class=\"hljs-attr\">pageContent</span>: markdownify(<span class=\"hljs-string\">\"Imaginons du **markdown** pars√©\"</span>),\n  <span class=\"hljs-comment\">// vous pouvez bien entendu rajouter d'autres choses</span>\n  collections: {\n    <span class=\"hljs-attr\">posts</span>: [\n      <span class=\"hljs-comment\">//...</span>\n    ]\n  }\n})\n\n<span class=\"hljs-keyword\">let</span> html\n<span class=\"hljs-keyword\">try</span> {\n  html = react.renderToStaticMarkup(component)\n}\n<span class=\"hljs-keyword\">catch</span> (err) {\n  <span class=\"hljs-comment\">// Vous devrez g√©rer votre exception selon votre environnement</span>\n  <span class=\"hljs-comment\">// si c'est pour un test on peut simplement ne pas utiliser</span>\n  <span class=\"hljs-comment\">// try/catch, √ßa nous p√®tera √† la gueule et c'est tant mieux</span>\n  <span class=\"hljs-keyword\">throw</span> err\n}\n\n<span class=\"hljs-comment\">// maintenant vous faites ce que vous voulez de votre string html !</span>\n<span class=\"hljs-comment\">// ex: require(\"fs\").writeFile(...)</span></code></pre>\n<p>La m√©thode int√©ressante de React est dans notre cas <code>renderToStaticMarkup()</code> qui\nva nous g√©n√©rer un HTML qui va bien.</p>\n<p>Pour aller plus loin on pourrait d√©cider d'utiliser <code>renderToString()</code> plut√¥t que\n<code>renderToStaticMarkup()</code> afin de pouvoir faire prendre le relais √† ReactJS c√¥t√© client\nmais l√† <a href=\"/fr/articles/js/react/cote-serveur/\">le niveau de complexit√© est diff√©rent</a>.</p>\n<p>Pour la petite anecdote, notre site utilise actuellement <a href=\"http://www.metalsmith.io/\">metalsmith</a>,\nune petite biblioth√®que simple mais qui permet par son API de faire des choses sympas.</p>\n<p>J'ai donc cod√© <a href=\"https://github.com/search?q=user%253AMoOx+metalsmith\">quelques plugins metalsmith</a>\ndont un <a href=\"https://github.com/MoOx/metalsmith-react\">metalsmith-react</a> √† l'occasion.</p>\n<p>N'h√©sitez pas √† consulter\n<a href=\"https://github.com/putaindecode/putaindecode.io\">le code source de notre site</a>\npour faire des d√©couvertes sympas.</p>\n","rawBody":"\nVous connaissez probablement tous des moteurs de templates.\nEn JavaScript nous avons Handlebars, Jade, EJS, Slim...\nTous ces projets partent de bonnes intentions mais √† l'utilisation,\non peut sentir des limitations et donc de l'insatisfaction.\n\nUtiliser Handlebars par exemple, c'est un peu devoir coder tout un tas de helpers\npour g√©rer une partie de votre affichage, √ßa peut vite devenir lourd.\n√ätre restreint √† une syntaxe limit√©e par choix est un peu frustrant.\nQuand c'est pas √ßa, c'est la syntaxe du moteur qui va √™tre lourde.\n\nOn peut en venir √† regretter PHP. Faut avouer que ce langage √©tait plut√¥t simple\n√† utiliser en tant que moteur de template.\nEfficace et pas de restrictions. On trouve m√™me parfois des `mysql_query()`\ndans des templates‚Ä¶\n\nBlague √† part, nous cherchions des langages pour refaire une partie de notre site\npuisque nous n'√©tions pas vraiment satisfaits du processus actuel\n(anciennement Handlebars, puis Jade).\n\nMais finalement, pourquoi ne pas rester avec du JavaScript, purement et simplement¬†?\n\nC'est ce que nous avons fait avec React et JSX qui sont de plus en plus utilis√©s.\nLa syntaxe est plut√¥t lib√©ratrice.\n\nPour ceux qui ne connaissent pas JSX, il s'agit d'un superset de JavaScript qui\nsupporte une syntaxe XML transform√© en appel de fonctions JavaScript.\nIl faut dire que le XML a beau √™tre verbeux, pour d√©finir des\n√©l√©ments ayant des propri√©t√©s et des enfants, on a pas vraiment fait plus\nlisible et clair sur ce point. Le HTML est plut√¥t simple √† prendre en main c'est\ncertain. Les m√©thodes de rendu de React (ce qui va nous int√©resser) sont tr√®s proches\nde l'HTML.\n\nCeux qui ont utilis√© JSX (bien qu'ayant pu avoir des naus√©es au premier contact)\navouent souvent qu'ils ont fini par aimer cette petite syntaxe cr√©√©e par Facebook qui\nfonctionne tr√®s bien avec React.\n\nDu coup, si on utilisait √ßa pour faire de simple templates et non pas des composants\nd'interface utilisateur dynamiques¬†? Qui peut le plus peut le moins (quoi qu'en\nfait, des templates, c'est un peu des composants d'interface).\n\n## Exemple de template React/JSX\n\nSi vous ne savez pas trop ce qu'est React, nous vous recommandons de lire\nnotre [introduction √† React](/fr/articles/js/react/).\n\nDans notre cas, on ne va pas sp√©cialement b√©n√©ficier de certaines de ses forces,\nmais √ßa fera tr√®s bien le job pour notre besoin.\n\nNous n'aborderons pas dans le d√©tail la syntaxe React/JSX, ni ES6, pour rester\nfocalis√©s sur la finalit√© (on a pr√©vu des articles √† ce propos, en attendant\n  [voici de quoi vous occuper avec ES6](http://babeljs.io/docs/learn-es6/)).\n\n_Attention, pour ceux qui sont encore sur des plugins jQuery, √ßa risque de vous\npiquer les yeux_ üò≠.\n\n<a name=\"es6-class\"></a>\n\n```js\nimport React, {Component} from \"react\"\n\nexport default class PostTemplate extends Component {\n\n  render() {\n    return (\n      <html>\n        <head>\n          <title>{this.props.pageTitle}</title>\n        </head>\n        <body>\n          <article className=\"org-Post\">\n            <header className=\"org-Post-header\">\n              <h1>{this.props.pageTitle}</h1>\n            </header>\n            <div\n              className=\"org-Post-content\"\n              dangerouslySetInnerHTML={{__html: this.props.pageContent}}\n            />\n          </article>\n        </body>\n      </html>\n    )\n  }\n}\n```\n\nCe que vous voyez c'est bien du JavaScript. Un peu am√©lior√© via JSX, on ne va\npas le nier (dans notre cas, on g√®re tout √ßa de mani√®re transparente avec\n[babel(-node)](http://babeljs.io/)).\n\n√áa ressemble dr√¥lement √† de l'HTML et c'est √ßa qui est appr√©ciable pour nous.\nVous noterez que l'attribut pour d√©finir une classe HTML est `className` puisque\nReact est en JavaScript et que le mot `class` est r√©serv√©\n(cf. [la d√©finition en ES6 de la classe](#es6-class)).\n\nEn m√™me temps ce qui est cool, c'est qu'on reste dans du JavaScript.\n\nOn peut donc utiliser toutes nos biblioth√®ques pr√©f√©r√©es via _npm_ pour l'affichage\n(exemple¬†: `momentjs`), ou simplement des boucles via les m√©thodes de parcours de\ntableau tel que `forEach()` ou `map()` en appelant d'autres composants.\n\nCi-dessous vous trouverez un exemple plus complexe avec une page pour la liste\ndes posts et quelques composants.\nLes balises qui ressemblent √† du HTML et qui commencent par une majuscule sont li√©es √† des\ncomposants qui doivent √™tre d√©finis (dans notre cas import√©s).\nC'est une particularit√© de React.\n\n```js\nimport React, {Component} from \"react\"\n\nimport Html from \"../Html\"\nimport Head from \"../Head\"\nimport Body from \"../Body\"\nimport PostsList from \"../PostsList\"\n\nexport default class Posts extends Component {\n\n  render() {\n    return (\n      <Html>\n        <Head title={head.title} />\n        <Body>\n          <h1>{head.title}</h1>\n          <PostsList\n            posts={\n              this.props.collection\n                .filter((item) => {\n                  /*\n                    ce que vous voulez pour filtrer votre collection\n                    eg:\n                    return !item.draft\n                  */\n                }\n              }\n          />\n        </Body>\n      </Html>\n    )\n  }\n}\n```\n\nVoici deux exemples de composants utilis√©s ci-dessus¬†:\n\n### Head\n\n```js\nimport React, {Component} from \"react\"\n\nexport default class Head extends Component {\n\n  render() {\n    return (\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0\"\n        />\n        <title>{this.props.title}</title>\n        <link\n          rel=\"stylesheet\"\n          href=\"/index.css\"\n        />\n        <link\n          rel=\"alternate\"\n          href=\"/feed.xml\"\n          title={this.props.title}\n          type=\"application/atom+xml\"\n        />\n        {this.props.children}\n      </head>\n    )\n  }\n}\n```\n\n### Body\n\n```js\nimport React, {Component, PropTypes} from \"react\"\n\nimport Header from \"../Header\"\nimport Footer from \"../Footer\"\nimport GoogleAnalytics from \"../Analytics\"\n\nexport default class Body extends Component {\n\n  render() {\n    return (\n      <body>\n\n        <Header />\n\n        <div className=\"Main\">\n          {this.props.children}\n        </div>\n\n        <Footer />\n\n        <script src={\"/index.js\"}></script>\n\n        <GoogleAnalytics />\n\n      </body>\n    )\n  }\n}\n```\n\nBon c'est bien beau mais comment je g√®re l'affichage du composant initial\nfinalement (le parent)¬†?\n\n## Comment utiliser un template React/JSX¬†?\n\nC'est bien simple. Dans notre cas, pas besoin de React c√¥t√© client. On doit g√©rer\n√ßa c√¥t√© ¬´¬†serveur¬†¬ª (je mets √ßa entre guillemets puisque dans notre cas pr√©cis, c'est\npour g√©n√©rer un site statique, et c'est donc sur une machine quelconque que la\ng√©n√©ration se fait).\n\nVoil√† de quoi effectuer le rendu de nos composants vers du bon vieux HTML (car c'est la finalit√©\nd'un _moteur de template_).\n\n```js\nimport react from \"react\"\nimport markdownify from \"./markdown-parser\"\n// je vous conseille marked pour rendre du markdown\n// c'est ce que nous utilisons pour rendre nos pages √† l'heure o√π j'√©cris ce post\n\nconst reactClass = require(\"./template/PostTemplate\")\nconst component = new (react.createFactory(reactClass))({\n  // ici on passe nos \"props\" react\n  pageTitle: \"Test\",\n  pageContent: markdownify(\"Imaginons du **markdown** pars√©\"),\n  // vous pouvez bien entendu rajouter d'autres choses\n  collections: {\n    posts: [\n      //...\n    ]\n  }\n})\n\nlet html\ntry {\n  html = react.renderToStaticMarkup(component)\n}\ncatch (err) {\n  // Vous devrez g√©rer votre exception selon votre environnement\n  // si c'est pour un test on peut simplement ne pas utiliser\n  // try/catch, √ßa nous p√®tera √† la gueule et c'est tant mieux\n  throw err\n}\n\n// maintenant vous faites ce que vous voulez de votre string html !\n// ex: require(\"fs\").writeFile(...)\n```\n\nLa m√©thode int√©ressante de React est dans notre cas `renderToStaticMarkup()` qui\nva nous g√©n√©rer un HTML qui va bien.\n\nPour aller plus loin on pourrait d√©cider d'utiliser `renderToString()` plut√¥t que\n`renderToStaticMarkup()` afin de pouvoir faire prendre le relais √† ReactJS c√¥t√© client\nmais l√† [le niveau de complexit√© est diff√©rent](/fr/articles/js/react/cote-serveur/).\n\nPour la petite anecdote, notre site utilise actuellement [metalsmith](http://www.metalsmith.io/),\nune petite biblioth√®que simple mais qui permet par son API de faire des choses sympas.\n\nJ'ai donc cod√© [quelques plugins metalsmith](https://github.com/search?q=user%3AMoOx+metalsmith)\ndont un [metalsmith-react](https://github.com/MoOx/metalsmith-react) √† l'occasion.\n\nN'h√©sitez pas √† consulter\n[le code source de notre site](https://github.com/putaindecode/putaindecode.io)\npour faire des d√©couvertes sympas.\n","__filename":"fr/articles/js/react/utiliser-en-moteur-de-templates/index.md","__url":"/fr/articles/js/react/utiliser-en-moteur-de-templates/","__resourceUrl":"/fr/articles/js/react/utiliser-en-moteur-de-templates/index.html","__dataUrl":"/fr/articles/js/react/utiliser-en-moteur-de-templates/index.html.fd09633a44ca3915b4a928bdced8cdc3.json"}