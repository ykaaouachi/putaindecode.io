{"head":{"layout":"Post","comments":true,"date":"2016-10-04","title":"Votre première app React Native","tags":["js","react-native","reactjs"],"authors":["zoontek"],"description":"Cela fait déjà plus d'un an que Facebook a publié la première version de React Native. Longtemps considéré comme une expérimentation…"},"body":"<p>Cela fait déjà plus d'un an que Facebook a publié la première version de React Native.\nLongtemps considéré comme une expérimentation sympathique (après tout, il est né lors d'un hackathon), un cycle de release soutenu d'une version majeure toutes les 2 semaines a fait qu'aujourd'hui l'écosystème est suffisamment riche et stable pour déployer une app iOS et Android en production.</p>\n<h2 id=\"quels-problèmes-avec-les-solutions-hybrides-\"><a href=\"#quels-probl%C3%A8mes-avec-les-solutions-hybrides-\" class=\"phenomic-HeadingAnchor\">#</a>Quels problèmes avec les solutions hybrides ?</h2>\n<p>Des solutions pour développer une application mobile multiplateforme en JS existent déjà : je pense notamment à <a href=\"https://cordova.apache.org/\">Cordova</a> ou à son superset <a href=\"http://ionicframework.com/\">Ionic</a>. Conçu autour d'une webview système (un navigateur embedded - Safari sur iOS, Chrome sur Android) affichée en plein écran, vous utilisez des technologies web classiques : HTML, CSS et JS. Il est possible d'installer des plugins afin d'enrichir le moteur JavaScript avec de nouvelles APIs en plus des APIs navigateur.\nAinsi, <code>cordova-plugin-contacts</code> permet d'accéder au carnet d'adresses du smartphone, <code>cordova-plugin-vibration</code> permet de faire vibrer celui-ci, etc.</p>\n<p>Le problème, c'est que si l'utilisation de plugins permet de faire le pont avec le code natif (un message est envoyé de la partie JS à la partie Objective-C / Java, qui l'exécute de son côté et renvoie le résultat au JS), l'UI de l'application n'utilise elle pas du tout le layout natif des OS mobiles. Les performances et le look'n'feel de celle-ci seront donc équivalente à une app web, et non une app mobile.</p>\n<p>Avec React Native, point de navigateur embedded, de HTML ou de CSS : vous devez composer vos interfaces à l'aide de composants React qui font appel au layout natif de la plateforme. Un exemple simple : <code>&#x3C;View></code> (qui est l'équivalent d'une <code>&#x3C;div></code> HTML) communique via un pont JS &#x3C;-> Objective-C / Java pour contrôler une UIView (sur iOS) ou une android.view. Les performances de l'UI sont donc quasi similaires aux performances natives.</p>\n<h2 id=\"découverte-de-lenvironnement-de-dev\"><a href=\"#d%C3%A9couverte-de-lenvironnement-de-dev\" class=\"phenomic-HeadingAnchor\">#</a>Découverte de l'environnement de dev</h2>\n<p>Fatigués par JavaScript et son tooling un peu trop fourni ? Rassurez-vous : vous n'avez strictement rien à configurer pour commencer à utiliser React Native. Vous disposez out-of-the-box d'un packager Babel et d'un <a href=\"https://github.com/facebook/react-native/tree/master/babel-preset\">preset custom</a> qui intègre les fonctionnalités de ES2015, mais également le support de React / JSX (encore heureux), de <a href=\"https://flowtype.org/\">Flow</a> et d'autres helpers bienvenus tels que <code>async / await</code>.</p>\n<p>En bons passionnés de bière, nous allons réaliser ensemble une app qui requête la <a href=\"https://punkapi.com/\">PunkAPI</a> (faites la demande d'une clé API via le formulaire prévu à cet effet).</p>\n<p>Je vous renvoie à la <a href=\"https://facebook.github.io/react-native/docs/getting-started.html\">documentation officielle</a> pour ce qui est de l'installation des dépendances (celles-ci variant selon votre OS et l'OS cible).\nXcode / Android Studio, node et watchman étant installés, ouvrez un terminal et initiez le projet :</p>\n<pre><code>npm install -g react-native-cli\nreact-native init PutainDeBiere\n</code></pre>\n<p>Une fois le projet initialisé, le CLI vous informe de la façon dont lancer votre application : faites-le dans la foulée. En ce qui me concerne, je développe pour iOS.</p>\n<pre><code class=\"hljs language-bash\">react-native run-ios</code></pre>\n<p>Selon votre plateforme cible, ouvrez <code>index.ios.js</code> ou <code>index.android.js</code> dans votre éditeur préféré. Modifiez quelque peu le texte et rafraichissez votre app via <code>Command⌘ + R</code>, deux pressions sur la touche <code>R</code> (émulateur Android).</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">/* @flow */</span>\n\n<span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">View</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{styles.container}</span>></span>\n        </span>&#x3C;Text style={styles.welcome}>\n          Welcome to PutainDeBiere!\n        &#x3C;/Text><span class=\"xml\">\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">View</span>></span></span>\n    )\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> styles = StyleSheet.create({\n  <span class=\"hljs-attr\">container</span>: {\n    <span class=\"hljs-attr\">flex</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">justifyContent</span>: <span class=\"hljs-string\">'center'</span>,\n    <span class=\"hljs-attr\">alignItems</span>: <span class=\"hljs-string\">'center'</span>,\n    <span class=\"hljs-attr\">backgroundColor</span>: <span class=\"hljs-string\">'#F5FCFF'</span>,\n  },\n  <span class=\"hljs-attr\">welcome</span>: {\n    <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-number\">20</span>,\n    <span class=\"hljs-attr\">textAlign</span>: <span class=\"hljs-string\">'center'</span>,\n    <span class=\"hljs-attr\">margin</span>: <span class=\"hljs-number\">10</span>,\n  },\n})\n\nAppRegistry.registerComponent(<span class=\"hljs-string\">'PutainDeBiere'</span>, () => App)</code></pre>\n<figure>\n  <img src=\"welcome.png\" alt=\"welcome PutainDeBiere preview\" />\n  <figcaption>Une bien jolie première étape</figcaption>\n</figure>\n<h2 id=\"récupération-des-données\"><a href=\"#r%C3%A9cup%C3%A9ration-des-donn%C3%A9es\" class=\"phenomic-HeadingAnchor\">#</a>Récupération des données</h2>\n<p>Afin de requêter notre API, React Native nous offre plusieurs plusieurs solutions: <code>fetch()</code> ou <code>XMLHttpRequest</code>. Tenez vous en <strong>uniquement</strong> à l'utilisation de la première, la deuxième n'étant présente que pour assurer une compatibilité avec des librairies tierces.</p>\n<p><em>/!\\ Notre clé API doit être encodée en base64. La function <code>btoa()</code> n'étant pas disponible en React Native, il est nécessaire d'installer une dépendance.</em></p>\n<pre><code class=\"hljs language-bash\">npm install --save base-64</code></pre>\n<p>Histoire de séparer notre logique API de nos composants React, nous allons créer un fichier nommé <code>punkapi.js</code> à la racine de notre projet.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> base64 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'base-64'</span> <span class=\"hljs-comment\">// importez la dépendance tout juste installée</span>\n\n<span class=\"hljs-keyword\">const</span> rootEndpoint = <span class=\"hljs-string\">'https://punkapi.com/api/v1'</span>\n<span class=\"hljs-comment\">// pour simplifier la compréhension de ce tuto, nous renseignons la clé API \"en dur\"</span>\n<span class=\"hljs-comment\">// ne faites jamais cela au sein de vos projets (voir http://12factor.net/fr/config)</span>\n<span class=\"hljs-keyword\">const</span> punkApiKey = <span class=\"hljs-string\">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>\n<span class=\"hljs-keyword\">const</span> password = <span class=\"hljs-string\">''</span> <span class=\"hljs-comment\">// la punk API n'utilise aucun mot de passe</span>\n<span class=\"hljs-keyword\">const</span> authBase64 = base64.encode(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${punkApiKey}</span>:<span class=\"hljs-subst\">${password}</span>`</span>)\n\n<span class=\"hljs-keyword\">const</span> headers = {\n  <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json'</span>,\n  <span class=\"hljs-string\">'Accept'</span>: <span class=\"hljs-string\">'application/json'</span>,\n  <span class=\"hljs-string\">'Authorization'</span>: <span class=\"hljs-string\">`Basic <span class=\"hljs-subst\">${authBase64}</span>`</span> <span class=\"hljs-comment\">// HTTP basic auth</span>\n}\n\n<span class=\"hljs-comment\">// retourne une recette de bière au hasard</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> getRandomBrewdog = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span>\n  fetch(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${rootEndpoint}</span>/beers/random`</span>, { headers })\n    .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">{status, json}</span>) =></span> {\n      <span class=\"hljs-keyword\">if</span> (status !== <span class=\"hljs-number\">200</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`API answered with status code <span class=\"hljs-subst\">${status}</span>`</span>) <span class=\"hljs-comment\">// gestion du status code HTTP</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> json() <span class=\"hljs-comment\">// on parse la réponse en JSON</span>\n    })</code></pre>\n<p>Nous allons maintenant modifier notre composant <code>&#x3C;App></code> afin de faire une requête simple d'une bière au hasard juste avant le montage de celui-ci.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { getRandomBrewdog } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./punkapi'</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  componentWillMount() {\n    getRandomBrewdog() <span class=\"hljs-comment\">// fetch() retourne une Promise</span>\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">json</span> =></span> <span class=\"hljs-built_in\">console</span>.log(json))\n      .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-built_in\">console</span>.error(error))\n  }\n\n  …\n}</code></pre>\n<p>Vous apercevez la présence d'un appel à <code>console.log()</code>. Pour y accéder, rien de plus simple: pressez <code>Command⌘ + D</code> au sein de l'émulateur iOS, ou appuyez sur le bouton <code>Menu</code> de l'émulateur Android. Celui-ci contient de multiples choses avec lesquelles je vous laisserai expérimenter par la suite; ce qui nous intéresse ici c'est le bouton <code>Debug JS Remotely</code>, qui va ouvrir un nouvel onglet dans Chrome où sera exécuté notre code JS.</p>\n<p>Il devient donc possible d'ouvrir les Chrome Devtools (dont la console) afin de débuguer notre app.</p>\n<figure>\n  <img src=\"devmenu.png\" alt=\"devmenu + chrome devtools\" />\n  <figcaption>Jusqu'ici tout va bien</figcaption>\n</figure>\n<h2 id=\"présentation-des-données\"><a href=\"#pr%C3%A9sentation-des-donn%C3%A9es\" class=\"phenomic-HeadingAnchor\">#</a>Présentation des données</h2>\n<p>Afin d'afficher les informations que nous venons de récupérer, nous allons avoir besoin de plusieurs éléments (heureusement fournis), à savoir de quoi encapsuler d'autres composants (une <code>&#x3C;View></code> ~= une <code>&#x3C;div></code> HTML), de quoi rendre du texte (<code>&#x3C;Text></code> ~= <code>&#x3C;span></code>), un bouton (nous allons utiliser <code>&#x3C;TouchableOpacity></code>, une zone dont l'opacité est modifiée lors d'un <code>onTouch</code>) et enfin d'un spinner pour indiquer qu'une requête est en cours (<code>&#x3C;ActivityIndicator></code>).</p>\n<p>Nous allons également rendre notre unique composant stateful afin de stocker quelques informations retournées par l'API.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> React, { Component } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> {\n  AppRegistry,\n  StyleSheet,\n  ActivityIndicator, <span class=\"hljs-comment\">// import des composants</span>\n  TouchableOpacity,\n  Text,\n  View,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-native'</span>\n\n<span class=\"hljs-keyword\">import</span> { getRandomBrewdog } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./punkapi'</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-keyword\">constructor</span>(props) {\n    <span class=\"hljs-keyword\">super</span>(props)\n\n    <span class=\"hljs-comment\">// la state de notre composant est utilisé pour</span>\n    <span class=\"hljs-comment\">// stocker quelques infos renvoyées par l'API</span>\n    <span class=\"hljs-keyword\">this</span>.state = {\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">''</span>, <span class=\"hljs-comment\">// nom de la bière</span>\n      description: <span class=\"hljs-string\">''</span>, <span class=\"hljs-comment\">// sa description</span>\n      isLoading: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// la requête API est-elle en cours ?</span>\n    }\n  }\n\n  <span class=\"hljs-comment\">// nous externalisons cette fonction afin de</span>\n  <span class=\"hljs-comment\">// pouvoir l'appeler lorsqu'on le souhaite</span>\n  _getRandomBrewdogWithFeedback = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> {\n    <span class=\"hljs-keyword\">this</span>.setState({ <span class=\"hljs-attr\">isLoading</span>: <span class=\"hljs-literal\">true</span> })\n\n    getRandomBrewdog()\n      .then(<span class=\"hljs-function\"><span class=\"hljs-params\">json</span> =></span> <span class=\"hljs-keyword\">this</span>.setState({\n        <span class=\"hljs-attr\">name</span>: json.name,\n        <span class=\"hljs-attr\">description</span>: json.description,\n        <span class=\"hljs-attr\">isLoading</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// la requête est terminée</span>\n      }))\n      .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-built_in\">console</span>.error(error))\n  }\n\n  componentWillMount() {\n    <span class=\"hljs-keyword\">this</span>._getRandomBrewdogWithFeedback()\n  }\n\n  render() {\n    <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-keyword\">this</span>.state.isLoading\n      ? <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ActivityIndicator</span> /></span> // si requête en cours, on affiche un spinner\n      : </span>&#x3C;Text style={styles.welcome}>\n          Welcome to PutainDeBiere!\n        &#x3C;/Text><span class=\"xml\">\n\n    return (\n      </span>&#x3C;View style={styles.container}>\n        {content}\n      &#x3C;/View><span class=\"xml\">\n    )\n  }\n}\n\n…</span></code></pre>\n<p>Votre application affiche dorénavant un spinner quelques secondes avant de rendre le fameux \"Welcome to PutainDeBiere!\" le temps que la requête à la punkAPI se fasse. Continuons de customiser ce render afin d'afficher les informations retournées (et maintenant présentes dans le state de notre app).</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  …\n\n  render() {\n    <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-keyword\">this</span>.state.isLoading\n      ? <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ActivityIndicator</span> /></span> // si requête en cours, on affiche un spinner\n      : </span>&#x3C;View style={styles.infosContainer}>\n          &#x3C;Text style={styles.name}>\n            {this.state.name} // sinon on affiche le nom de la bière\n          &#x3C;/Text>\n\n          &#x3C;Text style={styles.description}>\n            {this.state.description} // sa description\n          &#x3C;/Text>\n\n          &#x3C;TouchableOpacity // on ajoute un \"bouton\" qui requête une autre bière aléatoire\n            onPress={this._getRandomBrewdogWithFeedback}\n            style={styles.button}\n          >\n            &#x3C;Text>Grab a new beer!&#x3C;/Text>\n          &#x3C;/TouchableOpacity>\n        &#x3C;/View><span class=\"xml\">\n\n    return (\n      </span>&#x3C;View style={styles.container}>\n        {content}\n      &#x3C;/View><span class=\"xml\">\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  // ajout de styles divers\n  infosContainer: {\n    margin: 30,\n  },\n  name: {\n    fontSize: 18,\n    fontWeight: '700',\n    marginBottom: 10,\n  },\n  description: {\n    marginBottom: 10,\n  },\n  button: {\n    borderWidth: 1,\n    borderColor: '#000',\n    borderRadius: 3,\n    padding: 5,\n    justifyContent: 'center',\n    alignItems: 'center',\n  }\n})</span></code></pre>\n<figure>\n  <img src=\"final_result.png\" alt=\"devmenu + chrome devtools\" />\n  <figcaption>Le rendu \"final\"</figcaption>\n</figure>\n<h2 id=\"et-maintenant-\"><a href=\"#et-maintenant-\" class=\"phenomic-HeadingAnchor\">#</a>Et maintenant ?</h2>\n<p>Si vous connaissez déjà React, vous pouvez:</p>\n<ul>\n<li>améliorer le code de l'app avec l'ajout de redux (par exemple) afin de supprimer le state de notre composant</li>\n<li>créer un composant stateless \"&#x3C;Button>\"</li>\n<li>styliser davantage l'app à l'aide d'<a href=\"https://facebook.github.io/react-native/docs/image.html\">images</a> ou d'<a href=\"https://facebook.github.io/react-native/docs/animations.html\">animations</a></li>\n<li>désactiver et modifier le style du bouton lors d'une requête API</li>\n<li>gérer les erreurs de requêtage de façon un poil plus élégante que de balancer une erreur à la tête de l'utilisateur</li>\n</ul>\n<p>Si ce n'est pas le cas, n'hésitez pas à lire ces deux articles pour vous familiariser avec ces librairies avant de continuer sur votre lancée:</p>\n<ul>\n<li><a href=\"/fr/articles/js/react/\">Introduction à ReactJS</a></li>\n<li><a href=\"/fr/articles/js/redux/\">Redux, comment ça marche ?</a></li>\n</ul>\n<p>Bonne découverte !</p>\n","rawBody":"\nCela fait déjà plus d'un an que Facebook a publié la première version de React Native.\nLongtemps considéré comme une expérimentation sympathique (après tout, il est né lors d'un hackathon), un cycle de release soutenu d'une version majeure toutes les 2 semaines a fait qu'aujourd'hui l'écosystème est suffisamment riche et stable pour déployer une app iOS et Android en production.\n\n## Quels problèmes avec les solutions hybrides ?\n\nDes solutions pour développer une application mobile multiplateforme en JS existent déjà : je pense notamment à [Cordova](https://cordova.apache.org/) ou à son superset [Ionic](http://ionicframework.com/). Conçu autour d'une webview système (un navigateur embedded - Safari sur iOS, Chrome sur Android) affichée en plein écran, vous utilisez des technologies web classiques : HTML, CSS et JS. Il est possible d'installer des plugins afin d'enrichir le moteur JavaScript avec de nouvelles APIs en plus des APIs navigateur.\nAinsi, `cordova-plugin-contacts` permet d'accéder au carnet d'adresses du smartphone, `cordova-plugin-vibration` permet de faire vibrer celui-ci, etc.\n\nLe problème, c'est que si l'utilisation de plugins permet de faire le pont avec le code natif (un message est envoyé de la partie JS à la partie Objective-C / Java, qui l'exécute de son côté et renvoie le résultat au JS), l'UI de l'application n'utilise elle pas du tout le layout natif des OS mobiles. Les performances et le look'n'feel de celle-ci seront donc équivalente à une app web, et non une app mobile.\n\nAvec React Native, point de navigateur embedded, de HTML ou de CSS : vous devez composer vos interfaces à l'aide de composants React qui font appel au layout natif de la plateforme. Un exemple simple : `<View>` (qui est l'équivalent d'une `<div>` HTML) communique via un pont JS <-> Objective-C / Java pour contrôler une UIView (sur iOS) ou une android.view. Les performances de l'UI sont donc quasi similaires aux performances natives.\n\n## Découverte de l'environnement de dev\n\nFatigués par JavaScript et son tooling un peu trop fourni ? Rassurez-vous : vous n'avez strictement rien à configurer pour commencer à utiliser React Native. Vous disposez out-of-the-box d'un packager Babel et d'un [preset custom](https://github.com/facebook/react-native/tree/master/babel-preset) qui intègre les fonctionnalités de ES2015, mais également le support de React / JSX (encore heureux), de [Flow](https://flowtype.org/) et d'autres helpers bienvenus tels que `async / await`.\n\nEn bons passionnés de bière, nous allons réaliser ensemble une app qui requête la [PunkAPI](https://punkapi.com/) (faites la demande d'une clé API via le formulaire prévu à cet effet).\n\nJe vous renvoie à la [documentation officielle](https://facebook.github.io/react-native/docs/getting-started.html) pour ce qui est de l'installation des dépendances (celles-ci variant selon votre OS et l'OS cible).\nXcode / Android Studio, node et watchman étant installés, ouvrez un terminal et initiez le projet :\n```\nnpm install -g react-native-cli\nreact-native init PutainDeBiere\n```\n\nUne fois le projet initialisé, le CLI vous informe de la façon dont lancer votre application : faites-le dans la foulée. En ce qui me concerne, je développe pour iOS.\n\n```bash\nreact-native run-ios\n```\n\nSelon votre plateforme cible, ouvrez `index.ios.js` ou `index.android.js` dans votre éditeur préféré. Modifiez quelque peu le texte et rafraichissez votre app via `Command⌘ + R`, deux pressions sur la touche `R` (émulateur Android).\n\n```javascript\n/* @flow */\n\nimport React, { Component } from 'react'\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View\n} from 'react-native'\n\nclass App extends Component {\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.welcome}>\n          Welcome to PutainDeBiere!\n        </Text>\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  welcome: {\n    fontSize: 20,\n    textAlign: 'center',\n    margin: 10,\n  },\n})\n\nAppRegistry.registerComponent('PutainDeBiere', () => App)\n```\n\n<figure>\n  <img src=\"welcome.png\" alt=\"welcome PutainDeBiere preview\" />\n  <figcaption>Une bien jolie première étape</figcaption>\n</figure>\n\n## Récupération des données\n\nAfin de requêter notre API, React Native nous offre plusieurs plusieurs solutions: `fetch()` ou `XMLHttpRequest`. Tenez vous en **uniquement** à l'utilisation de la première, la deuxième n'étant présente que pour assurer une compatibilité avec des librairies tierces.\n\n*/!\\ Notre clé API doit être encodée en base64. La function `btoa()` n'étant pas disponible en React Native, il est nécessaire d'installer une dépendance.*\n\n```bash\nnpm install --save base-64\n```\n\nHistoire de séparer notre logique API de nos composants React, nous allons créer un fichier nommé `punkapi.js` à la racine de notre projet.\n\n```javascript\nimport base64 from 'base-64' // importez la dépendance tout juste installée\n\nconst rootEndpoint = 'https://punkapi.com/api/v1'\n// pour simplifier la compréhension de ce tuto, nous renseignons la clé API \"en dur\"\n// ne faites jamais cela au sein de vos projets (voir http://12factor.net/fr/config)\nconst punkApiKey = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\nconst password = '' // la punk API n'utilise aucun mot de passe\nconst authBase64 = base64.encode(`${punkApiKey}:${password}`)\n\nconst headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Authorization': `Basic ${authBase64}` // HTTP basic auth\n}\n\n// retourne une recette de bière au hasard\nexport const getRandomBrewdog = () =>\n  fetch(`${rootEndpoint}/beers/random`, { headers })\n    .then(({status, json}) => {\n      if (status !== 200) throw new Error(`API answered with status code ${status}`) // gestion du status code HTTP\n      else return json() // on parse la réponse en JSON\n    })\n```\n\nNous allons maintenant modifier notre composant `<App>` afin de faire une requête simple d'une bière au hasard juste avant le montage de celui-ci.\n\n```javascript\nimport { getRandomBrewdog } from './punkapi'\n\nclass App extends Component {\n  componentWillMount() {\n    getRandomBrewdog() // fetch() retourne une Promise\n      .then(json => console.log(json))\n      .catch(error => console.error(error))\n  }\n\n  …\n}\n```\n\nVous apercevez la présence d'un appel à `console.log()`. Pour y accéder, rien de plus simple: pressez `Command⌘ + D` au sein de l'émulateur iOS, ou appuyez sur le bouton `Menu` de l'émulateur Android. Celui-ci contient de multiples choses avec lesquelles je vous laisserai expérimenter par la suite; ce qui nous intéresse ici c'est le bouton `Debug JS Remotely`, qui va ouvrir un nouvel onglet dans Chrome où sera exécuté notre code JS.\n\nIl devient donc possible d'ouvrir les Chrome Devtools (dont la console) afin de débuguer notre app.\n\n<figure>\n  <img src=\"devmenu.png\" alt=\"devmenu + chrome devtools\" />\n  <figcaption>Jusqu'ici tout va bien</figcaption>\n</figure>\n\n## Présentation des données\n\nAfin d'afficher les informations que nous venons de récupérer, nous allons avoir besoin de plusieurs éléments (heureusement fournis), à savoir de quoi encapsuler d'autres composants (une `<View>` ~= une `<div>` HTML), de quoi rendre du texte (`<Text>` ~= `<span>`), un bouton (nous allons utiliser `<TouchableOpacity>`, une zone dont l'opacité est modifiée lors d'un `onTouch`) et enfin d'un spinner pour indiquer qu'une requête est en cours (`<ActivityIndicator>`).\n\nNous allons également rendre notre unique composant stateful afin de stocker quelques informations retournées par l'API.\n\n```javascript\nimport React, { Component } from 'react'\nimport {\n  AppRegistry,\n  StyleSheet,\n  ActivityIndicator, // import des composants\n  TouchableOpacity,\n  Text,\n  View,\n} from 'react-native'\n\nimport { getRandomBrewdog } from './punkapi'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // la state de notre composant est utilisé pour\n    // stocker quelques infos renvoyées par l'API\n    this.state = {\n      name: '', // nom de la bière\n      description: '', // sa description\n      isLoading: false // la requête API est-elle en cours ?\n    }\n  }\n\n  // nous externalisons cette fonction afin de\n  // pouvoir l'appeler lorsqu'on le souhaite\n  _getRandomBrewdogWithFeedback = () => {\n    this.setState({ isLoading: true })\n\n    getRandomBrewdog()\n      .then(json => this.setState({\n        name: json.name,\n        description: json.description,\n        isLoading: false // la requête est terminée\n      }))\n      .catch(error => console.error(error))\n  }\n\n  componentWillMount() {\n    this._getRandomBrewdogWithFeedback()\n  }\n\n  render() {\n    const content = this.state.isLoading\n      ? <ActivityIndicator /> // si requête en cours, on affiche un spinner\n      : <Text style={styles.welcome}>\n          Welcome to PutainDeBiere!\n        </Text>\n\n    return (\n      <View style={styles.container}>\n        {content}\n      </View>\n    )\n  }\n}\n\n…\n```\n\nVotre application affiche dorénavant un spinner quelques secondes avant de rendre le fameux \"Welcome to PutainDeBiere!\" le temps que la requête à la punkAPI se fasse. Continuons de customiser ce render afin d'afficher les informations retournées (et maintenant présentes dans le state de notre app).\n\n```javascript\nclass App extends Component {\n  …\n\n  render() {\n    const content = this.state.isLoading\n      ? <ActivityIndicator /> // si requête en cours, on affiche un spinner\n      : <View style={styles.infosContainer}>\n          <Text style={styles.name}>\n            {this.state.name} // sinon on affiche le nom de la bière\n          </Text>\n\n          <Text style={styles.description}>\n            {this.state.description} // sa description\n          </Text>\n\n          <TouchableOpacity // on ajoute un \"bouton\" qui requête une autre bière aléatoire\n            onPress={this._getRandomBrewdogWithFeedback}\n            style={styles.button}\n          >\n            <Text>Grab a new beer!</Text>\n          </TouchableOpacity>\n        </View>\n\n    return (\n      <View style={styles.container}>\n        {content}\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  // ajout de styles divers\n  infosContainer: {\n    margin: 30,\n  },\n  name: {\n    fontSize: 18,\n    fontWeight: '700',\n    marginBottom: 10,\n  },\n  description: {\n    marginBottom: 10,\n  },\n  button: {\n    borderWidth: 1,\n    borderColor: '#000',\n    borderRadius: 3,\n    padding: 5,\n    justifyContent: 'center',\n    alignItems: 'center',\n  }\n})\n```\n\n<figure>\n  <img src=\"final_result.png\" alt=\"devmenu + chrome devtools\" />\n  <figcaption>Le rendu \"final\"</figcaption>\n</figure>\n\n## Et maintenant ?\n\nSi vous connaissez déjà React, vous pouvez:\n- améliorer le code de l'app avec l'ajout de redux (par exemple) afin de supprimer le state de notre composant\n- créer un composant stateless \"\\<Button\\>\"\n- styliser davantage l'app à l'aide d'[images](https://facebook.github.io/react-native/docs/image.html) ou d'[animations](https://facebook.github.io/react-native/docs/animations.html)\n- désactiver et modifier le style du bouton lors d'une requête API\n- gérer les erreurs de requêtage de façon un poil plus élégante que de balancer une erreur à la tête de l'utilisateur\n\nSi ce n'est pas le cas, n'hésitez pas à lire ces deux articles pour vous familiariser avec ces librairies avant de continuer sur votre lancée:\n- [Introduction à ReactJS](/fr/articles/js/react/)\n- [Redux, comment ça marche ?](/fr/articles/js/redux/)\n\nBonne découverte !\n","__filename":"fr/articles/js/react/native/introduction/index.md","__url":"/fr/articles/js/react/native/introduction/","__resourceUrl":"/fr/articles/js/react/native/introduction/index.html","__dataUrl":"/fr/articles/js/react/native/introduction/index.html.2c3c49cc07524e0deb674eda2d61b8da.json"}