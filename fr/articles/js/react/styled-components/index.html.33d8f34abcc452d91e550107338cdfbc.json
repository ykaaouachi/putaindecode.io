{"head":{"layout":"Post","comments":true,"date":"2017-02-01","title":"Introduction √† styled-components","tags":["javascript","react","css"],"authors":["revolunet"],"description":"Il existe de nombreuses approches et solutions diff√©rentes pour g√©rer le CSS en ReactJS, je vais parler ici de styled-components qui permet‚Ä¶"},"body":"<p>Il existe de nombreuses approches et <a href=\"https://github.com/MicheleBertoli/css-in-js\">solutions diff√©rentes</a> pour g√©rer le CSS en ReactJS, je vais parler ici de <a href=\"https://github.com/styled-components/styled-components\">styled-components</a> qui permet de gagner en productivit√© et en qualit√© quand on veut cr√©er et distribuer des composants UI.</p>\n<p>La force de <a href=\"https://github.com/styled-components/styled-components\">styled-components</a> c'est de faciliter la cr√©ation de composants visuels ReactJS minimalistes et configurables, en combinant du <strong>CSS standard</strong> et <strong>un zeste de JavaScript</strong>. Ces composants deviendront litt√©ralement les pi√®ces de lego qui pourront √™tre utilis√©es et partag√©es entre les UIs de toutes vos applications, sites webs...</p>\n<p>Si vous voulez jouer avec, je vous conseille d'utiliser <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a> pour g√©n√©rer un projet vierge puis d'ajouter styled-components au projet : <code>npm i --save styled-components</code>.</p>\n<p>Avec styled, on peut abstraire le CSS et le DOM de la vue, ce qui va grandement simplifier le code de la partie \"m√©tier\" de l'application, et am√©liorer la lisibilit√©.</p>\n<h5 id=\"avant-\"><a href=\"#avant-\" class=\"phenomic-HeadingAnchor\">#</a>Avant :</h5>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// solution en pure CSS-in-JS</span>\n\n<span class=\"hljs-keyword\">const</span> styles = {\n  <span class=\"hljs-attr\">box</span>: {\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">'60%'</span>,\n    <span class=\"hljs-attr\">border</span>: <span class=\"hljs-string\">'1px solid silver'</span>\n  },\n  <span class=\"hljs-attr\">title</span>: {\n    <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">'1.2em'</span>,\n    <span class=\"hljs-attr\">fontWeight</span>: <span class=\"hljs-string\">'bold'</span>\n  },\n  <span class=\"hljs-attr\">description</span>: {\n    <span class=\"hljs-attr\">fontSize</span>: <span class=\"hljs-string\">'0.8em'</span>\n  },\n  <span class=\"hljs-attr\">important</span>: {\n    <span class=\"hljs-attr\">fontWeight</span>: <span class=\"hljs-string\">'bold'</span>\n  }\n}\n\n<span class=\"hljs-comment\">// nos composants int√®grent les styles dans le code</span>\n&#x3C;div className={ styles.box }>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">styles.title</span> }></span>{ title }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  &#x3C;div className={ classnames(styles.description, styled.important) }>{ description }&#x3C;<span class=\"hljs-regexp\">/div>\n&#x3C;/</span>div></code></pre>\n<h5 id=\"apr√®s-\"><a href=\"#apr%C3%A8s-\" class=\"phenomic-HeadingAnchor\">#</a>Apr√®s :</h5>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">// avec styled-components</span>\n\n<span class=\"hljs-keyword\">const</span> Box = styled.div<span class=\"hljs-string\">`\n  width: 60%;\n  border: 1px solid silver;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> Title = styled.div<span class=\"hljs-string\">`\n  font-size: 1.2em;\n  font-weight: bold;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> Description = styled.div<span class=\"hljs-string\">`\n  font-size: 0.8em;\n  font-weight: <span class=\"hljs-subst\">${ props => props.important ? <span class=\"hljs-string\">'bold'</span> : <span class=\"hljs-string\">'normal '</span>}</span>\n`</span>\n\n<span class=\"hljs-comment\">// les composants sont pr√©-styl√©s, pas de bruit g√©n√©r√© par le styling</span>\n&#x3C;Box>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Title</span>></span>{ title }<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Title</span>></span></span>\n  &#x3C;Description important>{ description }&#x3C;<span class=\"hljs-regexp\">/Description>\n&#x3C;/</span>Box></code></pre>\n<h3 id=\"avantages-\"><a href=\"#avantages-\" class=\"phenomic-HeadingAnchor\">#</a>Avantages :</h3>\n<ul>\n<li><a href=\"https://github.com/styled-components/styled-components/graphs/contributors\">community powered</a> - moving fast, <a href=\"https://github.com/styled-components/styled-components/tree/v2\">v2 en cours</a></li>\n<li>support des <a href=\"https://github.com/styled-components/styled-components/blob/master/docs/theming.md\">th√®mes</a></li>\n<li><a href=\"https://github.com/styled-components/styled-components/blob/master/docs/css-we-support.md\">syntaxe CSS \"classique\"</a> mais scop√© automatiquement</li>\n<li>Gestion des media queries, pseudo-selectors, nesting</li>\n<li>Un <a href=\"https://github.com/rofrischmann/inline-style-prefixer/\">autoprefixer-like int√©gr√©</a></li>\n<li>Code \"m√©tier\" plus lisible</li>\n<li>Compatible react-native</li>\n<li>Compatible avec les <a href=\"https://facebook.github.io/jest/\">snapshots Jest</a> out of the box</li>\n<li>Ne n√©cessite pas de loader Webpack sp√©cifique ‚ù§Ô∏è</li>\n</ul>\n<h3 id=\"inconv√©nients-\"><a href=\"#inconv%C3%A9nients-\" class=\"phenomic-HeadingAnchor\">#</a>Inconv√©nients :</h3>\n<ul>\n<li>pas encore id√©al pour¬†<a href=\"https://github.com/styled-components/styled-components/issues/134\">des styles tr√®s dynamiques</a></li>\n<li>pas encore id√©al pour¬†<a href=\"https://github.com/styled-components/styled-components/issues/124\">le server-side</a></li>\n<li>syntaxe pas forcement bien <a href=\"https://github.com/styled-components/styled-components#linting\">surlign√©e ou lint√©e</a> mais <a href=\"https://github.com/styled-components/styled-components#syntax-highlighting\">des plugins existent</a>.</li>\n</ul>\n<h3 id=\"fonctionnement\"><a href=\"#fonctionnement\" class=\"phenomic-HeadingAnchor\">#</a>Fonctionnement</h3>\n<p>Techniquement, <a href=\"https://github.com/styled-components/styled-components\">styled-components</a> va pour chaque composant \"styled\" pr√©sent dans le DOM :</p>\n<ul>\n<li>injecter les classes CSS n√©cessaires pour ce composant dans le <code>&#x3C;head></code> de la page, au runtime.</li>\n<li>fournir au composant une props <code>className</code> unique (ainsi que ses <code>ownProps</code>)</li>\n</ul>\n<p>La syntaxe est certes exotique, le CSS √©tant d√©fini dans un template-string ES2015, mais ceci rend le code tr√®s concis.</p>\n<p>Pour en savoir plus sur les \"Template Strings\", ou \"Litt√©raux de gabarits\" en Fran√ßais üá´üá∑ vous pouvez lire <a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits\">l'excellente doc chez MDN</a>.</p>\n<h3 id=\"usage-\"><a href=\"#usage-\" class=\"phenomic-HeadingAnchor\">#</a>Usage :</h3>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> styled <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'styled-components'</span>\n\n<span class=\"hljs-comment\">// exemple ici avec une div</span>\n<span class=\"hljs-keyword\">const</span> Title = styled.div<span class=\"hljs-string\">`\n  font-size: 3rem;\n  color: #ff3333;\n`</span>\n\n<span class=\"hljs-comment\">// utilisable comme ceci :</span>\n&#x3C;Title>Hello, World&#x3C;<span class=\"hljs-regexp\">/Title></span></code></pre>\n<p>ceci qui g√©n√®rera automatiquement dans le DOM:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"dxhUOh\"</span>></span>Hello, World<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></code></pre>\n<p>et injectera dans le CSS de la page le style associ√© :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.dxhUOh</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">3rem</span>;\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ff3333</span>;\n}</code></pre>\n<p><img src=\"./styled-1.png\" width=\"200\"/></p>\n<h2 id=\"exemples\"><a href=\"#exemples\" class=\"phenomic-HeadingAnchor\">#</a>Exemples</h2>\n<h3 id=\"composition\"><a href=\"#composition\" class=\"phenomic-HeadingAnchor\">#</a>Composition</h3>\n<p>Les composants styled sont des composants ReactJS standards qui peuvent recevoir des <code>children</code> et se composer les uns avec les autres.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Box = styled.div<span class=\"hljs-string\">`\n  border: 1px solid silver;\n  width: 80%;\n  padding: 1em;\n  text-align: center;\n  background: #e7f3ff;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> Title = styled.div<span class=\"hljs-string\">`\n  font-size: 1.5em;\n  color: #0080ff;\n`</span>\n\n&#x3C;Box>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Title</span>></span>Hello, World<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Title</span>></span></span>\n&#x3C;<span class=\"hljs-regexp\">/Box></span></code></pre>\n<p><img src=\"./styled-2.png\" width=\"300\"/></p>\n<h3 id=\"etendre-des-composants-en-css\"><a href=\"#etendre-des-composants-en-css\" class=\"phenomic-HeadingAnchor\">#</a>Etendre des composants en CSS</h3>\n<p>Surcharger un composant avec du CSS :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Title = styled.div<span class=\"hljs-string\">`\n  font-size: 3rem;\n  color: #ff3333;\n`</span>\n<span class=\"hljs-keyword\">const</span> BlueTitle = styled(Title)<span class=\"hljs-string\">`\n  color: #0080ff;\n`</span>\n&#x3C;Title>titre en rouge&#x3C;<span class=\"hljs-regexp\">/Title>\n&#x3C;BlueTitle>titre en bleu&#x3C;/</span>BlueTitle></code></pre>\n<p><img src=\"./styled-3.png\" width=\"200\"/></p>\n<h3 id=\"pseudo-classes\"><a href=\"#pseudo-classes\" class=\"phenomic-HeadingAnchor\">#</a>Pseudo classes</h3>\n<p>Les pseudo-classes, le nesting sont accept√©es</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Button = styled.button<span class=\"hljs-string\">`\n  font-size: 3rem;\n  color: #ff3333;\n  &#x26;:hover {\n    color: #0080ff;\n  }\n`</span></code></pre>\n<p><img src=\"./styled-hover.gif\" width=\"100\"/></p>\n<h3 id=\"media-queries\"><a href=\"#media-queries\" class=\"phenomic-HeadingAnchor\">#</a>Media queries</h3>\n<p>Les medias queries sont possibles facilement :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Cover = styled.div<span class=\"hljs-string\">`\n  background-image: url(http://putaindecode.io/assets/npm.png);\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: center center;\n  width: 800px;\n  height:300px;\n\n  @media (max-width: 800px) {\n    width: 400px;\n  }\n`</span></code></pre>\n<p>Usage avanc√© des media queries : <a href=\"https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates\">https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates</a></p>\n<h3 id=\"composants-configurables\"><a href=\"#composants-configurables\" class=\"phenomic-HeadingAnchor\">#</a>Composants configurables</h3>\n<p>Mieux : comme le composant √† directement acc√®s aux <code>props</code> (attributs du composant), on peut le configurer depuis le JavaScript :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Title = styled.div<span class=\"hljs-string\">`\n  font-size: 3rem;\n  color: <span class=\"hljs-subst\">${props => props.blue ? <span class=\"hljs-string\">'#0080ff'</span> : <span class=\"hljs-string\">'#ff3333'</span>}</span>;\n`</span>\n&#x3C;Title>titre en rouge&#x3C;<span class=\"hljs-regexp\">/Title>\n&#x3C;Title blue>titre en bleu&#x3C;/</span>Title></code></pre>\n<p><img src=\"./styled-3.png\" width=\"200\"/></p>\n<h3 id=\"dans-un-composant-react-classique\"><a href=\"#dans-un-composant-react-classique\" class=\"phenomic-HeadingAnchor\">#</a>Dans un composant React \"classique\"</h3>\n<p>Avec la methode <code>styled.css</code>, une <code>className</code> unique est g√©n√©r√©e et peut √™tre utilis√©e pour vos composants :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> Notification <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./Notification'</span>\n\n<span class=\"hljs-keyword\">const</span> warning = styled.css<span class=\"hljs-string\">`\n  color: #ff3333;\n`</span>\n\n<span class=\"hljs-keyword\">const</span> WarningNotification = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> &#x3C;Notification className={ warning } /></code></pre>\n<h3 id=\"r√©utiliser-des-styles\"><a href=\"#r%C3%A9utiliser-des-styles\" class=\"phenomic-HeadingAnchor\">#</a>R√©utiliser des styles</h3>\n<p>Comme styled utilise des <a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits\">templates literals</a> vous pouvez utiliser n'importe quelle variable dans votre CSS :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> textStyle = <span class=\"hljs-string\">`\n  font-size: 2em;\n  letter-spacing: 5px;\n`</span>\n<span class=\"hljs-keyword\">const</span> TextRed = styled.div<span class=\"hljs-string\">`\n  <span class=\"hljs-subst\">${textStyle}</span>\n  color: #ff3333;\n`</span>\n<span class=\"hljs-keyword\">const</span> TextBlue = styled.div<span class=\"hljs-string\">`\n  <span class=\"hljs-subst\">${textStyle}</span>\n  color: #0080ff;\n`</span>\n&#x3C;TextRed>texte en rouge&#x3C;<span class=\"hljs-regexp\">/TextRed>\n&#x3C;TextBlue>texte en bleu&#x3C;/</span>TextBlue></code></pre>\n<p><img src=\"./styled-4.png\" width=\"200\"/></p>\n<h3 id=\"attributs-html\"><a href=\"#attributs-html\" class=\"phenomic-HeadingAnchor\">#</a>Attributs HTML</h3>\n<p>Par d√©faut les composants styled passent toutes leur <code>props</code> au DOM, par exemple ici, <code>placeholder</code>.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> SuperInput = styled.input<span class=\"hljs-string\">`\n  border: 2px solid silver;\n  border-radius: 2px;\n  text-align: center;\n  font-size: 1.5em;\n`</span>\n\n&#x3C;SuperInput placeholder=<span class=\"hljs-string\">\"Your name\"</span>/></code></pre>\n<p><img src=\"./styled-5.png\" width=\"200\"/></p>\n<h3 id=\"utiliser-le-theming\"><a href=\"#utiliser-le-theming\" class=\"phenomic-HeadingAnchor\">#</a>Utiliser le theming</h3>\n<p>Pour rendre son UI themable, il suffit d'encapsuler son App dans un composant <code>ThemeProvider</code>; Chaque composant styled se verra alors fournir une props <code>theme</code> avec toutes les variables du th√®me :</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> Button = styled.button<span class=\"hljs-string\">`\n  background: <span class=\"hljs-subst\">${props => props.theme.main || <span class=\"hljs-string\">'silver'</span>}</span>;\n`</span>\n\n<span class=\"hljs-comment\">// Create a green theme</span>\n<span class=\"hljs-keyword\">const</span> greenTheme = {\n  <span class=\"hljs-attr\">main</span>: <span class=\"hljs-string\">'mediumseagreen'</span>,\n}\n\n<span class=\"hljs-comment\">// Create a blue theme</span>\n<span class=\"hljs-keyword\">const</span> blueTheme = {\n  <span class=\"hljs-attr\">main</span>: <span class=\"hljs-string\">'#0080ff'</span>,\n}\n\n&#x3C;ThemeProvider theme={greenTheme}>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Button</span>></span>I'm green!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Button</span>></span></span>\n&#x3C;<span class=\"hljs-regexp\">/ThemeProvider></span></code></pre>\n<p>Et pour aller loin, consultez la <a href=\"https://github.com/styled-components/styled-components/blob/master/docs/theming.md#using-theming\">documentation officielle</a></p>\n<h3 id=\"injecter-des-css-globaux\"><a href=\"#injecter-des-css-globaux\" class=\"phenomic-HeadingAnchor\">#</a>Injecter des CSS globaux</h3>\n<p>Parfois on a besoin d'int√©grer aussi du CSS \"global\". Par exemple pour les fontes, ou lorsque l'on migre une grosse application.</p>\n<p>Voici une fa√ßon de le faire avec styled :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { injectGlobal } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'styled-components'</span>\n\ninjectGlobal<span class=\"hljs-string\">`\n  @import url('https://fonts.googleapis.com/css?family=Roboto');\n  * {\n    font-family: 'Roboto', sans-serif;\n  }\n`</span></code></pre>\n<p>Plus d'infos sur <a href=\"https://github.com/styled-components/styled-components/blob/master/docs/api.md#injectglobal\">la doc d'injectGlobal</a></p>\n<h3 id=\"react-storybook\"><a href=\"#react-storybook\" class=\"phenomic-HeadingAnchor\">#</a>React Storybook</h3>\n<p>En ajoutant <a href=\"https://github.com/storybooks/react-storybook\">react-storybook</a> dans votre projet, vous pourrez facilement vous constituter une biblioth√®que visuelle avec vos propres composants, hors-contexte, dans tous leurs √©tats possibles, et avec du Hot-Reload ce qui est <strong>tr√®s tr√®s pratique dans la phase de conception</strong>.</p>\n<h3 id=\"autres-liens-\"><a href=\"#autres-liens-\" class=\"phenomic-HeadingAnchor\">#</a>Autres liens :</h3>\n<ul>\n<li><a href=\"https://github.com/styled-components/styled-components/blob/master/docs\">Documentation officielle</a></li>\n<li><a href=\"https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/\">Enforcing Best Practices In Component-Based Systems</a></li>\n<li><a href=\"http://mxstbr.blog/2016/11/styled-components-magic-explained/\">The magic behind üíÖ styled-components</a></li>\n<li><a href=\"https://github.com/MicheleBertoli/css-in-js\">React CSS-in-JS techniques comparison</a></li>\n</ul>\n","rawBody":"\nIl existe de nombreuses approches et [solutions diff√©rentes](https://github.com/MicheleBertoli/css-in-js) pour g√©rer le CSS en ReactJS, je vais parler ici de [styled-components](https://github.com/styled-components/styled-components) qui permet de gagner en productivit√© et en qualit√© quand on veut cr√©er et distribuer des composants UI.\n\nLa force de [styled-components](https://github.com/styled-components/styled-components) c'est de faciliter la cr√©ation de composants visuels ReactJS minimalistes et configurables, en combinant du **CSS standard** et **un zeste de JavaScript**. Ces composants deviendront litt√©ralement les pi√®ces de lego qui pourront √™tre utilis√©es et partag√©es entre les UIs de toutes vos applications, sites webs...\n\nSi vous voulez jouer avec, je vous conseille d'utiliser [create-react-app](https://github.com/facebookincubator/create-react-app) pour g√©n√©rer un projet vierge puis d'ajouter styled-components au projet : `npm i --save styled-components`.\n\nAvec styled, on peut abstraire le CSS et le DOM de la vue, ce qui va grandement simplifier le code de la partie \"m√©tier\" de l'application, et am√©liorer la lisibilit√©.\n\n##### Avant :\n\n```jsx\n// solution en pure CSS-in-JS\n\nconst styles = {\n  box: {\n    width: '60%',\n    border: '1px solid silver'\n  },\n  title: {\n    fontSize: '1.2em',\n    fontWeight: 'bold'\n  },\n  description: {\n    fontSize: '0.8em'\n  },\n  important: {\n    fontWeight: 'bold'\n  }\n}\n\n// nos composants int√®grent les styles dans le code\n<div className={ styles.box }>\n  <div className={ styles.title }>{ title }</div>\n  <div className={ classnames(styles.description, styled.important) }>{ description }</div>\n</div>\n```\n\n##### Apr√®s :\n\n```jsx\n// avec styled-components\n\nconst Box = styled.div`\n  width: 60%;\n  border: 1px solid silver;\n`\n\nconst Title = styled.div`\n  font-size: 1.2em;\n  font-weight: bold;\n`\n\nconst Description = styled.div`\n  font-size: 0.8em;\n  font-weight: ${ props => props.important ? 'bold' : 'normal '}\n`\n\n// les composants sont pr√©-styl√©s, pas de bruit g√©n√©r√© par le styling\n<Box>\n  <Title>{ title }</Title>\n  <Description important>{ description }</Description>\n</Box>\n```\n\n### Avantages :\n - [community powered](https://github.com/styled-components/styled-components/graphs/contributors) - moving fast, [v2 en cours](https://github.com/styled-components/styled-components/tree/v2)\n - support des [th√®mes](https://github.com/styled-components/styled-components/blob/master/docs/theming.md)\n - [syntaxe CSS \"classique\"](https://github.com/styled-components/styled-components/blob/master/docs/css-we-support.md) mais scop√© automatiquement\n - Gestion des media queries, pseudo-selectors, nesting\n - Un [autoprefixer-like int√©gr√©](https://github.com/rofrischmann/inline-style-prefixer/)\n - Code \"m√©tier\" plus lisible\n - Compatible react-native\n - Compatible avec les [snapshots Jest](https://facebook.github.io/jest/) out of the box\n - Ne n√©cessite pas de loader Webpack sp√©cifique ‚ù§Ô∏è\n\n### Inconv√©nients :\n - pas encore id√©al pour¬†[des styles tr√®s dynamiques](https://github.com/styled-components/styled-components/issues/134)\n - pas encore id√©al pour¬†[le server-side](https://github.com/styled-components/styled-components/issues/124)\n - syntaxe pas forcement bien [surlign√©e ou lint√©e](https://github.com/styled-components/styled-components#linting) mais [des plugins existent](https://github.com/styled-components/styled-components#syntax-highlighting).\n\n\n### Fonctionnement\n\nTechniquement, [styled-components](https://github.com/styled-components/styled-components) va pour chaque composant \"styled\" pr√©sent dans le DOM :\n\n - injecter les classes CSS n√©cessaires pour ce composant dans le `<head>` de la page, au runtime.\n - fournir au composant une props `className` unique (ainsi que ses `ownProps`)\n\nLa syntaxe est certes exotique, le CSS √©tant d√©fini dans un template-string ES2015, mais ceci rend le code tr√®s concis.\n\nPour en savoir plus sur les \"Template Strings\", ou \"Litt√©raux de gabarits\" en Fran√ßais üá´üá∑ vous pouvez lire [l'excellente doc chez MDN](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits).\n\n### Usage :\n\n```jsx\nimport styled from 'styled-components'\n\n// exemple ici avec une div\nconst Title = styled.div`\n  font-size: 3rem;\n  color: #ff3333;\n`\n\n// utilisable comme ceci :\n<Title>Hello, World</Title>\n```\n\nceci qui g√©n√®rera automatiquement dans le DOM:\n\n```html\n<div class=\"dxhUOh\">Hello, World</div>\n```\n\net injectera dans le CSS de la page le style associ√© :\n\n```css\n.dxhUOh {\n  font-size: 3rem;\n  color: #ff3333;\n}\n```\n\n<img src=\"./styled-1.png\" width=\"200\"/>\n\n## Exemples\n\n### Composition\n\nLes composants styled sont des composants ReactJS standards qui peuvent recevoir des `children` et se composer les uns avec les autres.\n\n```jsx\nconst Box = styled.div`\n  border: 1px solid silver;\n  width: 80%;\n  padding: 1em;\n  text-align: center;\n  background: #e7f3ff;\n`\n\nconst Title = styled.div`\n  font-size: 1.5em;\n  color: #0080ff;\n`\n\n<Box>\n  <Title>Hello, World</Title>\n</Box>\n```\n\n\n<img src=\"./styled-2.png\" width=\"300\"/>\n\n\n### Etendre des composants en CSS\n\nSurcharger un composant avec du CSS :\n\n```jsx\nconst Title = styled.div`\n  font-size: 3rem;\n  color: #ff3333;\n`\nconst BlueTitle = styled(Title)`\n  color: #0080ff;\n`\n<Title>titre en rouge</Title>\n<BlueTitle>titre en bleu</BlueTitle>\n```\n\n<img src=\"./styled-3.png\" width=\"200\"/>\n\n### Pseudo classes\n\nLes pseudo-classes, le nesting sont accept√©es\n\n```jsx\nconst Button = styled.button`\n  font-size: 3rem;\n  color: #ff3333;\n  &:hover {\n    color: #0080ff;\n  }\n`\n```\n\n<img src=\"./styled-hover.gif\" width=\"100\"/>\n\n### Media queries\n\nLes medias queries sont possibles facilement :\n\n```jsx\nconst Cover = styled.div`\n  background-image: url(http://putaindecode.io/assets/npm.png);\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: center center;\n  width: 800px;\n  height:300px;\n\n  @media (max-width: 800px) {\n    width: 400px;\n  }\n`\n```\n\nUsage avanc√© des media queries : https://github.com/styled-components/styled-components/blob/master/docs/tips-and-tricks.md#media-templates\n\n### Composants configurables\n\nMieux : comme le composant √† directement acc√®s aux `props` (attributs du composant), on peut le configurer depuis le JavaScript :\n\n```jsx\nconst Title = styled.div`\n  font-size: 3rem;\n  color: ${props => props.blue ? '#0080ff' : '#ff3333'};\n`\n<Title>titre en rouge</Title>\n<Title blue>titre en bleu</Title>\n```\n\n<img src=\"./styled-3.png\" width=\"200\"/>\n\n### Dans un composant React \"classique\"\n\nAvec la methode `styled.css`, une `className` unique est g√©n√©r√©e et peut √™tre utilis√©e pour vos composants :\n\n```jsx\nimport Notification from './Notification'\n\nconst warning = styled.css`\n  color: #ff3333;\n`\n\nconst WarningNotification = () => <Notification className={ warning } />\n```\n\n### R√©utiliser des styles\n\nComme styled utilise des [templates literals](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Litt%C3%A9raux_gabarits) vous pouvez utiliser n'importe quelle variable dans votre CSS :\n\n```jsx\nconst textStyle = `\n  font-size: 2em;\n  letter-spacing: 5px;\n`\nconst TextRed = styled.div`\n  ${textStyle}\n  color: #ff3333;\n`\nconst TextBlue = styled.div`\n  ${textStyle}\n  color: #0080ff;\n`\n<TextRed>texte en rouge</TextRed>\n<TextBlue>texte en bleu</TextBlue>\n```\n\n<img src=\"./styled-4.png\" width=\"200\"/>\n\n### Attributs HTML\n\nPar d√©faut les composants styled passent toutes leur `props` au DOM, par exemple ici, `placeholder`.\n\n```jsx\n\nconst SuperInput = styled.input`\n  border: 2px solid silver;\n  border-radius: 2px;\n  text-align: center;\n  font-size: 1.5em;\n`\n\n<SuperInput placeholder=\"Your name\"/>\n```\n\n<img src=\"./styled-5.png\" width=\"200\"/>\n\n### Utiliser le theming\n\nPour rendre son UI themable, il suffit d'encapsuler son App dans un composant `ThemeProvider`; Chaque composant styled se verra alors fournir une props `theme` avec toutes les variables du th√®me :\n\n```jsx\n\nconst Button = styled.button`\n  background: ${props => props.theme.main || 'silver'};\n`\n\n// Create a green theme\nconst greenTheme = {\n  main: 'mediumseagreen',\n}\n\n// Create a blue theme\nconst blueTheme = {\n  main: '#0080ff',\n}\n\n<ThemeProvider theme={greenTheme}>\n  <Button>I'm green!</Button>\n</ThemeProvider>\n```\n\nEt pour aller loin, consultez la [documentation officielle](https://github.com/styled-components/styled-components/blob/master/docs/theming.md#using-theming)\n\n### Injecter des CSS globaux\n\nParfois on a besoin d'int√©grer aussi du CSS \"global\". Par exemple pour les fontes, ou lorsque l'on migre une grosse application.\n\nVoici une fa√ßon de le faire avec styled :\n\n```js\nimport { injectGlobal } from 'styled-components'\n\ninjectGlobal`\n  @import url('https://fonts.googleapis.com/css?family=Roboto');\n  * {\n    font-family: 'Roboto', sans-serif;\n  }\n`\n```\n\nPlus d'infos sur [la doc d'injectGlobal](https://github.com/styled-components/styled-components/blob/master/docs/api.md#injectglobal)\n\n### React Storybook\n\nEn ajoutant [react-storybook](https://github.com/storybooks/react-storybook) dans votre projet, vous pourrez facilement vous constituter une biblioth√®que visuelle avec vos propres composants, hors-contexte, dans tous leurs √©tats possibles, et avec du Hot-Reload ce qui est **tr√®s tr√®s pratique dans la phase de conception**.\n\n### Autres liens :\n\n - [Documentation officielle](https://github.com/styled-components/styled-components/blob/master/docs)\n - [Enforcing Best Practices In Component-Based Systems](https://www.smashingmagazine.com/2017/01/styled-components-enforcing-best-practices-component-based-systems/)\n - [The magic behind üíÖ styled-components](http://mxstbr.blog/2016/11/styled-components-magic-explained/)\n - [React CSS-in-JS techniques comparison](https://github.com/MicheleBertoli/css-in-js)\n","__filename":"fr/articles/js/react/styled-components/index.md","__url":"/fr/articles/js/react/styled-components/","__resourceUrl":"/fr/articles/js/react/styled-components/index.html","__dataUrl":"/fr/articles/js/react/styled-components/index.html.33d8f34abcc452d91e550107338cdfbc.json"}