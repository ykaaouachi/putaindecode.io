{"head":{"layout":"Post","comments":true,"date":"2014-10-20","title":"Débuter avec Ember","tags":["ember","javascript","frameworks"],"authors":["bmeurant"],"description":"Démarrer une Single Page Application aujourd'hui ça commence souvent par : \"mais quel putain de framework il faut que je prenne ?\" Et, vu…"},"body":"<p>Démarrer une <a href=\"http://en.wikipedia.org/wiki/Single-page_application\">Single Page Application</a> aujourd'hui ça commence souvent par : \"mais quel putain de framework il\nfaut que je prenne ?\" Et, vu que c'est pas ça qui manque, ça se complique !</p>\n<p>Parmi les multiples <a href=\"/fr/articles/js/react/\">technos disponibles</a> il y a <a href=\"http://emberjs.com\">Ember</a>. Pour que le choix\nne se résume pas à prendre celui qui a le plus joli logo ou qui génère le plus de spam sur votre Twitter, on vous propose de découvrir\n<a href=\"http://emberjs.com\">Ember</a>. Dans les posts à venir on verra comment construire concrètement une application avec ce framework.</p>\n<h2 id=\"les-fondamentaux\"><a href=\"#les-fondamentaux\" class=\"phenomic-HeadingAnchor\">#</a>Les fondamentaux</h2>\n<p>Parce que l'approche \"tête la première\" c'est bien mais que comprendre un minimum ce qu'on fait c'est encore mieux, il me paraît sage de commencer\npar expliquer la philosophie et les principaux éléments du framework, sous peine de se prendre un bon vieux <a href=\"http://en.wikipedia.org/wiki/RTFM\">RTFM</a>\nsur le coin du pif, comme ça, en passant.</p>\n<p><a href=\"http://emberjs.com\">Ember</a> se définit comme : \"A framework for creating <strong>ambitious</strong> web applications\" et ça, ça claque !\nMais je vois bien que ça ne suffit pas à vous convaincre alors je vais détailler un peu. Bon alors, bien que ce soit le mot \"ambitious\"\nqui soit mis en gras, deux autres trucs me paraissent encore plus importants :</p>\n<ul>\n<li>\n<p><strong>web</strong> : l'une des caractéristiques majeures d'<a href=\"http://emberjs.com\">Ember</a> est son attachement au web et aux URL en particulier. <strong>Les URL\net donc le routeur sont au cœur d'Ember</strong> là ou bien d'autres frameworks les considèrent au mieux comme un addon important.</p>\n</li>\n<li>\n<p><strong>framework</strong> : <a href=\"http://emberjs.com\">Ember</a> est réellement un framework. Pas une lib, pas une colonne vertébrale, pas une boîte à outils :\nun framework ! <a href=\"http://emberjs.com\">Ember</a> propose un véritable modèle de développement que vous allez tout de suite adopter ... ou rejeter\n(au moins ça aura le mérite d'être clair).</p>\n</li>\n</ul>\n<h3 id=\"conventions-de-nommage\"><a href=\"#conventions-de-nommage\" class=\"phenomic-HeadingAnchor\">#</a>Conventions de nommage</h3>\n<p>Ce modèle de développement commence par les conventions de nommage. <a href=\"http://emberjs.com\">Ember</a>\napplique en effet le principe de \"<em>conventions over configuration</em>\" et repose sur un nommage cohérent des différents composants\nde votre application. Et finalement, quand on y réflechit bien, la cohérence, ça n'a pas que des mauvais côtés.</p>\n<p>Typiquement pour une URL <code>test</code>, <a href=\"http://emberjs.com\">Ember</a> s'attend à trouver une <code>TestRoute</code>, un <code>TestController</code>, un gabarit <code>test</code>.\nJusqu'ici, tout va bien.</p>\n<p>Curieux ? -> <a href=\"http://emberjs.com/guides/concepts/naming-conventions/\">doc officielle</a>.</p>\n<h3 id=\"modèles\"><a href=\"#mod%C3%A8les\" class=\"phenomic-HeadingAnchor\">#</a>Modèles</h3>\n<p>Un modèle est un objet avec des propriétés contenant des données métier. Le modèle est ensuite passé au gabarit pour être rendu par lui\nen HTML. Typiquement, les modèles peuvent être récupérés d'un back end via une API REST JSON via <a href=\"https://github.com/emberjs/data\">Ember Data</a>\nmais pas que.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> Book = DS.Model.extend({\n    <span class=\"hljs-attr\">title</span>               : DS.attr(<span class=\"hljs-string\">'string'</span>),\n    <span class=\"hljs-attr\">publicationDate</span>     : DS.attr(<span class=\"hljs-string\">'date'</span>),\n    <span class=\"hljs-attr\">author</span>              : DS.attr(<span class=\"hljs-string\">'string'</span>),\n    <span class=\"hljs-attr\">publisher</span>           : DS.attr(<span class=\"hljs-string\">'string'</span>),\n    <span class=\"hljs-attr\">summary</span>             : DS.attr(<span class=\"hljs-string\">'string'</span>)\n});</code></pre>\n<p>Assoifé de connaissances ? -> <a href=\"http://emberjs.com/guides/models/\">doc officielle</a>.</p>\n<h3 id=\"routeur\"><a href=\"#routeur\" class=\"phenomic-HeadingAnchor\">#</a>Routeur</h3>\n<p>Le routeur permet de faire correspondre à une URL un ensemble de gabarits imbriqués permettant le rendu des modèles associés à\nchacun de ces gabarits.</p>\n<p>L'exemple suivant permet le rendu des URLs :</p>\n<ul>\n<li><code>/books</code></li>\n<li><code>/books/:book_id</code></li>\n<li><code>/books/:book_id/edit</code></li>\n<li><code>/books/create</code></li>\n</ul>\n<pre><code class=\"hljs language-js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'books'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">this</span>.resource(<span class=\"hljs-string\">'book'</span>, { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">'/:book_id'</span> }, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n          <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'edit'</span>);\n      });\n      <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">'create'</span>);\n  });\n});</code></pre>\n<h3 id=\"routes\"><a href=\"#routes\" class=\"phenomic-HeadingAnchor\">#</a>Routes</h3>\n<p>Les routes associent un modèle à un gabarit et sont également impliquées dans les transitions entre les différentes URL (et donc les différents\nétats) de l'application. Elles gèrent notamment un certain nombre d'opérations sur un modèle lors de ces transitions.</p>\n<pre><code class=\"hljs language-js\">App.BooksRoute = Ember.Route.extend({\n    <span class=\"hljs-attr\">model</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.store.find(<span class=\"hljs-string\">'book'</span>);\n    }\n});</code></pre>\n<p>Intrigué ? -> <a href=\"http://emberjs.com/guides/routing/\">doc officielle</a>.</p>\n<h3 id=\"contrôleurs\"><a href=\"#contr%C3%B4leurs\" class=\"phenomic-HeadingAnchor\">#</a>Contrôleurs</h3>\n<p>Le contrôleur gère l'état de l'application. Il est situé entre la route dont il récupère le modèle et le gabarit dont il répond aux appels.\nLes données du contrôleur sont accessibles au gabarit au même titre que le modèle.</p>\n<p>Le contrôleur est par exemple responsable du traitement des actions effectuées par l'utilisateur sur l'interface rendue par le gabarit :</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> {{<span class=\"hljs-attr\">action</span> \"<span class=\"hljs-attr\">sort</span>\"}}></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></code></pre>\n<pre><code class=\"hljs language-js\">App.BooksController = Ember.ArrayController.extend({\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-comment\">// appelé lors du clic sur le bouton</span>\n    sort: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        ...\n    }\n  }\n});</code></pre>\n<p>Perdu ? -> <a href=\"http://emberjs.com/guides/controllers/\">doc officielle</a>.</p>\n<h3 id=\"vues\"><a href=\"#vues\" class=\"phenomic-HeadingAnchor\">#</a>Vues</h3>\n<p>Il est très rare d'avoir à définir des vues en <a href=\"http://emberjs.com\">Ember</a> parce que les gabarits <a href=\"http://handlebarsjs.com/\">Handlebars</a>\nsont surpuissants et que les contrôleurs se chargent de la gestion de l'état de l'application.</p>\n<p>Vous en voulez quand même ? -> <a href=\"http://emberjs.com/guides/views/\">doc officielle</a>.</p>\n<h3 id=\"gabarits\"><a href=\"#gabarits\" class=\"phenomic-HeadingAnchor\">#</a>Gabarits</h3>\n<p>Un gabarit est un fragment de code HTML permettant, via des expressions, d'afficher les données du modèle associé. Les gabarits d'<a href=\"http://emberjs.com\">Ember</a>\nsont des gabarits <a href=\"http://handlebarsjs.com/\">Handlebars</a>. Les expressions Handlebars sont délimitées par <code>{{</code> et <code>}}</code>.</p>\n<p>L'exemple suivant permet d'afficher le titre d'une app composé d'un prénom et d'un nom pour peu que l'on ait passé au gabarit un\nmodèle contenant les deux propriétés <code>firstname</code> et <code>lastname</code>.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>{{firstname}} {{lastname}} Library<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span></code></pre>\n<p><a href=\"http://handlebarsjs.com/\">Handlebars</a> vient avec de nombreux outils (helpers) permettant de dynamiser nos gabarits : <code>{{#if isActive}} ... {{/if}}</code>,\n<code>{{#each users}} ... {{/each}}</code>, etc.</p>\n<p>Dans <a href=\"http://emberjs.com\">Ember</a>, les gabarits peuvent contenir un élément très important : <code>{{outlet}}</code>. Cet outlet définit un emplacement\npour un autre gabarit permettant ainsi de multiples imbrications à mesure que les routes de l'application sont activées.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>{{firstname}} {{lastname}} Library<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n  {{outlet}}\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></code></pre>\n<p>Tout élément de modèle injecté dans un gabarit sera <strong>automatiquement mis à jour</strong> (binding) par <a href=\"http://emberjs.com\">Ember</a> lorsque le modèle\nassocié au gabarit sera modifié. Évidemment, seul cet élément sera rafraîchit et non le gabarit entier sinon c'est tricher.</p>\n<p>Envie de tester ? -> <a href=\"http://emberjs.com/guides/templates/the-application-template/\">doc officielle</a>.</p>\n<h3 id=\"composants\"><a href=\"#composants\" class=\"phenomic-HeadingAnchor\">#</a>Composants</h3>\n<p>Un composant <a href=\"http://emberjs.com\">Ember</a> permet de définir une balise HTML personnalisée, permettant ainsi de partager de puissants\néléments réutilisables au sein de votre application.</p>\n<p>Vous en avez toujours rêvé ? -> <a href=\"http://emberjs.com/guides/components/\">doc officielle</a>.</p>\n<h3 id=\"géneration-dobjets\"><a href=\"#g%C3%A9neration-dobjets\" class=\"phenomic-HeadingAnchor\">#</a>Géneration d'objets</h3>\n<p>Pour qu'un gabarit soit rendu lorsqu'une URL est demandée, il faut donc que le routeur définisse cette URL, qu'elle soit implémentée par\nune route qui récupèrera un modèle qu'elle mettra à disposition du contrôleur et du gabarit. Le contrôleur écoutera les\névènements en provenance du gabarit et y apportera la réponse adaptée. À noter que l'évènement peut également remonter jusqu'à la route.\nLe gabarit est quant à lui encapsulé dans une vue gérée par Ember tout seul comme un grand.</p>\n<p>Il n'est cependant <strong>pas nécessaire de créer systématiquement tous ces objets</strong> si aucune logique spécifique n'a besoin d'y être définie.\nEn effet, <a href=\"http://emberjs.com\">Ember</a> s'appuie sur les <a href=\"#conventions-de-nommage\">conventions de nommage</a> pour retrouver successivement,\nà partir d'une URL, la route, le contrôleur, la vue et le gabarit associés. Si l'un de ces objet n'est pas trouvé, <a href=\"http://emberjs.com\">Ember</a>\nva en générer un par défaut.</p>\n<p>Donc si l'on crée dans le routeur la route suivante sans créer aucun autre objet :</p>\n<pre><code class=\"hljs language-js\">App.Router.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.route(<span class=\"hljs-string\">\"about\"</span>, { <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">\"/about\"</span> });\n});</code></pre>\n<p><a href=\"http://emberjs.com\">Ember</a> va générer les objets suivants :</p>\n<ul>\n<li><strong>route</strong> : <code>AboutRoute</code></li>\n<li><strong>contrôleur</strong> : <code>AboutController</code></li>\n<li><strong>gabarit</strong> : <code>about</code></li>\n</ul>\n<p>Dans une application <a href=\"http://emberjs.com\">Ember</a>, <strong>il est donc nécessaire de ne définir que ce dont on a besoin !</strong>. Et c'est bien connu,\nmoins il y a de boilerplate, plus il y a de plaisir !</p>\n<p>Envie d'en savoir plus ? -> <a href=\"http://emberjs.com/guides/routing/generated-objects/\">doc officielle</a>.</p>\n<p>Un bon moyen de se rendre compte de ça consiste à installer le debugger Ember sur votre navigateur préféré (donc pas IE). Vous aurez, entre\nautres, la liste de l'ensemble des objets impliqués dans le rendu d'une URL donnée. Cette liste distingue de manière claire les objets\ncréés par vous et ceux générés par Ember.</p>\n<p>Ce module s'appelle <strong>Ember Inspector</strong> et est disponible pour <a href=\"https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi?hl=en\">Chrome</a>\net <a href=\"https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/\">Firefox</a>. C'est absolument indispensable lorsqu'on développe en Ember.</p>\n<h2 id=\"conclusion-et-next-steps\"><a href=\"#conclusion-et-next-steps\" class=\"phenomic-HeadingAnchor\">#</a>Conclusion et next steps</h2>\n<p><a href=\"http://emberjs.com\">Ember</a> est donc un framework très riche et extrêmement plaisant à pratiquer.\n<strong>Un vrai framework avec un vrai parti pris et des vrais choix structurants.</strong>\nIl est résolument tourné vers le web et les URL. Ses créateurs sont également ceux de son moteur de gabarit <a href=\"http://handlebarsjs.com/\">Handlebars</a>\net sont très impliqués dans diverses initiatives autour de la standardisation et de l'évolution du web. Pour n'en citer que deux :\n<a href=\"http://jsonapi.org/\">JSON API</a> et <a href=\"https://gist.github.com/wycats/9144666b0c606d1838be\">Web Components</a>, notamment au travers du moteur\nde gabarits <a href=\"https://github.com/tildeio/htmlbars\">HTMLBars</a>.\nIls embrassent très rapidement les nouveaux standards tels que <a href=\"https://people.mozilla.org/~jorendorff/es6-draft.html\">ES6 Harmony</a> à l'image des travaux\neffectués autour d'<a href=\"http://www.ember-cli.com/\">ember-cli</a> qui sera abordé dans un prochain article.</p>\n<p>Enfin, contrairement aux <em>a priori</em>, la courbe d'apprentissage d'<a href=\"http://emberjs.com\">Ember</a>\nest progressive et il est très simple à prendre en main une fois les concepts de base appréhendés - c'est justement le but de cet\narticle. Au prochain épisode, nous verrons justement - par la pratique cette fois, <strong>comment démarrer et construire progressivement une\napplication <a href=\"http://emberjs.com\">Ember</a></strong>.</p>\n","rawBody":"\nDémarrer une [Single Page Application](http://en.wikipedia.org/wiki/Single-page_application) aujourd'hui ça commence souvent par : \"mais quel putain de framework il\nfaut que je prenne ?\" Et, vu que c'est pas ça qui manque, ça se complique !\n\nParmi les multiples [technos disponibles](/fr/articles/js/react/) il y a [Ember](http://emberjs.com). Pour que le choix\nne se résume pas à prendre celui qui a le plus joli logo ou qui génère le plus de spam sur votre Twitter, on vous propose de découvrir\n[Ember](http://emberjs.com). Dans les posts à venir on verra comment construire concrètement une application avec ce framework.\n\n## Les fondamentaux\n\nParce que l'approche \"tête la première\" c'est bien mais que comprendre un minimum ce qu'on fait c'est encore mieux, il me paraît sage de commencer\npar expliquer la philosophie et les principaux éléments du framework, sous peine de se prendre un bon vieux [RTFM](http://en.wikipedia.org/wiki/RTFM)\nsur le coin du pif, comme ça, en passant.\n\n[Ember](http://emberjs.com) se définit comme : \"A framework for creating **ambitious** web applications\" et ça, ça claque !\nMais je vois bien que ça ne suffit pas à vous convaincre alors je vais détailler un peu. Bon alors, bien que ce soit le mot \"ambitious\"\nqui soit mis en gras, deux autres trucs me paraissent encore plus importants :\n\n* **web** : l'une des caractéristiques majeures d'[Ember](http://emberjs.com) est son attachement au web et aux URL en particulier. **Les URL\n  et donc le routeur sont au cœur d'Ember** là ou bien d'autres frameworks les considèrent au mieux comme un addon important.\n\n* **framework** : [Ember](http://emberjs.com) est réellement un framework. Pas une lib, pas une colonne vertébrale, pas une boîte à outils :\n  un framework ! [Ember](http://emberjs.com) propose un véritable modèle de développement que vous allez tout de suite adopter ... ou rejeter\n  (au moins ça aura le mérite d'être clair).\n\n\n### Conventions de nommage\n\nCe modèle de développement commence par les conventions de nommage. [Ember](http://emberjs.com)\napplique en effet le principe de \"*conventions over configuration*\" et repose sur un nommage cohérent des différents composants\nde votre application. Et finalement, quand on y réflechit bien, la cohérence, ça n'a pas que des mauvais côtés.\n\nTypiquement pour une URL `test`, [Ember](http://emberjs.com) s'attend à trouver une `TestRoute`, un `TestController`, un gabarit `test`.\nJusqu'ici, tout va bien.\n\nCurieux ? -> [doc officielle](http://emberjs.com/guides/concepts/naming-conventions/).\n\n\n### Modèles\n\nUn modèle est un objet avec des propriétés contenant des données métier. Le modèle est ensuite passé au gabarit pour être rendu par lui\nen HTML. Typiquement, les modèles peuvent être récupérés d'un back end via une API REST JSON via [Ember Data](https://github.com/emberjs/data)\nmais pas que.\n\n```js\nvar Book = DS.Model.extend({\n    title               : DS.attr('string'),\n    publicationDate     : DS.attr('date'),\n    author              : DS.attr('string'),\n    publisher           : DS.attr('string'),\n    summary             : DS.attr('string')\n});\n```\n\nAssoifé de connaissances ? -> [doc officielle](http://emberjs.com/guides/models/).\n\n\n### Routeur\n\nLe routeur permet de faire correspondre à une URL un ensemble de gabarits imbriqués permettant le rendu des modèles associés à\nchacun de ces gabarits.\n\nL'exemple suivant permet le rendu des URLs :\n\n* `/books`\n* `/books/:book_id`\n* `/books/:book_id/edit`\n* `/books/create`\n\n```js\nApp.Router.map(function() {\n  this.resource('books', function() {\n      this.resource('book', { path: '/:book_id' }, function () {\n          this.route('edit');\n      });\n      this.route('create');\n  });\n});\n```\n\n### Routes\n\nLes routes associent un modèle à un gabarit et sont également impliquées dans les transitions entre les différentes URL (et donc les différents\nétats) de l'application. Elles gèrent notamment un certain nombre d'opérations sur un modèle lors de ces transitions.\n\n```js\nApp.BooksRoute = Ember.Route.extend({\n    model: function () {\n        return this.store.find('book');\n    }\n});\n```\n\nIntrigué ? -> [doc officielle](http://emberjs.com/guides/routing/).\n\n\n### Contrôleurs\n\nLe contrôleur gère l'état de l'application. Il est situé entre la route dont il récupère le modèle et le gabarit dont il répond aux appels.\nLes données du contrôleur sont accessibles au gabarit au même titre que le modèle.\n\nLe contrôleur est par exemple responsable du traitement des actions effectuées par l'utilisateur sur l'interface rendue par le gabarit :\n\n```html\n<button {{action \"sort\"}}></button>\n```\n\n```js\nApp.BooksController = Ember.ArrayController.extend({\n  actions: {\n    // appelé lors du clic sur le bouton\n    sort: function () {\n        ...\n    }\n  }\n});\n```\n\nPerdu ? -> [doc officielle](http://emberjs.com/guides/controllers/).\n\n\n### Vues\n\nIl est très rare d'avoir à définir des vues en [Ember](http://emberjs.com) parce que les gabarits [Handlebars](http://handlebarsjs.com/)\nsont surpuissants et que les contrôleurs se chargent de la gestion de l'état de l'application.\n\nVous en voulez quand même ? -> [doc officielle](http://emberjs.com/guides/views/).\n\n### Gabarits\n\nUn gabarit est un fragment de code HTML permettant, via des expressions, d'afficher les données du modèle associé. Les gabarits d'[Ember](http://emberjs.com)\nsont des gabarits [Handlebars](http://handlebarsjs.com/). Les expressions Handlebars sont délimitées par `{{` et `}}`.\n\nL'exemple suivant permet d'afficher le titre d'une app composé d'un prénom et d'un nom pour peu que l'on ait passé au gabarit un\nmodèle contenant les deux propriétés `firstname` et `lastname`.\n\n```html\n<h1>{{firstname}} {{lastname}} Library</h1>\n```\n\n[Handlebars](http://handlebarsjs.com/) vient avec de nombreux outils (helpers) permettant de dynamiser nos gabarits : `{{#if isActive}} ... {{/if}}`,\n`{{#each users}} ... {{/each}}`, etc.\n\nDans [Ember](http://emberjs.com), les gabarits peuvent contenir un élément très important : `{{outlet}}`. Cet outlet définit un emplacement\npour un autre gabarit permettant ainsi de multiples imbrications à mesure que les routes de l'application sont activées.\n\n```html\n<h1>{{firstname}} {{lastname}} Library</h1>\n\n<div>\n  {{outlet}}\n</div>\n```\n\nTout élément de modèle injecté dans un gabarit sera **automatiquement mis à jour** (binding) par [Ember](http://emberjs.com) lorsque le modèle\nassocié au gabarit sera modifié. Évidemment, seul cet élément sera rafraîchit et non le gabarit entier sinon c'est tricher.\n\nEnvie de tester ? -> [doc officielle](http://emberjs.com/guides/templates/the-application-template/).\n\n\n### Composants\n\nUn composant [Ember](http://emberjs.com) permet de définir une balise HTML personnalisée, permettant ainsi de partager de puissants\néléments réutilisables au sein de votre application.\n\nVous en avez toujours rêvé ? -> [doc officielle](http://emberjs.com/guides/components/).\n\n\n### Géneration d'objets\n\nPour qu'un gabarit soit rendu lorsqu'une URL est demandée, il faut donc que le routeur définisse cette URL, qu'elle soit implémentée par\nune route qui récupèrera un modèle qu'elle mettra à disposition du contrôleur et du gabarit. Le contrôleur écoutera les\névènements en provenance du gabarit et y apportera la réponse adaptée. À noter que l'évènement peut également remonter jusqu'à la route.\nLe gabarit est quant à lui encapsulé dans une vue gérée par Ember tout seul comme un grand.\n\nIl n'est cependant **pas nécessaire de créer systématiquement tous ces objets** si aucune logique spécifique n'a besoin d'y être définie.\nEn effet, [Ember](http://emberjs.com) s'appuie sur les [conventions de nommage](#conventions-de-nommage) pour retrouver successivement,\nà partir d'une URL, la route, le contrôleur, la vue et le gabarit associés. Si l'un de ces objet n'est pas trouvé, [Ember](http://emberjs.com)\nva en générer un par défaut.\n\nDonc si l'on crée dans le routeur la route suivante sans créer aucun autre objet :\n\n```js\nApp.Router.map(function() {\n  this.route(\"about\", { path: \"/about\" });\n});\n```\n\n[Ember](http://emberjs.com) va générer les objets suivants :\n\n* **route** : `AboutRoute`\n* **contrôleur** : `AboutController`\n* **gabarit** : `about`\n\nDans une application [Ember](http://emberjs.com), **il est donc nécessaire de ne définir que ce dont on a besoin !**. Et c'est bien connu,\nmoins il y a de boilerplate, plus il y a de plaisir !\n\nEnvie d'en savoir plus ? -> [doc officielle](http://emberjs.com/guides/routing/generated-objects/).\n\nUn bon moyen de se rendre compte de ça consiste à installer le debugger Ember sur votre navigateur préféré (donc pas IE). Vous aurez, entre\nautres, la liste de l'ensemble des objets impliqués dans le rendu d'une URL donnée. Cette liste distingue de manière claire les objets\ncréés par vous et ceux générés par Ember.\n\nCe module s'appelle **Ember Inspector** et est disponible pour [Chrome](https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi?hl=en)\net [Firefox](https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/). C'est absolument indispensable lorsqu'on développe en Ember.\n\n\n## Conclusion et next steps\n\n[Ember](http://emberjs.com) est donc un framework très riche et extrêmement plaisant à pratiquer.\n**Un vrai framework avec un vrai parti pris et des vrais choix structurants.**\nIl est résolument tourné vers le web et les URL. Ses créateurs sont également ceux de son moteur de gabarit [Handlebars](http://handlebarsjs.com/)\net sont très impliqués dans diverses initiatives autour de la standardisation et de l'évolution du web. Pour n'en citer que deux :\n[JSON API](http://jsonapi.org/) et [Web Components](https://gist.github.com/wycats/9144666b0c606d1838be), notamment au travers du moteur\nde gabarits [HTMLBars](https://github.com/tildeio/htmlbars).\nIls embrassent très rapidement les nouveaux standards tels que [ES6 Harmony](https://people.mozilla.org/~jorendorff/es6-draft.html) à l'image des travaux\neffectués autour d'[ember-cli](http://www.ember-cli.com/) qui sera abordé dans un prochain article.\n\nEnfin, contrairement aux *a priori*, la courbe d'apprentissage d'[Ember](http://emberjs.com)\nest progressive et il est très simple à prendre en main une fois les concepts de base appréhendés - c'est justement le but de cet\narticle. Au prochain épisode, nous verrons justement - par la pratique cette fois, **comment démarrer et construire progressivement une\napplication [Ember](http://emberjs.com)**.\n","__filename":"fr/articles/js/ember/index.md","__url":"/fr/articles/js/ember/","__resourceUrl":"/fr/articles/js/ember/index.html","__dataUrl":"/fr/articles/js/ember/index.html.77d3773c700227ff24eb7b448a853843.json"}