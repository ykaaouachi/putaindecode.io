{"head":{"layout":"Post","comments":true,"date":"2015-07-20","title":"Webpack","tags":["javascript","webpack","task-runner"],"authors":["MoOx"],"header":{"credit":"http://webpack.github.io/","linearGradient":"160deg, rgb(204, 51, 51), rgba(204, 51, 51, .6)"},"description":"Pourquoi Webpack ? Webpack a pour objectif de vous faciliter la vie, notamment en vous aidant à organiser votre application JS en modules.…"},"body":"<h1 id=\"pourquoi-webpack-\"><a href=\"#pourquoi-webpack-\" class=\"phenomic-HeadingAnchor\">#</a>Pourquoi Webpack ?</h1>\n<p>Webpack a pour objectif de vous faciliter la vie, notamment en vous aidant à\norganiser <a href=\"/fr/articles/frontend/2015-etat-lieux-javascript-modulaire/\">votre application JS en modules</a>.\nLe projet est déjà très populaire, particulièrement dans la communauté React, ce qui\nparait logique vu qu'il s'agit de développer des composants.</p>\n<p>Webpack apporte à ce niveau des fonctionnalités intéressantes :</p>\n<ul>\n<li>disposer de toutes les ressources statiques (CSS, images, fontes) en tant que\nmodule,</li>\n<li>intégrer et consommer des bibliothèques tierces très simplement en tant\nque module,</li>\n<li>séparer votre <code>build</code> en plusieurs morceaux, chargés à la demande,</li>\n<li>garder un chargement initial très rapide si besoin,</li>\n<li>personnaliser la plupart des étapes du processus,</li>\n<li>adapté pour les gros projets.</li>\n</ul>\n<p>Avant Webpack, nous avions beau avoir des super task-runners comme\n<a href=\"/fr/articles/js/grunt/\">Grunt</a>\nou\n<a href=\"/fr/articles/js/gulp/\">Gulp</a>,\nil faut avouer qu'on bricolait quand même pas mal.</p>\n<p>Et vous avez sûrement mieux à faire que de devoir modifier des configurations ou\ndes définitions de tâches pour ajuster les copies d'images ou de fontes, ou\nencore ajuster des URL générées.\nIl y avait avec ces solutions une grande partie de rafistolage, où l’on se\ndevait de faire très attention à la moindre réorganisation de code, sous peine\nde casser une partie du rendu.</p>\n<p>Prenons par exemple une image de fond déclarée en CSS via un\n<code>background: url(...)</code>.\nQui vous préviendra lorsque celle-ci aura été supprimée ou déplacée,\net que la référence n'est donc plus bonne ?\nPeut-être vos logs de serveur web ? En recherchant les erreurs HTTP 404...</p>\n<p>Vous avez la responsabilité de gérer vos tâches et leurs résultats tout en vous\nassurant du bon fonctionnement car vous êtes la glu entre tous ces morceaux.</p>\n<h1 id=\"quest-ce-que-webpack-\"><a href=\"#quest-ce-que-webpack-\" class=\"phenomic-HeadingAnchor\">#</a>Qu'est-ce que Webpack ?</h1>\n<p>Pas besoin de s'appeler Einstein pour comprendre les intentions de Webpack en\ninterprétant le nom : web + pack. Faire un pack prêt pour le web.</p>\n<p>Nativement, Webpack s'occupe uniquement de ressources JavaScript.\nWebpack propose un système de <em>loader</em> qui permet de transformer tout et\nn'importe quoi en JavaScript (mais pas que).\nAinsi, tout est consommable en tant que module.</p>\n<p>Webpack prend en charge la fonction <code>require()</code> (connue et utilisée dans node.js et\nbrowserify) et permet de définir des nouveaux comportements.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> myModule = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./my-module.js\"</span>)\n<span class=\"hljs-comment\">// \"classique\" pour ceux qui utilisent node.js/browserify</span>\n\n<span class=\"hljs-comment\">// nouveauté avec Webpack</span>\n<span class=\"hljs-keyword\">var</span> myStyles = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./my-module.css\"</span>)\n<span class=\"hljs-comment\">// si vous utilisez le css-loader par exemple, toutes les directives url()</span>\n<span class=\"hljs-comment\">// se comporteront comme des require(), ainsi, vous pourrez appliquer</span>\n<span class=\"hljs-comment\">// des loaders sur tous vos assets et vous aurez des erreurs à la compilation</span>\n<span class=\"hljs-comment\">// si une ressource est manquante.</span>\n\n<span class=\"hljs-comment\">// vous pourrez aussi consommer des SVG en tant que chaînes (eg: raw-loader)</span>\n<span class=\"hljs-keyword\">var</span> mySVG = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./my-module.svg\"</span>)\n\n<span class=\"hljs-comment\">// ou inclure des fichiers dans votre build (via file-loader)</span>\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"index.html\"</span>)</code></pre>\n<p>C'est cette partie qui est aujourd'hui la plus intéressante et la plus flexible.</p>\n<figure>\n  <img src=\"index.jpg\" alt=\"\" />\n  <figcaption>\n    Webpack transforme une multitude de fichiers en lots par responsabilité\n  </figcaption>\n</figure>\n<p>Webpack va donc pouvoir s'occuper aussi bien de vos modules JavaScript\n(CommonJS, AMD, UMD...),\nmais aussi de <a href=\"https://github.com/css-modules/css-modules\">vos modules CSS</a>,\nde vos fichiers SVG, gif, png, etc. ainsi que potentiellement n'importe quel\ntype de fichier pour peu que vous preniez le temps d'écrire un <em>loader</em>\n(rassurez-vous, il existe déjà un loader pour tous les fichiers que vous\nmanipulez couramment).</p>\n<p>En plus de cela, il a été pensé afin de permettre la séparation de votre pack\n(votre gros fichier JavaScript compilé) en plusieurs morceaux, selon vos\nbesoins : vous pourrez ainsi ajuster la balance entre performance et lazy\nloading.</p>\n<p>Avec les solutions existantes, il est actuellement très difficile d'arriver\nfacilement à ce que propose Webpack, pour ne pas dire impossible.</p>\n<p>Il est possible d'avoir l'équivalent avec\n<a href=\"/fr/articles/js/browserify/\">browserify</a> comme l'a indiqué son auteur\ndans un article\n<a href=\"https://gist.github.com/substack/68f8d502be42d5cd4942\">browserify for Webpack users</a>\n(qui est une réponse à la ressource\n<a href=\"https://github.com/webpack/docs/wiki/webpack-for-browserify-users\">Webpack for browserify users</a>\n).</p>\n<p>Il est clair que cela n'est pas aussi simple qu'avec Webpack qui est beaucoup\nplus flexible de par sa conception et ses objectifs initiaux.</p>\n<p>Par exemple, browserify pourra appliquer d'éventuelles transformations\nuniquement au code local et donc pas dans <code>node_modules/*</code>.\nCela peut être problématique et nous conduit forcément à finir par du\nbricolage si on veut consommer des assets de modules de manière transparente.</p>\n<p>Ne parlons pas du\n<a href=\"http://webpack.github.io/docs/hot-module-replacement-with-webpack.html\">hot loading</a>\n(remplacement de code à la volée)\nqui n'est pas du tout facile à mettre en place (pour le moment) avec\nautre chose que Webpack.</p>\n<h1 id=\"comment-intégrer-webpack-dans-votre-workflow-\"><a href=\"#comment-int%C3%A9grer-webpack-dans-votre-workflow-\" class=\"phenomic-HeadingAnchor\">#</a>Comment intégrer Webpack dans votre workflow ?</h1>\n<p>Dans un premier temps vous pourrez facilement intégrer Webpack en remplacement de\n<a href=\"/fr/articles/js/browserify/\">browserify</a> ou d'une éventuelle\nconcaténation via des plugins Gulp, Grunt, etc.</p>\n<p>Dans un second temps, vous pourrez très certainement remplacer une partie de vos\nautres tâches pour ajuster/copier/déplacer vos assets (CSS, images...) et\nainsi réduire le code dédié à votre workflow. Il se pourrait alors que votre\nutilisation d'un task-runner soit maintenant si réduite que vous pourriez vous\nen passez en utilisant simplement\n<a href=\"http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/\">des scripts npm</a>.</p>\n<p>Si jamais vous êtes limité, <a href=\"/fr/articles/npm/utilitaire-cli/\">vous pourrez bien entendu créer votre propre\ncommande</a>, qui sera réutilisable dans\nn'importe quel contexte.</p>\n<h1 id=\"webpack-en-pratique\"><a href=\"#webpack-en-pratique\" class=\"phenomic-HeadingAnchor\">#</a>Webpack en pratique</h1>\n<p>Quelques ressources pour vous y mettre :</p>\n<ul>\n<li>Un premier <a href=\"/fr/articles/js/webpack/premier-exemple\">exemple détaillé de configuration et d'utilisation</a>\nbasé sur notre retour d'expérience.</li>\n</ul>\n<p>En anglais :</p>\n<ul>\n<li><a href=\"http://webpack.github.io/docs/tutorials/getting-started/\">Tutoriel officiel</a></li>\n<li><a href=\"http://okonet.ru/viennajs-webpack-introduction/\">Slides d'introduction</a></li>\n<li><a href=\"https://github.com/petehunt/webpack-howto\">\"How to\" webpack</a></li>\n</ul>\n<p><a href=\"http://webpack.github.io/docs\">Webpack possède une documentation</a>\nassez fournie, mais pas vraiment facile à aborder lorsqu'on découvre le projet.\nAussi, n'hésitez pas à nous poser vos questions en commentaires.</p>\n","rawBody":"\n# Pourquoi Webpack ?\n\nWebpack a pour objectif de vous faciliter la vie, notamment en vous aidant à\norganiser [votre application JS en modules](/fr/articles/frontend/2015-etat-lieux-javascript-modulaire/).\nLe projet est déjà très populaire, particulièrement dans la communauté React, ce qui\nparait logique vu qu'il s'agit de développer des composants.\n\nWebpack apporte à ce niveau des fonctionnalités intéressantes :\n\n- disposer de toutes les ressources statiques (CSS, images, fontes) en tant que\n  module,\n- intégrer et consommer des bibliothèques tierces très simplement en tant\n  que module,\n- séparer votre `build` en plusieurs morceaux, chargés à la demande,\n- garder un chargement initial très rapide si besoin,\n- personnaliser la plupart des étapes du processus,\n- adapté pour les gros projets.\n\nAvant Webpack, nous avions beau avoir des super task-runners comme\n[Grunt](/fr/articles/js/grunt/)\nou\n[Gulp](/fr/articles/js/gulp/),\nil faut avouer qu'on bricolait quand même pas mal.\n\nEt vous avez sûrement mieux à faire que de devoir modifier des configurations ou\ndes définitions de tâches pour ajuster les copies d'images ou de fontes, ou\nencore ajuster des URL générées.\nIl y avait avec ces solutions une grande partie de rafistolage, où l’on se\ndevait de faire très attention à la moindre réorganisation de code, sous peine\nde casser une partie du rendu.\n\nPrenons par exemple une image de fond déclarée en CSS via un\n`background: url(...)`.\nQui vous préviendra lorsque celle-ci aura été supprimée ou déplacée,\net que la référence n'est donc plus bonne ?\nPeut-être vos logs de serveur web ? En recherchant les erreurs HTTP 404...\n\nVous avez la responsabilité de gérer vos tâches et leurs résultats tout en vous\nassurant du bon fonctionnement car vous êtes la glu entre tous ces morceaux.\n\n# Qu'est-ce que Webpack ?\n\nPas besoin de s'appeler Einstein pour comprendre les intentions de Webpack en\ninterprétant le nom : web + pack. Faire un pack prêt pour le web.\n\nNativement, Webpack s'occupe uniquement de ressources JavaScript.\nWebpack propose un système de *loader* qui permet de transformer tout et\nn'importe quoi en JavaScript (mais pas que).\nAinsi, tout est consommable en tant que module.\n\nWebpack prend en charge la fonction `require()` (connue et utilisée dans node.js et\nbrowserify) et permet de définir des nouveaux comportements.\n\n```js\nvar myModule = require(\"./my-module.js\")\n// \"classique\" pour ceux qui utilisent node.js/browserify\n\n// nouveauté avec Webpack\nvar myStyles = require(\"./my-module.css\")\n// si vous utilisez le css-loader par exemple, toutes les directives url()\n// se comporteront comme des require(), ainsi, vous pourrez appliquer\n// des loaders sur tous vos assets et vous aurez des erreurs à la compilation\n// si une ressource est manquante.\n\n// vous pourrez aussi consommer des SVG en tant que chaînes (eg: raw-loader)\nvar mySVG = require(\"./my-module.svg\")\n\n// ou inclure des fichiers dans votre build (via file-loader)\nrequire(\"index.html\")\n```\n\nC'est cette partie qui est aujourd'hui la plus intéressante et la plus flexible.\n\n<figure>\n  <img src=\"index.jpg\" alt=\"\" />\n  <figcaption>\n    Webpack transforme une multitude de fichiers en lots par responsabilité\n  </figcaption>\n</figure>\n\nWebpack va donc pouvoir s'occuper aussi bien de vos modules JavaScript\n(CommonJS, AMD, UMD...),\nmais aussi de [vos modules CSS](https://github.com/css-modules/css-modules),\nde vos fichiers SVG, gif, png, etc. ainsi que potentiellement n'importe quel\ntype de fichier pour peu que vous preniez le temps d'écrire un *loader*\n(rassurez-vous, il existe déjà un loader pour tous les fichiers que vous\nmanipulez couramment).\n\nEn plus de cela, il a été pensé afin de permettre la séparation de votre pack\n(votre gros fichier JavaScript compilé) en plusieurs morceaux, selon vos\nbesoins : vous pourrez ainsi ajuster la balance entre performance et lazy\nloading.\n\nAvec les solutions existantes, il est actuellement très difficile d'arriver\nfacilement à ce que propose Webpack, pour ne pas dire impossible.\n\nIl est possible d'avoir l'équivalent avec\n[browserify](/fr/articles/js/browserify/) comme l'a indiqué son auteur\ndans un article\n[browserify for Webpack users](https://gist.github.com/substack/68f8d502be42d5cd4942)\n(qui est une réponse à la ressource\n[Webpack for browserify users](https://github.com/webpack/docs/wiki/webpack-for-browserify-users)\n).\n\nIl est clair que cela n'est pas aussi simple qu'avec Webpack qui est beaucoup\nplus flexible de par sa conception et ses objectifs initiaux.\n\nPar exemple, browserify pourra appliquer d'éventuelles transformations\nuniquement au code local et donc pas dans `node_modules/*`.\nCela peut être problématique et nous conduit forcément à finir par du\nbricolage si on veut consommer des assets de modules de manière transparente.\n\nNe parlons pas du\n[hot loading](http://webpack.github.io/docs/hot-module-replacement-with-webpack.html)\n(remplacement de code à la volée)\nqui n'est pas du tout facile à mettre en place (pour le moment) avec\nautre chose que Webpack.\n\n# Comment intégrer Webpack dans votre workflow ?\n\nDans un premier temps vous pourrez facilement intégrer Webpack en remplacement de\n[browserify](/fr/articles/js/browserify/) ou d'une éventuelle\nconcaténation via des plugins Gulp, Grunt, etc.\n\nDans un second temps, vous pourrez très certainement remplacer une partie de vos\nautres tâches pour ajuster/copier/déplacer vos assets (CSS, images...) et\nainsi réduire le code dédié à votre workflow. Il se pourrait alors que votre\nutilisation d'un task-runner soit maintenant si réduite que vous pourriez vous\nen passez en utilisant simplement\n[des scripts npm](http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/).\n\nSi jamais vous êtes limité, [vous pourrez bien entendu créer votre propre\n commande](/fr/articles/npm/utilitaire-cli/), qui sera réutilisable dans\nn'importe quel contexte.\n\n# Webpack en pratique\n\nQuelques ressources pour vous y mettre :\n\n- Un premier [exemple détaillé de configuration et d'utilisation](/fr/articles/js/webpack/premier-exemple)\nbasé sur notre retour d'expérience.\n\nEn anglais :\n\n- [Tutoriel officiel](http://webpack.github.io/docs/tutorials/getting-started/)\n- [Slides d'introduction](http://okonet.ru/viennajs-webpack-introduction/)\n- [\"How to\" webpack](https://github.com/petehunt/webpack-howto)\n\n[Webpack possède une documentation](http://webpack.github.io/docs)\nassez fournie, mais pas vraiment facile à aborder lorsqu'on découvre le projet.\nAussi, n'hésitez pas à nous poser vos questions en commentaires.\n","__filename":"fr/articles/js/webpack/index.md","__url":"/fr/articles/js/webpack/","__resourceUrl":"/fr/articles/js/webpack/index.html","__dataUrl":"/fr/articles/js/webpack/index.html.c9afe0125138e4539b57eb0db3d812a9.json"}