{"head":{"layout":"Post","comments":true,"date":"2015-07-21","title":"Premier exemple d'utilisation de Webpack","tags":["javascript","webpack","task-runner"],"authors":["MoOx"],"header":{"image":"../index.jpg","credit":"http://webpack.github.io/","linearGradient":"160deg, rgb(204, 51, 51), rgba(204, 51, 51, .6)"},"description":"Si vous êtes intéressé par les problématiques que peut résoudre Webpack, vous serez sûrement intéressé par cette petite configuration…"},"body":"<p>Si vous êtes intéressé par\n<a href=\"/fr/articles/js/webpack/\">les problématiques que peut résoudre Webpack</a>,\nvous serez sûrement intéressé par cette petite configuration détaillée, qui vous\npermettra de faire vos premiers pas avec cet outil.</p>\n<p>Nous allons mettre en place une configuration assez basique qui\nva permettre :</p>\n<ul>\n<li>d'avoir une partie JavaScript pour votre application/site web,</li>\n<li>de consommer vos CSS en tant que modules,</li>\n<li>de consommer les assets de vos CSS en tant que module (images, fonts...),</li>\n<li>d'avoir un fichier JS, un fichier CSS et vos assets à côté.</li>\n</ul>\n<p><em>Note: si vous êtes sur une application JavaScript, vous ne serez pas obligé\nd'utiliser la partie pour l'extraction de la CSS en fichier.\nEn effet, Webpack consomme tout ce qui est possible en JavaScript.\nLes styles peuvent être introduit via des balises <code>&#x3C;styles></code> dynamiquement\n(via le <code>style-loader</code>).\nL'extraction prend du sens si vous avez un rendu serveur et que vous souhaitez\navoir des styles au plus tôt, via une CSS dediée.</em></p>\n<p>La configuration de Webpack se fait via un fichier JavaScript.\nPar défaut, il doit être nommé <code>webpack.config.js</code>.\nNe tournons pas autour du pot et voyons un fichier de configuration\ncorrespondant à ce que nous venons de décrire.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>)\n<span class=\"hljs-keyword\">var</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"webpack\"</span>)\n<span class=\"hljs-keyword\">var</span> ExtractTextPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"extract-text-webpack-plugin\"</span>)\n\n<span class=\"hljs-comment\">// on peut passer à notre commande de build l'option --production</span>\n<span class=\"hljs-comment\">// on récupère sa valeur ici en tant que booléen</span>\n<span class=\"hljs-keyword\">var</span> production = process.argv.indexOf(<span class=\"hljs-string\">\"--production\"</span>) > <span class=\"hljs-number\">-1</span>\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-comment\">// nos points d'entrée, par clé</span>\n  <span class=\"hljs-comment\">// (on peut en définir plusieurs)</span>\n  entry: {\n    <span class=\"hljs-attr\">index</span>: [\n      <span class=\"hljs-string\">\"./src/index.js\"</span>,\n    ],\n  },\n\n  <span class=\"hljs-comment\">// description de nos sorties</span>\n  output: {\n    <span class=\"hljs-comment\">// ./dist</span>\n    path: path.join(__dirname, <span class=\"hljs-string\">\"dist\"</span>),\n    <span class=\"hljs-comment\">// nous aurons (vu notre point d'entrée)</span>\n    <span class=\"hljs-comment\">// - dist/index.js</span>\n    filename: <span class=\"hljs-string\">\"[name].js\"</span>,\n    <span class=\"hljs-comment\">// notre base url</span>\n    publicPath: <span class=\"hljs-string\">\"/\"</span>,\n  },\n\n  <span class=\"hljs-attr\">resolve</span>: {\n    <span class=\"hljs-comment\">// ici, on peut ajouter nos extensions à résoudre lors d'un require()</span>\n    <span class=\"hljs-comment\">// on va rester simple en n'autorisant rien, ou .js(on) (comme en nodejs et</span>\n    <span class=\"hljs-comment\">// browserify)</span>\n    extensions: [\n      <span class=\"hljs-string\">\"\"</span>,\n      <span class=\"hljs-string\">\".js\"</span>,\n      <span class=\"hljs-string\">\".json\"</span>,\n    ],\n  },\n\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-comment\">// liste de nos loaders</span>\n    <span class=\"hljs-comment\">// ! \\\\ à noter que les loaders sont exécutés en ordre inverse</span>\n    <span class=\"hljs-comment\">// les premiers en dernier, en utilisant la sortie du suivant</span>\n    loaders: [\n      {\n        <span class=\"hljs-comment\">// pour tous les fichiers qui finissent par .js</span>\n        test: <span class=\"hljs-regexp\">/\\.js$/</span>,\n        <span class=\"hljs-comment\">// ... en prenant bien soin d'exclure les node_modules</span>\n        exclude: <span class=\"hljs-regexp\">/node_modules/</span>,\n\n        <span class=\"hljs-comment\">// on ajoute les loaders babel et eslint</span>\n        <span class=\"hljs-comment\">// à vous de voir ce que vous aurez besoin</span>\n        <span class=\"hljs-comment\">// (\"rien\" est une option tout à fait valable si vous codez en ES5</span>\n        <span class=\"hljs-comment\">// sans linter)</span>\n        loaders: [\n          <span class=\"hljs-string\">\"babel\"</span>,\n          <span class=\"hljs-string\">\"eslint\"</span>,\n        ],\n\n        <span class=\"hljs-comment\">// à noter que l'on peut définir les loaders de cette façon</span>\n        <span class=\"hljs-comment\">// loader: \"babel!eslint\",</span>\n\n        <span class=\"hljs-comment\">// à noter aussi, Webpack va tenter de loader des modules ayant dans</span>\n        <span class=\"hljs-comment\">// leur nom \"-loader\". Si ce n'était pas le cas, ou que votre loader</span>\n        <span class=\"hljs-comment\">// ne comporte pas -loader, vous pouvez spécifier le nom entier :</span>\n        <span class=\"hljs-comment\">// loader: \"babel-loader!eslint-loader\",</span>\n      },\n      <span class=\"hljs-comment\">// à l'inverse de node et browserify, Webpack ne gère pas les json</span>\n      <span class=\"hljs-comment\">// nativement, il faut donc un loader pour que cela soit transparent</span>\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.json$/</span>,\n        <span class=\"hljs-attr\">loaders</span>: [\n          <span class=\"hljs-string\">\"json\"</span>,\n        ],\n      },\n      {\n        <span class=\"hljs-comment\">// pour nos CSS, on va utiliser un plugin un peu particulier</span>\n        <span class=\"hljs-comment\">// qui va nous permettre de require() nos CSS comme un module</span>\n        <span class=\"hljs-comment\">// mais qui va tout de même permettre de sortir tout cela dans un seul</span>\n        <span class=\"hljs-comment\">// fichier .css pour la production</span>\n        <span class=\"hljs-comment\">// (selon un paramètre qu'on définira ci-dessous)</span>\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        <span class=\"hljs-comment\">// cette méthode possède 2 paramètres :</span>\n        <span class=\"hljs-comment\">// + loaders à utiliser si ce module est désactivé</span>\n        <span class=\"hljs-comment\">// + loaders à utiliser dans tous les cas en amont</span>\n        loader: ExtractTextPlugin.extract(\n          <span class=\"hljs-comment\">// si on extract pas, on utilisera le loader suivant</span>\n          <span class=\"hljs-comment\">// (ce module chargera les styles dans des tags &#x3C;style>, suffisant</span>\n          <span class=\"hljs-comment\">// en mode dév)</span>\n          <span class=\"hljs-comment\">// en production vous devrez vous charger d'utiliser un</span>\n          <span class=\"hljs-comment\">// &#x3C;link rel=\"stylesheet\" ...</span>\n          <span class=\"hljs-string\">\"style\"</span>,\n          <span class=\"hljs-comment\">// dans tous les cas, on utilisera cssnext ainsi que le loader CSS</span>\n          <span class=\"hljs-comment\">// de base (celui-ci permet de gérer les ressources dans le CSS</span>\n          <span class=\"hljs-comment\">// en temps que modules: images, font etc)</span>\n          <span class=\"hljs-string\">\"css!cssnext\"</span>\n        ),\n        <span class=\"hljs-comment\">// Si vous n'avez pas besoin d'avoir une CSS à part, vous pouvez</span>\n        <span class=\"hljs-comment\">// simplement supprimer la partie \"loader\" ci-dessus et utiliser plutôt</span>\n        <span class=\"hljs-comment\">// loaders: [</span>\n        <span class=\"hljs-comment\">//  \"style\",</span>\n        <span class=\"hljs-comment\">//  \"css\",</span>\n        <span class=\"hljs-comment\">//  \"cssnext\",</span>\n        <span class=\"hljs-comment\">// ],</span>\n        <span class=\"hljs-comment\">// À noter que dans ce cas, il vous faudra supprimer le plugin</span>\n        <span class=\"hljs-comment\">// ExtractTextPlugin dans la liste plus bas</span>\n      },\n      <span class=\"hljs-comment\">// pour la suite, on va rester simple :</span>\n      <span class=\"hljs-comment\">// un require() en utilisant le file-loader retournera une string avec</span>\n      <span class=\"hljs-comment\">// le nom du fichier et (le plus important) copiera le fichier suivant</span>\n      <span class=\"hljs-comment\">// le paramètre \"name\" dans l'output.path que nous avons défini tout</span>\n      <span class=\"hljs-comment\">// au début de notre configuration.</span>\n      <span class=\"hljs-comment\">// Notez qu'il dégagera la partie context du nom lors du retour en string</span>\n      <span class=\"hljs-comment\">// et la remplacera par le l'output.path défini pour la copie.</span>\n      {\n        <span class=\"hljs-comment\">// on chargera tous les formats d'images qui nous intéressent en tant</span>\n        <span class=\"hljs-comment\">// que fichiers.</span>\n        test: <span class=\"hljs-regexp\">/\\.(ico|jpe?g|png|gif)$/</span>,\n        <span class=\"hljs-attr\">loaders</span>: [\n          <span class=\"hljs-string\">\"file?name=[path][name].[ext]&#x26;context=./src\"</span>,\n          <span class=\"hljs-comment\">// Vous remarquerez ici la méthode utilisée pour définir</span>\n          <span class=\"hljs-comment\">// des options pour les loaders. Il en existe d'autres avec les</span>\n          <span class=\"hljs-comment\">// versions les plus récentes en utilisant la clé \"query\"</span>\n        ],\n      },\n      {\n        <span class=\"hljs-comment\">// idem pour les fonts</span>\n        test: <span class=\"hljs-regexp\">/\\.(woff|ttf|otf|eot\\?#.+|svg#.+)$/</span>,\n        <span class=\"hljs-attr\">loaders</span>: [\n          <span class=\"hljs-string\">\"file?name=[path][name].[ext]&#x26;context=./src\"</span>,\n        ],\n      },\n      {\n        <span class=\"hljs-comment\">// ici on se permet de loader des fichiers html et txt tels quels</span>\n        test: <span class=\"hljs-regexp\">/\\.(html|txt)$/</span>,\n        <span class=\"hljs-attr\">loaders</span>: [\n          <span class=\"hljs-string\">\"file?name=[path][name].[ext]&#x26;context=./src\"</span>,\n        ],\n      },\n    ],\n  },\n\n  <span class=\"hljs-comment\">// en plus des loaders, qui premettent eux de modifier et/ou d'exploiter le</span>\n  <span class=\"hljs-comment\">// contenu des modules, nous avons des plugins, plus globaux au processus</span>\n  plugins: (\n    [\n      <span class=\"hljs-comment\">// une partie importante dans notre cas : on active l'extraction CSS (en</span>\n      <span class=\"hljs-comment\">// production seulement)</span>\n      <span class=\"hljs-keyword\">new</span> ExtractTextPlugin(<span class=\"hljs-string\">\"[name].css\"</span>, {<span class=\"hljs-attr\">disable</span>: !production}),\n\n      <span class=\"hljs-comment\">// ce plugin permet de transformer les clés passés en dur dans les</span>\n      <span class=\"hljs-comment\">// modules ainsi vous pourrez faire dans votre code js</span>\n      <span class=\"hljs-comment\">// if (__PROD__) { ... }</span>\n      <span class=\"hljs-keyword\">new</span> webpack.DefinePlugin({\n        <span class=\"hljs-attr\">__PROD__</span>: production\n      }),\n    ]\n    <span class=\"hljs-comment\">// en production, on peut rajouter des plugins pour optimiser</span>\n    .concat(\n      production\n      ? [\n        <span class=\"hljs-comment\">// ici on rajoute uglify.js pour compresser nos sorties</span>\n        <span class=\"hljs-comment\">// (vous remarquerez que certain plugins sont directement livrés dans</span>\n        <span class=\"hljs-comment\">// le package webpack).</span>\n        <span class=\"hljs-keyword\">new</span> webpack.optimize.UglifyJsPlugin({\n          <span class=\"hljs-attr\">compress</span>: {\n            <span class=\"hljs-attr\">warnings</span>: <span class=\"hljs-literal\">false</span>,\n          },\n        }),\n      ]\n      : []\n    )\n  ),\n\n  <span class=\"hljs-comment\">// certains modules permettent de définir des options en dehors de la</span>\n  <span class=\"hljs-comment\">// définition des loaders</span>\n  cssnext: {\n    <span class=\"hljs-attr\">sourcemap</span>: !production,\n    <span class=\"hljs-attr\">compress</span>: production,\n  },\n}</code></pre>\n<p><em>Ce fichier est à peu près ce que nous utilisons pour notre site à l'heure où\nest écrit cet article.</em></p>\n<p>Une fois Webpack mis en place, vous aurez bien moins l'impression de bricoler\nsurtout quand il s'agit de consommer des assets de modules tiers (par exemple\nFont Awesome).</p>\n<p>Sachez que vous pouvez très facilement écrire vos propres loaders pour wrapper\nl'utilisation d'un outil qui n'aurait pas encore de loader.\n<a href=\"https://github.com/cssnext/cssnext-loader/blob/master/index.js\">Exemple du loader cssnext</a>.</p>\n<h2 id=\"utilisation\"><a href=\"#utilisation\" class=\"phenomic-HeadingAnchor\">#</a>Utilisation</h2>\n<p>Il y a plusieurs façon d'utiliser maintenant notre configuration, la plus simple\nétant surement via CLI :</p>\n<pre><code class=\"hljs language-console\"><span class=\"hljs-variable\">$ </span>npm install webpack\n<span class=\"hljs-variable\">$ </span>webpack</code></pre>\n<p>Cela devrait suffire à s'occuper de notre configuration. Cette commande comporte\nbien entendu tout un tas d'options qui correspondent souvent à ce que nous\navons défini juste avant.\nCela étant dit, il parait plus maintenable de gérer une fichier plutôt qu'une\nligne de commande de 3 km.</p>\n<p>Vous devriez avoir ainsi tout le résultat dans <code>dist/</code>.</p>\n<p><em>Note: Si vous rencontrez des erreurs du type\n<code>Error: Cannot resolve module 'file'</code>, c'est tout simplement que vous n'avez pas\ninstallé les loaders nécessaire. En l'occurence il faudrait installer le\n<code>file-loader</code>.</em></p>\n<p>Pour avoir tous les loaders nécessaires comme dans l'exemple ci-dessus:</p>\n<pre><code class=\"hljs language-console\">$ npm <span class=\"hljs-selector-tag\">i</span> -D babel-loader eslint-loader babel-eslint\n$ npm <span class=\"hljs-selector-tag\">i</span> -D json-loader\n$ npm <span class=\"hljs-selector-tag\">i</span> -D style-loader css-loader cssnext-loader\n$ npm <span class=\"hljs-selector-tag\">i</span> -D file-loader</code></pre>\n<p><em>Note à propos de babel et eslint: pour le moment, il vous faudra spécifier dans\nvotre configuration eslint: <code>parser: babel-eslint</code>.</em></p>\n<p>Il y a tout un tas de façon d'utiliser Webpack via une tripotée de plugins\n(Gulp, Grunt, etc.) mais nous allons voir justement ici comment ne pas avoir\nrecours à ces solutions, ce qui nous permettra ainsi de s'alléger.</p>\n<h3 id=\"utilisation-en-développment\"><a href=\"#utilisation-en-d%C3%A9veloppment\" class=\"phenomic-HeadingAnchor\">#</a>Utilisation en développment</h3>\n<p>Webpack CLI possède une option <code>--watch</code> qui va surveiller les sources et mettre\nà jour tout le nécessaire à la moindre modification.\nÀ la différence de browserify, cette fonctionnalité est dans le core et très\nbien intégré.\nDe plus, le cache de Webpack est plutôt bien foutu. La première compilation peut\nparaître un peu lente, mais la suite est vraiment au top.</p>\n<pre><code class=\"hljs language-console\">$ webpack <span class=\"hljs-comment\">--watch -d</span></code></pre>\n<p>L'option <code>-d</code> permet d'activer les source maps.</p>\n<p>À côté de ces options, Webpack va plus loin.</p>\n<p>En développement, nous avons besoin de servir toutes les ressources que notre\nprocessus va gérer.\nPlutôt que d'utiliser le système de fichier classique, abusé par Grunt et tout\nde même utilisé par Gulp &#x26; co, Webpack fournit un <code>webpack-dev-server</code>.</p>\n<p>Ce petit serveur local permettra de servir tout ce dont nous avons besoin\n(nos JS, CSS, images, etc.) sans avoir recours au système de fichiers.</p>\n<p>Comme pour la commande <code>webpack</code>, le serveur de développement propose aussi\nune CLI basée sur l'option <code>--watch</code> mais sans l'inconvénient de l'écriture sur\ndisque :</p>\n<pre><code class=\"hljs language-console\">$ webpack-dev-server <span class=\"hljs-comment\">--content-base dist/</span></code></pre>\n<p><em>Source: <a href=\"http://webpack.github.io/docs/webpack-dev-server.html\">http://webpack.github.io/docs/webpack-dev-server.html</a></em></p>\n<p>Une fois que votre serveur est démarré, pourrez tester que votre point d'entrée\nmarche avec <code>http://localhost:8080/index.js</code>.</p>\n<p>Il existe bien entendu une API, que nous utilisons à l'heure actuelle sur notre\nsite, afin d'ajuster notre configuration Webpack en développement, pour\nd'ajouter des fonctionnalités comme le \"hot loading\".</p>\n<p>Vous avez à votre disposition\n<a href=\"https://github.com/putaindecode/putaindecode.io/blob/2c1a8f23ec05768960617625f592ea30ed6e2062/scripts/webpack-dev-server.js\">notre script dev-server</a>\n(écrit en ES6/7), ainsi que son utilisation\n<a href=\"https://github.com/putaindecode/putaindecode.io/blob/2c1a8f23ec05768960617625f592ea30ed6e2062/scripts/build.js#L154-L159\">dans notre build</a>.</p>\n<p><em>Note : pour avoir une éventuelle version plus à jour, regardez l'historique de\nces fichiers au cas où nous ayons poussé des ajustements (ou remplacer le hash\npar \"master\" dans l'url et priez).</em></p>\n<h4 id=\"hot-reloading\"><a href=\"#hot-reloading\" class=\"phenomic-HeadingAnchor\">#</a>Hot (re)loading</h4>\n<p>Ce serveur possède bien entendu des fonctionnalités similaires au classique\n\"livereload\", appelé <em>hot mode</em> (ou hot loading).</p>\n<p>Tout comme pour le livereload, il faut intégrer dans sa page un script\nparticulier. Il y a plusieurs façons de faire :</p>\n<ul>\n<li>intégrer <code>http://localhost:8080/webpack-dev-server.js</code> via un tag script</li>\n<li>ajouter <code>webpack/hot/dev-server</code> dans les tableaux des points d'entrées</li>\n</ul>\n<p><em>Source: <a href=\"http://webpack.github.io/docs/webpack-dev-server.html#hot-mode\">http://webpack.github.io/docs/webpack-dev-server.html#hot-mode</a></em></p>\n<p>Notre script dev-server référencé juste avant s'occupe d'ajouter la ressource\nautomatiquement en mode dev.</p>\n<p>À la différence d'un simple livereload, ce hot loading permet des choses qu'on\naurait jusqu'alors pas vraiment imaginées, comme du hot reload de JavaScript de\ncomposant React (sans rafraichissment complet de page, donc sans perte d'état).</p>\n<p><strong>Vous êtes invité à regarder la vidéo que vous trouverez sur la page du\n<a href=\"https://github.com/gaearon/react-hot-loader\">react-hot-loader</a>.</strong></p>\n<p>Nous n'irons pas plus loin sur ce hot mode, car il nécessiterait un articlé dédié\n(non pas que ce soit compliqué mais plus parce que c'est un sujet à part).</p>\n<h3 id=\"utilisation-en-production\"><a href=\"#utilisation-en-production\" class=\"phenomic-HeadingAnchor\">#</a>Utilisation en production</h3>\n<pre><code class=\"hljs language-console\">$ webpack <span class=\"hljs-comment\">--production</span></code></pre>\n<p>Notre configuration détecte l'option <code>--production</code> et ajuste déjà en\nconséquence.\nIl faut éventuellement utiliser la variable prévue pour ajuster vos loaders s'il\npropose des options d'optimisation.</p>\n<p>Maintenant, il n'y aura plus qu'à voir tout le résultat dans <code>dist/</code>.</p>\n<hr>\n<p>Nous avons vu ici un exemple assez simple qui peut être utilisé pour un site web\nou une appplication simple.</p>\n<p>Une question se pose alors :</p>\n<blockquote>\n<p>À la vue de ce que peut gérer Webpack et ses loaders, est-il pertinent de\ncontinuer à utiliser des task runners pour nos assets et compagnie ?</p>\n</blockquote>\n<p><strong>La réponse est non.</strong> 😱</p>\n<p>Vous verrez assez rapidement que vous devriez pourvoir tout jeter à la poubelle.\nSans trop de regrets, puisque Webpack va vous permettre de consommer tout ce que\nnous avions l'habitude de bricoler / copier / ajuster...</p>\n<p>Nous l'avons fait pour notre site, pourquoi pas vous ?</p>\n<p>Et notre interface n'as pas changé d'un poil puisque nous utilisons toujours les\nmêmes commandes via les\n<a href=\"https://docs.npmjs.com/misc/scripts\">npm scripts</a>:</p>\n<ul>\n<li><code>npm start</code> pour dév</li>\n<li><code>npm run build --production</code> avant de déployer en production.</li>\n</ul>\n<p>Il existe encore beaucoup de leviers à toucher dans le cas\nd'applications full JavaScript afin d'améliorer bien des points.</p>\n<p>Vous trouverez facilement tout un tas de\n<a href=\"https://duckduckgo.com/?q=webpack+boilerplate\">boilerplates Webpack</a>\navec des améliorations diverses et variées selon vos besoins.</p>\n<p>Soyez curieux !</p>\n","rawBody":"\nSi vous êtes intéressé par\n[les problématiques que peut résoudre Webpack](/fr/articles/js/webpack/),\nvous serez sûrement intéressé par cette petite configuration détaillée, qui vous\npermettra de faire vos premiers pas avec cet outil.\n\nNous allons mettre en place une configuration assez basique qui\nva permettre :\n\n- d'avoir une partie JavaScript pour votre application/site web,\n- de consommer vos CSS en tant que modules,\n- de consommer les assets de vos CSS en tant que module (images, fonts...),\n- d'avoir un fichier JS, un fichier CSS et vos assets à côté.\n\n_Note: si vous êtes sur une application JavaScript, vous ne serez pas obligé\nd'utiliser la partie pour l'extraction de la CSS en fichier.\nEn effet, Webpack consomme tout ce qui est possible en JavaScript.\nLes styles peuvent être introduit via des balises `<styles>` dynamiquement\n(via le `style-loader`).\nL'extraction prend du sens si vous avez un rendu serveur et que vous souhaitez\navoir des styles au plus tôt, via une CSS dediée._\n\nLa configuration de Webpack se fait via un fichier JavaScript.\nPar défaut, il doit être nommé `webpack.config.js`.\nNe tournons pas autour du pot et voyons un fichier de configuration\ncorrespondant à ce que nous venons de décrire.\n\n```js\nvar path = require(\"path\")\nvar webpack = require(\"webpack\")\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\")\n\n// on peut passer à notre commande de build l'option --production\n// on récupère sa valeur ici en tant que booléen\nvar production = process.argv.indexOf(\"--production\") > -1\n\nmodule.exports = {\n  // nos points d'entrée, par clé\n  // (on peut en définir plusieurs)\n  entry: {\n    index: [\n      \"./src/index.js\",\n    ],\n  },\n\n  // description de nos sorties\n  output: {\n    // ./dist\n    path: path.join(__dirname, \"dist\"),\n    // nous aurons (vu notre point d'entrée)\n    // - dist/index.js\n    filename: \"[name].js\",\n    // notre base url\n    publicPath: \"/\",\n  },\n\n  resolve: {\n    // ici, on peut ajouter nos extensions à résoudre lors d'un require()\n    // on va rester simple en n'autorisant rien, ou .js(on) (comme en nodejs et\n    // browserify)\n    extensions: [\n      \"\",\n      \".js\",\n      \".json\",\n    ],\n  },\n\n  module: {\n    // liste de nos loaders\n    // ! \\\\ à noter que les loaders sont exécutés en ordre inverse\n    // les premiers en dernier, en utilisant la sortie du suivant\n    loaders: [\n      {\n        // pour tous les fichiers qui finissent par .js\n        test: /\\.js$/,\n        // ... en prenant bien soin d'exclure les node_modules\n        exclude: /node_modules/,\n\n        // on ajoute les loaders babel et eslint\n        // à vous de voir ce que vous aurez besoin\n        // (\"rien\" est une option tout à fait valable si vous codez en ES5\n        // sans linter)\n        loaders: [\n          \"babel\",\n          \"eslint\",\n        ],\n\n        // à noter que l'on peut définir les loaders de cette façon\n        // loader: \"babel!eslint\",\n\n        // à noter aussi, Webpack va tenter de loader des modules ayant dans\n        // leur nom \"-loader\". Si ce n'était pas le cas, ou que votre loader\n        // ne comporte pas -loader, vous pouvez spécifier le nom entier :\n        // loader: \"babel-loader!eslint-loader\",\n      },\n      // à l'inverse de node et browserify, Webpack ne gère pas les json\n      // nativement, il faut donc un loader pour que cela soit transparent\n      {\n        test: /\\.json$/,\n        loaders: [\n          \"json\",\n        ],\n      },\n      {\n        // pour nos CSS, on va utiliser un plugin un peu particulier\n        // qui va nous permettre de require() nos CSS comme un module\n        // mais qui va tout de même permettre de sortir tout cela dans un seul\n        // fichier .css pour la production\n        // (selon un paramètre qu'on définira ci-dessous)\n        test: /\\.css$/,\n        // cette méthode possède 2 paramètres :\n        // + loaders à utiliser si ce module est désactivé\n        // + loaders à utiliser dans tous les cas en amont\n        loader: ExtractTextPlugin.extract(\n          // si on extract pas, on utilisera le loader suivant\n          // (ce module chargera les styles dans des tags <style>, suffisant\n          // en mode dév)\n          // en production vous devrez vous charger d'utiliser un\n          // <link rel=\"stylesheet\" ...\n          \"style\",\n          // dans tous les cas, on utilisera cssnext ainsi que le loader CSS\n          // de base (celui-ci permet de gérer les ressources dans le CSS\n          // en temps que modules: images, font etc)\n          \"css!cssnext\"\n        ),\n        // Si vous n'avez pas besoin d'avoir une CSS à part, vous pouvez\n        // simplement supprimer la partie \"loader\" ci-dessus et utiliser plutôt\n        // loaders: [\n        //  \"style\",\n        //  \"css\",\n        //  \"cssnext\",\n        // ],\n        // À noter que dans ce cas, il vous faudra supprimer le plugin\n        // ExtractTextPlugin dans la liste plus bas\n      },\n      // pour la suite, on va rester simple :\n      // un require() en utilisant le file-loader retournera une string avec\n      // le nom du fichier et (le plus important) copiera le fichier suivant\n      // le paramètre \"name\" dans l'output.path que nous avons défini tout\n      // au début de notre configuration.\n      // Notez qu'il dégagera la partie context du nom lors du retour en string\n      // et la remplacera par le l'output.path défini pour la copie.\n      {\n        // on chargera tous les formats d'images qui nous intéressent en tant\n        // que fichiers.\n        test: /\\.(ico|jpe?g|png|gif)$/,\n        loaders: [\n          \"file?name=[path][name].[ext]&context=./src\",\n          // Vous remarquerez ici la méthode utilisée pour définir\n          // des options pour les loaders. Il en existe d'autres avec les\n          // versions les plus récentes en utilisant la clé \"query\"\n        ],\n      },\n      {\n        // idem pour les fonts\n        test: /\\.(woff|ttf|otf|eot\\?#.+|svg#.+)$/,\n        loaders: [\n          \"file?name=[path][name].[ext]&context=./src\",\n        ],\n      },\n      {\n        // ici on se permet de loader des fichiers html et txt tels quels\n        test: /\\.(html|txt)$/,\n        loaders: [\n          \"file?name=[path][name].[ext]&context=./src\",\n        ],\n      },\n    ],\n  },\n\n  // en plus des loaders, qui premettent eux de modifier et/ou d'exploiter le\n  // contenu des modules, nous avons des plugins, plus globaux au processus\n  plugins: (\n    [\n      // une partie importante dans notre cas : on active l'extraction CSS (en\n      // production seulement)\n      new ExtractTextPlugin(\"[name].css\", {disable: !production}),\n\n      // ce plugin permet de transformer les clés passés en dur dans les\n      // modules ainsi vous pourrez faire dans votre code js\n      // if (__PROD__) { ... }\n      new webpack.DefinePlugin({\n        __PROD__: production\n      }),\n    ]\n    // en production, on peut rajouter des plugins pour optimiser\n    .concat(\n      production\n      ? [\n        // ici on rajoute uglify.js pour compresser nos sorties\n        // (vous remarquerez que certain plugins sont directement livrés dans\n        // le package webpack).\n        new webpack.optimize.UglifyJsPlugin({\n          compress: {\n            warnings: false,\n          },\n        }),\n      ]\n      : []\n    )\n  ),\n\n  // certains modules permettent de définir des options en dehors de la\n  // définition des loaders\n  cssnext: {\n    sourcemap: !production,\n    compress: production,\n  },\n}\n```\n\n_Ce fichier est à peu près ce que nous utilisons pour notre site à l'heure où\nest écrit cet article._\n\nUne fois Webpack mis en place, vous aurez bien moins l'impression de bricoler\nsurtout quand il s'agit de consommer des assets de modules tiers (par exemple\nFont Awesome).\n\nSachez que vous pouvez très facilement écrire vos propres loaders pour wrapper\nl'utilisation d'un outil qui n'aurait pas encore de loader.\n[Exemple du loader cssnext](https://github.com/cssnext/cssnext-loader/blob/master/index.js).\n\n## Utilisation\n\nIl y a plusieurs façon d'utiliser maintenant notre configuration, la plus simple\nétant surement via CLI :\n\n```console\n$ npm install webpack\n$ webpack\n```\n\nCela devrait suffire à s'occuper de notre configuration. Cette commande comporte\nbien entendu tout un tas d'options qui correspondent souvent à ce que nous\navons défini juste avant.\nCela étant dit, il parait plus maintenable de gérer une fichier plutôt qu'une\nligne de commande de 3 km.\n\nVous devriez avoir ainsi tout le résultat dans `dist/`.\n\n_Note: Si vous rencontrez des erreurs du type\n`Error: Cannot resolve module 'file'`, c'est tout simplement que vous n'avez pas\ninstallé les loaders nécessaire. En l'occurence il faudrait installer le\n`file-loader`._\n\nPour avoir tous les loaders nécessaires comme dans l'exemple ci-dessus:\n\n```console\n$ npm i -D babel-loader eslint-loader babel-eslint\n$ npm i -D json-loader\n$ npm i -D style-loader css-loader cssnext-loader\n$ npm i -D file-loader\n```\n_Note à propos de babel et eslint: pour le moment, il vous faudra spécifier dans\nvotre configuration eslint: `parser: babel-eslint`._\n\nIl y a tout un tas de façon d'utiliser Webpack via une tripotée de plugins\n(Gulp, Grunt, etc.) mais nous allons voir justement ici comment ne pas avoir\nrecours à ces solutions, ce qui nous permettra ainsi de s'alléger.\n\n### Utilisation en développment\n\nWebpack CLI possède une option `--watch` qui va surveiller les sources et mettre\nà jour tout le nécessaire à la moindre modification.\nÀ la différence de browserify, cette fonctionnalité est dans le core et très\nbien intégré.\nDe plus, le cache de Webpack est plutôt bien foutu. La première compilation peut\nparaître un peu lente, mais la suite est vraiment au top.\n\n```console\n$ webpack --watch -d\n```\n\nL'option `-d` permet d'activer les source maps.\n\nÀ côté de ces options, Webpack va plus loin.\n\nEn développement, nous avons besoin de servir toutes les ressources que notre\nprocessus va gérer.\nPlutôt que d'utiliser le système de fichier classique, abusé par Grunt et tout\nde même utilisé par Gulp & co, Webpack fournit un `webpack-dev-server`.\n\nCe petit serveur local permettra de servir tout ce dont nous avons besoin\n(nos JS, CSS, images, etc.) sans avoir recours au système de fichiers.\n\nComme pour la commande `webpack`, le serveur de développement propose aussi\nune CLI basée sur l'option `--watch` mais sans l'inconvénient de l'écriture sur\ndisque :\n\n```console\n$ webpack-dev-server --content-base dist/\n```\n\n_Source: http://webpack.github.io/docs/webpack-dev-server.html_\n\nUne fois que votre serveur est démarré, pourrez tester que votre point d'entrée\nmarche avec `http://localhost:8080/index.js`.\n\nIl existe bien entendu une API, que nous utilisons à l'heure actuelle sur notre\nsite, afin d'ajuster notre configuration Webpack en développement, pour\nd'ajouter des fonctionnalités comme le \"hot loading\".\n\nVous avez à votre disposition\n[notre script dev-server](https://github.com/putaindecode/putaindecode.io/blob/2c1a8f23ec05768960617625f592ea30ed6e2062/scripts/webpack-dev-server.js)\n(écrit en ES6/7), ainsi que son utilisation\n[dans notre build](https://github.com/putaindecode/putaindecode.io/blob/2c1a8f23ec05768960617625f592ea30ed6e2062/scripts/build.js#L154-L159).\n\n_Note : pour avoir une éventuelle version plus à jour, regardez l'historique de\nces fichiers au cas où nous ayons poussé des ajustements (ou remplacer le hash\npar \"master\" dans l'url et priez)._\n\n#### Hot (re)loading\n\nCe serveur possède bien entendu des fonctionnalités similaires au classique\n\"livereload\", appelé _hot mode_ (ou hot loading).\n\nTout comme pour le livereload, il faut intégrer dans sa page un script\nparticulier. Il y a plusieurs façons de faire :\n\n- intégrer `http://localhost:8080/webpack-dev-server.js` via un tag script\n- ajouter `webpack/hot/dev-server` dans les tableaux des points d'entrées\n\n_Source: http://webpack.github.io/docs/webpack-dev-server.html#hot-mode_\n\nNotre script dev-server référencé juste avant s'occupe d'ajouter la ressource\nautomatiquement en mode dev.\n\nÀ la différence d'un simple livereload, ce hot loading permet des choses qu'on\naurait jusqu'alors pas vraiment imaginées, comme du hot reload de JavaScript de\ncomposant React (sans rafraichissment complet de page, donc sans perte d'état).\n\n**Vous êtes invité à regarder la vidéo que vous trouverez sur la page du\n[react-hot-loader](https://github.com/gaearon/react-hot-loader).**\n\nNous n'irons pas plus loin sur ce hot mode, car il nécessiterait un articlé dédié\n(non pas que ce soit compliqué mais plus parce que c'est un sujet à part).\n\n### Utilisation en production\n\n```console\n$ webpack --production\n```\n\nNotre configuration détecte l'option `--production` et ajuste déjà en\nconséquence.\nIl faut éventuellement utiliser la variable prévue pour ajuster vos loaders s'il\npropose des options d'optimisation.\n\nMaintenant, il n'y aura plus qu'à voir tout le résultat dans `dist/`.\n\n---\n\nNous avons vu ici un exemple assez simple qui peut être utilisé pour un site web\nou une appplication simple.\n\nUne question se pose alors :\n\n> À la vue de ce que peut gérer Webpack et ses loaders, est-il pertinent de\ncontinuer à utiliser des task runners pour nos assets et compagnie ?\n\n**La réponse est non.** 😱\n\nVous verrez assez rapidement que vous devriez pourvoir tout jeter à la poubelle.\nSans trop de regrets, puisque Webpack va vous permettre de consommer tout ce que\nnous avions l'habitude de bricoler / copier / ajuster...\n\nNous l'avons fait pour notre site, pourquoi pas vous ?\n\nEt notre interface n'as pas changé d'un poil puisque nous utilisons toujours les\nmêmes commandes via les\n[npm scripts](https://docs.npmjs.com/misc/scripts):\n\n- `npm start` pour dév\n- `npm run build --production` avant de déployer en production.\n\nIl existe encore beaucoup de leviers à toucher dans le cas\nd'applications full JavaScript afin d'améliorer bien des points.\n\nVous trouverez facilement tout un tas de\n[boilerplates Webpack](https://duckduckgo.com/?q=webpack+boilerplate)\navec des améliorations diverses et variées selon vos besoins.\n\nSoyez curieux !\n","__filename":"fr/articles/js/webpack/premier-exemple/index.md","__url":"/fr/articles/js/webpack/premier-exemple/","__resourceUrl":"/fr/articles/js/webpack/premier-exemple/index.html","__dataUrl":"/fr/articles/js/webpack/premier-exemple/index.html.e03466dc35fe6b51a6e549d0c0e21d74.json"}