{"head":{"layout":"Post","comments":true,"date":"2014-10-27","title":"Flux, qu'est-ce que c'est ?","tags":["javascript","reactjs","flux"],"authors":["bloodyowl"],"description":"Allez, tant pis, on saute l'intro et on entre directement dans le vif du sujet (on n'a pas que ça à foutre, après tout). La petite histoire…"},"body":"<p>Allez, tant pis, on saute l'intro et on entre directement dans le vif du sujet (on n'a pas que ça à foutre, après tout).</p>\n<h2 id=\"la-petite-histoire\"><a href=\"#la-petite-histoire\" class=\"phenomic-HeadingAnchor\">#</a>La petite histoire</h2>\n<p>Il était une fois un gros site web <em>que s'apelorio</em> Facebook. Qui dit Facebook, dit webapp plus grosse que la plus grosse de tes copines (<em>no offense</em> <sup><a href=\"#foonote-1\">1</a></sup>) ; et du coup, propension à se retrouver submergé de bugs plus élevée.</p>\n<p>Les ingénieurs front-end de Facebook, confrontés à une codebase de plus en plus bordélique (personne ne voulant toucher certaines parties de celle-ci) ont dû repenser la structure des composants les plus cruciaux.</p>\n<p>Face à ce besoin, ces développeurs sont donc parvenus à deux solutions :</p>\n<ul>\n<li><a href=\"/fr/articles/js/react/\">ReactJS</a></li>\n<li>Flux</li>\n</ul>\n<p>Flux n'est pas un framework, mais simplement une architecture, une sorte de <em>guideline</em> qui résout pas mal de problèmes ayant pu apparaître avec les divers bibliothèques et frameworks MV* apparus lors des dernières années.</p>\n<h2 id=\"flux-lexplication-claire\"><a href=\"#flux-lexplication-claire\" class=\"phenomic-HeadingAnchor\">#</a>Flux, l'explication claire</h2>\n<p>Flux comporte 4 concepts :</p>\n<ul>\n<li>les <strong>actions</strong>, qu'elles proviennent du serveur ou d'une interaction utilisateur ;</li>\n<li>le <strong>dispatcher</strong> dans lequel sont envoyées les actions que ce dernier transmet <em>à qui veut</em>, un peu comme un <code>EventEmitter</code> global ;</li>\n<li>les <strong>stores</strong>, qui sont l'équivalent du <code>model</code> de l'architecture MVC, ils contiennent les données, et réagissent aux actions que le dispatcher leur transmet ;</li>\n<li>les <strong>views</strong>, qui s'occupent du rendu des données dans le DOM, et de lancer des actions lorsque l'utilisateur effectue certaines actions.</li>\n</ul>\n<p>Jusque-là, rien de bien fou. C'est dans leur manière d'interagir que la particularité se dessine :</p>\n<figure>\n  <img src=\"flux.jpg\" alt=\"\" />\n  <figcaption>Oh bah dis donc, ça va toujours dans le même sens</figcaption>\n</figure>\n<p>En effet, le <em>flux</em> en question est unidirectionnel. Pour faire simple, on procède ainsi :</p>\n<p>On définit une action via un <strong>action creator</strong> (on passera toujours par ces action-creators pour signaler une action) :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// actions/BasketActions.js</span>\n<span class=\"hljs-keyword\">var</span> AppDispatcher = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../AppDispacher\"</span>)\n<span class=\"hljs-comment\">/*\n  On garde un dictionnaire des types d'actions\n  afin d'avoir un fichier donnant une vision\n  globale de toutes les interactions de l'app.\n */</span>\n<span class=\"hljs-keyword\">var</span> ActionTypes = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../constants\"</span>).ActionTypes\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">addToBasket</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">productId</span>)</span>{\n    AppDispatcher.handleViewAction({\n      <span class=\"hljs-attr\">type</span> : ActionTypes.ADD_TO_BASKET,\n      <span class=\"hljs-attr\">productId</span> : productId\n    })\n  }\n}</code></pre>\n<p>On lancera par la suite cette action lorsque l'utilisateur aura cliqué sur un certain bouton, dans la vue concernée.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// components/Product.jsx</span>\n<span class=\"hljs-keyword\">var</span> React = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"react/addons\"</span>)\n<span class=\"hljs-keyword\">var</span> BasketActions = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../actions/BasketActions\"</span>)\n\n<span class=\"hljs-keyword\">var</span> Button = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"./common/Button.jsx\"</span>)\n\n<span class=\"hljs-keyword\">var</span> Product = React.createClass({\n  <span class=\"hljs-attr\">addToBasket</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">productId</span>)</span>{\n    BasketActions.addToBasket(productId)\n  },\n  <span class=\"hljs-attr\">render</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"Product\"</span>></span>\n        {/* rest of the component*/}\n        </span>&#x3C;Button\n          onClick={this.addToBasket.bind(this.props.productId)}\n          label=\"Add to basket\"\n        />\n      &#x3C;/div><span class=\"xml\">\n    )\n  }\n})\n\nmodule.exports = Product</span></code></pre>\n<p>Dès lors, à chaque clic sur le bouton en question, l'action <code>ADD_TO_BASKET</code> sera passée au dispatcher, qui le signalera aux stores.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// stores/BasketStore.js</span>\n<span class=\"hljs-keyword\">var</span> AppDispatcher = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../AppDispatcher\"</span>)\n<span class=\"hljs-keyword\">var</span> ActionTypes = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../constants\"</span>).ActionTypes\n<span class=\"hljs-keyword\">var</span> API = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../api\"</span>)\n\n<span class=\"hljs-keyword\">var</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../utils/merge\"</span>)\n<span class=\"hljs-keyword\">var</span> Store = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../utils/store\"</span>)\n\n<span class=\"hljs-keyword\">var</span> _store = {\n  <span class=\"hljs-attr\">products</span> : []\n}\n\n<span class=\"hljs-keyword\">var</span> BasketStore = merge(Store, {\n  <span class=\"hljs-comment\">/*\n    Ici, on `register` un callback sur l'AppDispatcher,\n    ce qui signifie qu'on verra passer toutes les actions\n    de l'app.\n   */</span>\n  dispatchToken : AppDispatcher.register(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">payload</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> action = payload.action\n    <span class=\"hljs-keyword\">switch</span>(action.type) {\n      <span class=\"hljs-keyword\">case</span> ActionTypes.ADD_TO_BASKET:\n          <span class=\"hljs-comment\">/*\n             L'API va ajouter le produit et lancer une\n             action `BASKET_UPDATED` dès que le serveur a répondu.\n          */</span>\n        API.addToBasket(action.productId)\n        <span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">case</span> ActionTypes.BASKET_UPDATED:\n          <span class=\"hljs-comment\">/*\n            L'API a répondu, on peut stocker la réponse\n            et signaler le changement\n            aux vues récupérant ces données.\n          */</span>\n          _store = action.reponse\n          BasketStore.emitChange()\n        <span class=\"hljs-keyword\">break</span>\n      <span class=\"hljs-keyword\">default</span>:\n        <span class=\"hljs-keyword\">break</span>\n    }\n  })\n})\n\n<span class=\"hljs-built_in\">module</span>.exports = BasketStore</code></pre>\n<p>La vue, quant à elle, sera notifiée du changement, et effectuera un <code>render()</code> :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// components/Basket.jsx</span>\n<span class=\"hljs-keyword\">var</span> React = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"react/addons\"</span>)\n<span class=\"hljs-keyword\">var</span> BasketActions = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../actions/BasketActions\"</span>)\n<span class=\"hljs-keyword\">var</span> BasketStore = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../stores/BasketStore\"</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getState</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">return</span> BasketStore.getStore()\n}\n\n<span class=\"hljs-keyword\">var</span> Product = React.createClass({\n  <span class=\"hljs-attr\">getInitialState</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> getState()\n  },\n  <span class=\"hljs-attr\">_onStoreChange</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-comment\">/*\n      À chaque changement du store, on update naïvement\n      le component et on laisse le virtual DOM faire son job.\n    */</span>\n    <span class=\"hljs-keyword\">this</span>.setState(getState())\n  },\n  <span class=\"hljs-attr\">componentDidMount</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-comment\">/*\n      On écoute le store uniquement lorsque le\n      component est monté.\n     */</span>\n    BasketStore.addChangeListener(<span class=\"hljs-keyword\">this</span>._onStoreChange)\n  },\n  <span class=\"hljs-attr\">componentWillUnmount</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-comment\">/*\n      Et on arrête d'écouter quand il ne l'est plus.\n     */</span>\n    BasketStore.removeChangeListener(<span class=\"hljs-keyword\">this</span>._onStoreChange)\n  },\n  <span class=\"hljs-attr\">render</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"Basket\"</span>></span>\n        </span>&#x3C;div className=\"Basket-count\">\n          {this.state.products.length + \" products\"}\n        &#x3C;/div><span class=\"xml\">\n        {/* rest of the component */}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    )\n  }\n})\n\n<span class=\"hljs-built_in\">module</span>.exports = Product</code></pre>\n<p>Tout cela peut sembler relativement verbeux, mais il faut préciser deux choses :</p>\n<ul>\n<li>les exemples ici le sont volontairement pour la démonstration, et il est aisément faisable d'utiliser un <code>StoreMixin</code> simplifier la déclaration des <code>class</code> React ;</li>\n<li>pour ce qui est du reste, notamment stocker les noms d'actions dans un objet partagé dans l'app, c'est pour rendre plus idiomatique et cohérente la façon dont on code l'app, et pour simplifier ses <em>refactoring</em>.</li>\n</ul>\n<h2 id=\"ce-quil-faut-savoir-sur-lalliance-flux--react\"><a href=\"#ce-quil-faut-savoir-sur-lalliance-flux--react\" class=\"phenomic-HeadingAnchor\">#</a>Ce qu'il faut savoir sur l'alliance Flux + React</h2>\n<p>Si React et Flux vont si bien ensemble, c'est que l'approche de rendu \"naïf\" de React (comprendre \"React s'en fout de ce qui change, il appelle <code>render</code> à chaque changement\") permet de réduire la logique à écrire dans les Stores, et donc de simplifier très fortement la codebase de l'app.</p>\n<p>Lorsque qu'un ou plusieurs stores composent l'état d'un state React, alors à chaque changement de l'un de ces stores, tous les composants React concernés et leurs enfants vont appeler leur méthode <code>render()</code>. Afin d'éviter des appels superflus à ces méthodes, React donne la possibilité de tester soi-même s'il est nécessaire de mettre à jour le component en déclarant une méthode <code>shouldComponentUpdate</code> retournant un <code>boolean</code> qui stipulera si oui ou non il est nécessaire d'appeler <code>render()</code>.</p>\n<h2 id=\"tldr\"><a href=\"#tldr\" class=\"phenomic-HeadingAnchor\">#</a>tl;dr</h2>\n<ul>\n<li>Flux, c'est comme du MVC en plus simple, et avec moins de bugs</li>\n<li>L'architecture est unidirectionnelle</li>\n<li>On raisonne en actions, qui sont déclenchées par la vue ou le serveur</li>\n<li>Toutes les actions passent par le dispatcher</li>\n<li>Seuls les stores signalent aux vues qu'il faut se mettre à jour</li>\n</ul>\n<p>Bisous bisous.</p>\n<p><img src=\"http://media.giphy.com/media/lxd2cZ2BkM4IE/giphy.gif\" alt=\"angulol\"></p>\n<p>Pour aller un peu plus loin :</p>\n<ul>\n<li><a href=\"https://gist.github.com/bloodyowl/b41532cf3627c560b57e\">Les sources des exemples</a> contenant le dispatcher et les constants ;</li>\n<li><a href=\"http://facebook.github.io/flux/docs/overview.html#content\">La doc de Flux</a> ;</li>\n<li><a href=\"https://github.com/facebook/flux\">Le repository Flux</a> et ses différents exemples.</li>\n</ul>\n<p><small>\n<a id=\"foonote-1\"></a>1: <a href=\"https://www.youtube.com/watch?v=jRzv9gep5Ng&#x26;t=4m\">Référence utile (<code>ntm install reference</code>)</a>\n</small></p>\n","rawBody":"\nAllez, tant pis, on saute l'intro et on entre directement dans le vif du sujet (on n'a pas que ça à foutre, après tout).\n\n## La petite histoire\n\nIl était une fois un gros site web *que s'apelorio* Facebook. Qui dit Facebook, dit webapp plus grosse que la plus grosse de tes copines (*no offense* <sup>[1](#foonote-1)</sup>) ; et du coup, propension à se retrouver submergé de bugs plus élevée.\n\nLes ingénieurs front-end de Facebook, confrontés à une codebase de plus en plus bordélique (personne ne voulant toucher certaines parties de celle-ci) ont dû repenser la structure des composants les plus cruciaux.\n\nFace à ce besoin, ces développeurs sont donc parvenus à deux solutions :\n\n- [ReactJS](/fr/articles/js/react/)\n- Flux\n\nFlux n'est pas un framework, mais simplement une architecture, une sorte de *guideline* qui résout pas mal de problèmes ayant pu apparaître avec les divers bibliothèques et frameworks MV* apparus lors des dernières années.\n\n## Flux, l'explication claire\n\nFlux comporte 4 concepts :\n\n- les **actions**, qu'elles proviennent du serveur ou d'une interaction utilisateur ;\n- le **dispatcher** dans lequel sont envoyées les actions que ce dernier transmet *à qui veut*, un peu comme un `EventEmitter` global ;\n- les **stores**, qui sont l'équivalent du `model` de l'architecture MVC, ils contiennent les données, et réagissent aux actions que le dispatcher leur transmet ;\n- les **views**, qui s'occupent du rendu des données dans le DOM, et de lancer des actions lorsque l'utilisateur effectue certaines actions.\n\nJusque-là, rien de bien fou. C'est dans leur manière d'interagir que la particularité se dessine :\n\n<figure>\n  <img src=\"flux.jpg\" alt=\"\" />\n  <figcaption>Oh bah dis donc, ça va toujours dans le même sens</figcaption>\n</figure>\n\nEn effet, le *flux* en question est unidirectionnel. Pour faire simple, on procède ainsi :\n\nOn définit une action via un **action creator** (on passera toujours par ces action-creators pour signaler une action) :\n\n```javascript\n// actions/BasketActions.js\nvar AppDispatcher = require(\"../AppDispacher\")\n/*\n  On garde un dictionnaire des types d'actions\n  afin d'avoir un fichier donnant une vision\n  globale de toutes les interactions de l'app.\n */\nvar ActionTypes = require(\"../constants\").ActionTypes\n\nmodule.exports = {\n  addToBasket : function(productId){\n    AppDispatcher.handleViewAction({\n      type : ActionTypes.ADD_TO_BASKET,\n      productId : productId\n    })\n  }\n}\n```\n\nOn lancera par la suite cette action lorsque l'utilisateur aura cliqué sur un certain bouton, dans la vue concernée.\n\n```javascript\n// components/Product.jsx\nvar React = require(\"react/addons\")\nvar BasketActions = require(\"../actions/BasketActions\")\n\nvar Button = require(\"./common/Button.jsx\")\n\nvar Product = React.createClass({\n  addToBasket : function(productId){\n    BasketActions.addToBasket(productId)\n  },\n  render : function(){\n    return (\n      <div className=\"Product\">\n        {/* rest of the component*/}\n        <Button\n          onClick={this.addToBasket.bind(this.props.productId)}\n          label=\"Add to basket\"\n        />\n      </div>\n    )\n  }\n})\n\nmodule.exports = Product\n```\n\nDès lors, à chaque clic sur le bouton en question, l'action `ADD_TO_BASKET` sera passée au dispatcher, qui le signalera aux stores.\n\n```javascript\n// stores/BasketStore.js\nvar AppDispatcher = require(\"../AppDispatcher\")\nvar ActionTypes = require(\"../constants\").ActionTypes\nvar API = require(\"../api\")\n\nvar merge = require(\"../utils/merge\")\nvar Store = require(\"../utils/store\")\n\nvar _store = {\n  products : []\n}\n\nvar BasketStore = merge(Store, {\n  /*\n    Ici, on `register` un callback sur l'AppDispatcher,\n    ce qui signifie qu'on verra passer toutes les actions\n    de l'app.\n   */\n  dispatchToken : AppDispatcher.register(function(payload){\n    var action = payload.action\n    switch(action.type) {\n      case ActionTypes.ADD_TO_BASKET:\n          /*\n             L'API va ajouter le produit et lancer une\n             action `BASKET_UPDATED` dès que le serveur a répondu.\n          */\n        API.addToBasket(action.productId)\n        break\n      case ActionTypes.BASKET_UPDATED:\n          /*\n            L'API a répondu, on peut stocker la réponse\n            et signaler le changement\n            aux vues récupérant ces données.\n          */\n          _store = action.reponse\n          BasketStore.emitChange()\n        break\n      default:\n        break\n    }\n  })\n})\n\nmodule.exports = BasketStore\n```\n\nLa vue, quant à elle, sera notifiée du changement, et effectuera un `render()` :\n\n```javascript\n// components/Basket.jsx\nvar React = require(\"react/addons\")\nvar BasketActions = require(\"../actions/BasketActions\")\nvar BasketStore = require(\"../stores/BasketStore\")\n\nfunction getState(){\n  return BasketStore.getStore()\n}\n\nvar Product = React.createClass({\n  getInitialState : function(){\n    return getState()\n  },\n  _onStoreChange : function(){\n    /*\n      À chaque changement du store, on update naïvement\n      le component et on laisse le virtual DOM faire son job.\n    */\n    this.setState(getState())\n  },\n  componentDidMount : function(){\n    /*\n      On écoute le store uniquement lorsque le\n      component est monté.\n     */\n    BasketStore.addChangeListener(this._onStoreChange)\n  },\n  componentWillUnmount : function(){\n    /*\n      Et on arrête d'écouter quand il ne l'est plus.\n     */\n    BasketStore.removeChangeListener(this._onStoreChange)\n  },\n  render : function(){\n    return (\n      <div className=\"Basket\">\n        <div className=\"Basket-count\">\n          {this.state.products.length + \" products\"}\n        </div>\n        {/* rest of the component */}\n      </div>\n    )\n  }\n})\n\nmodule.exports = Product\n```\n\nTout cela peut sembler relativement verbeux, mais il faut préciser deux choses :\n\n- les exemples ici le sont volontairement pour la démonstration, et il est aisément faisable d'utiliser un `StoreMixin` simplifier la déclaration des `class` React ;\n- pour ce qui est du reste, notamment stocker les noms d'actions dans un objet partagé dans l'app, c'est pour rendre plus idiomatique et cohérente la façon dont on code l'app, et pour simplifier ses *refactoring*.\n\n## Ce qu'il faut savoir sur l'alliance Flux + React\n\nSi React et Flux vont si bien ensemble, c'est que l'approche de rendu \"naïf\" de React (comprendre \"React s'en fout de ce qui change, il appelle `render` à chaque changement\") permet de réduire la logique à écrire dans les Stores, et donc de simplifier très fortement la codebase de l'app.\n\nLorsque qu'un ou plusieurs stores composent l'état d'un state React, alors à chaque changement de l'un de ces stores, tous les composants React concernés et leurs enfants vont appeler leur méthode `render()`. Afin d'éviter des appels superflus à ces méthodes, React donne la possibilité de tester soi-même s'il est nécessaire de mettre à jour le component en déclarant une méthode `shouldComponentUpdate` retournant un `boolean` qui stipulera si oui ou non il est nécessaire d'appeler `render()`.\n\n## tl;dr\n\n- Flux, c'est comme du MVC en plus simple, et avec moins de bugs\n- L'architecture est unidirectionnelle\n- On raisonne en actions, qui sont déclenchées par la vue ou le serveur\n- Toutes les actions passent par le dispatcher\n- Seuls les stores signalent aux vues qu'il faut se mettre à jour\n\nBisous bisous.\n\n![angulol](http://media.giphy.com/media/lxd2cZ2BkM4IE/giphy.gif)\n\n\nPour aller un peu plus loin :\n\n- [Les sources des exemples](https://gist.github.com/bloodyowl/b41532cf3627c560b57e) contenant le dispatcher et les constants ;\n- [La doc de Flux](http://facebook.github.io/flux/docs/overview.html#content) ;\n- [Le repository Flux](https://github.com/facebook/flux) et ses différents exemples.\n\n<small>\n  <a id=\"foonote-1\"></a>1: [Référence utile (`ntm install reference`)](https://www.youtube.com/watch?v=jRzv9gep5Ng&t=4m)\n</small>\n","__filename":"fr/articles/js/flux/index.md","__url":"/fr/articles/js/flux/","__resourceUrl":"/fr/articles/js/flux/index.html","__dataUrl":"/fr/articles/js/flux/index.html.cb5a11532df3b5be1ead111706cedd4f.json"}