{"head":{"layout":"Post","comments":true,"date":"2015-05-01","title":"Implémenter Flux","tags":["javascript","reactjs","flux"],"authors":["bloodyowl"],"description":"Si vous n'avez pas encore lu l'introduction à flux, n'hésitez pas à jeter un œil avant de lire ce post. Une des choses importantes avec…"},"body":"<p>Si vous n'avez pas encore lu\n<a href=\"/fr/articles/js/flux/\">l'introduction à flux</a>,\nn'hésitez pas à jeter un œil avant de lire ce post.</p>\n<p>Une des choses importantes avec Flux, et pourtant pas évidentes après lecture\n<a href=\"https://github.com/facebook/flux/tree/master/examples/\">des exemples officiels</a>,\nc'est que les stores doivent être des instances, et non des singletons que\nles composants récupèrent en dépendance directe.</p>\n<p>La raison de cette nécessité, c'est la possibilité de servir une page\npre-rendue sur le serveur. En soi, vous devez impérativement amorcer votre\ndispatcher et vos stores dans le scope de la requête, ou vos utilisateurs\nse retrouveront avec des stores remplis de data ne leur appartenant pas.</p>\n<p>Puisque l'intérêt d'une solution comme react dans le cadre du server-side\nrendering est d'utiliser les mêmes composants que sur le client, il faut\nque notre approche soit convenable sur nos deux environements.</p>\n<p>La question dès lors est «comment passer les stores à nos composants react\nmaintenant qu'ils ne sont plus des dépendances directes ?».</p>\n<p>On va les passer via les <code>props</code> de parent à enfant ? lolnope.\nLa plupart de nos composants n'auront pas conscience de la présence de ces\nstores, et seront utilisés dans différents contextes. Et c'est justement\nl'API <code>context</code> que nous allons utiliser.</p>\n<p>Cette API est assez simple, en soi, le <code>context</code> d'un composant est construit\nau fur et à mesure que ses ancêtres décident d'y ajouter de la data.</p>\n<p>Exemple simple :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> React, {Component, PropTypes} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  <span class=\"hljs-comment\">// on définit les types de ce que l'on souhaite passer dans</span>\n  <span class=\"hljs-comment\">// le contexte</span>\n  <span class=\"hljs-keyword\">static</span> childContextTypes = {\n    <span class=\"hljs-attr\">foo</span>: PropTypes.string,\n  }\n\n  <span class=\"hljs-comment\">// on crée une méthode qui retourne ce contexte</span>\n  getChildContext() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-keyword\">this</span>.props.foo,\n    }\n  }\n\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"putainde-App\"</span>></span>\n        </span>&#x3C;Container /><span class=\"xml\">\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    )\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Container</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  <span class=\"hljs-comment\">// les contextes sont *merged*, ce qui nous permet de le construire</span>\n  <span class=\"hljs-comment\">// sans se soucier du niveau auquel sera notre composant.</span>\n  <span class=\"hljs-keyword\">static</span> childContextTypes = {\n    <span class=\"hljs-attr\">bar</span>: PropTypes.string,\n  }\n\n  getChildContext() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">\"oh hai\"</span>,\n    }\n  }\n\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"putainde-Container\"</span>></span>\n        </span>&#x3C;IntermediaryComponent /><span class=\"xml\">\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    )\n  }\n\n}\n\n<span class=\"hljs-comment\">// ce composant n'a pas besoin de savoir que ses enfants on besoin</span>\n<span class=\"hljs-comment\">// de certaines propriétés du contexte</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">IntermediaryComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Content</span> /></span>\n    )\n  }\n}\n\nclass Content extends Component {\n\n  // pour chaque composant utilisant des propriétés du contexte,\n  // on stipule ce dont on a besoin\n  static contextTypes = {\n    foo: PropTypes.string,\n    bar: PropTypes.string,\n  }\n\n  render() {\n    return (\n      </span>&#x3C;div className=\"putainde-Content\">\n        &#x3C;div className=\"putainde-Content-line\">\n          &#x3C;strong>foo&#x3C;/strong>: {this.context.foo}\n        &#x3C;/div>\n        &#x3C;div className=\"putainde-Content-line\">\n          &#x3C;strong>bar&#x3C;/strong>: {this.context.bar}\n        &#x3C;/div>\n      &#x3C;/div><span class=\"xml\">\n    )\n  }\n\n}\n\nReact.render(\n  </span>&#x3C;App foo={Date.now()} />,\n  document.getElementById(\"App\")\n)</code></pre>\n<p>Cela nous donne cet output :\n<a href=\"http://jsbin.com/zitohibaze/1/\">http://jsbin.com/zitohibaze/1/</a></p>\n<p>Grâce à cette API, on peut créer des composants isolés, et dont les\ncomposants parents n'auront pas nécessairement besoin de connaître le\ncontexte.</p>\n<p>L'idée, pour en revenir à Flux, c'est de passer notre dispatcher dans\nce contexte, et de placer les stores dans le dispatcher au moment de\nl'amorce de l'app.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> dispatcher = <span class=\"hljs-keyword\">new</span> Dispatcher()\n\ndispatcher.registerStore(<span class=\"hljs-keyword\">new</span> SomeStore())\ndispatcher.registerStore(<span class=\"hljs-keyword\">new</span> SomeOtherStore())\n\nReact.render(\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">App</span> <span class=\"hljs-attr\">dispatcher</span>=<span class=\"hljs-string\">{dispatcher}</span> /></span>,\n  document.getElementById(\"App\")\n)</span></code></pre>\n<p>Désormais, pour avoir une API décente pour récuperer les données des stores,\non a deux principales solutions:</p>\n<ul>\n<li>utiliser un mixin</li>\n<li>utiliser un higher-order component</li>\n</ul>\n<p>Puisque la direction que prend l'API de React, à terme, est de ne plus\nfournir de mixins, et de laisser au TC39 le temps de prendre la bonne\ndécision sur la façon dont JavaScript traitera la composition ; il semble\nplus adéquat d'utiliser un higher-order component. Cela aura en plus\nl'avantage de rendre le composant récupérant les données <em>stateless</em>.</p>\n<p>Ce genre d'API ressemble à ça :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ComponentWithData</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n  <span class=\"hljs-keyword\">static</span> stores = {\n    <span class=\"hljs-comment\">// nom du store: nom de la prop souhaitée</span>\n    MyStore: <span class=\"hljs-string\">\"my_store\"</span>,\n  }\n\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n        {/* la data est passée via les props*/}\n        {this.props.my_store.foo}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n    )\n  }\n}\n\n<span class=\"hljs-comment\">// storeReceiver wrap `ComponentWithData` dans un higher-order component</span>\n<span class=\"hljs-comment\">// et se charge de récupérer le store dans le contexte pour les passer</span>\n<span class=\"hljs-comment\">// dans les props de `ComponentWithData`</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> storeReceiver(ComponentWithData)</code></pre>\n<p>Enfin, avec cette approche, les action creators que l'on voit dans les\nexemples de flux ne peuvent plus garder la même forme, puisqu'il ne doivent\nplus avoir le dispatcher comme dépendance directe (ce dernier étant une\ninstance). Du coup, ce sont désormais des fonctions pures :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> PostActions = {\n  getPost(slug) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">type</span>: ActionTypes.POST_GET,\n      <span class=\"hljs-attr\">slug</span>: slug,\n    }\n  },\n  receivePost(res) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">type</span>: ActionTypes.POST_RECEIVE,\n      res,\n    }\n  },\n  error(res) {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">type</span>: ActionTypes.POST_ERROR,\n      res,\n    }\n  },\n}</code></pre>\n<p>et nos composants utilisent :</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> React, {Component, PropTypes} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> PostActions <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"actions/PostActions\"</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyComponent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{\n\n  <span class=\"hljs-keyword\">static</span> contextTypes = {\n    <span class=\"hljs-attr\">dispatcher</span>: PropTypes.object,\n  }\n\n  <span class=\"hljs-keyword\">static</span> propTypes = {\n    <span class=\"hljs-attr\">slug</span>: PropTypes.string,\n    <span class=\"hljs-attr\">title</span>: PropTypes.title,\n  }\n\n  handleClick() {\n    <span class=\"hljs-keyword\">this</span>.context.dispatcher.dispatch(\n      PostActions.getPost(<span class=\"hljs-keyword\">this</span>.props.slug)\n    )\n  }\n\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>\n        <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =></span> this.handleClick()}>\n        {this.props.title}\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n    )\n  }\n}</code></pre>\n<p>Pour résumer, les avantages de cette approche sont :</p>\n<ul>\n<li>un meilleur découplage</li>\n<li>une isolation solide des composants</li>\n<li>la possibilité de pre-render sur le serveur</li>\n<li>une testabilité accrue, puisqu'il est simple d'utiliser un mock ou des\ninstances crées pour le test dans le contexte de nos composants.</li>\n</ul>\n<p>Bisous bisous.</p>\n","rawBody":"\nSi vous n'avez pas encore lu\n[l'introduction à flux](/fr/articles/js/flux/),\nn'hésitez pas à jeter un œil avant de lire ce post.\n\nUne des choses importantes avec Flux, et pourtant pas évidentes après lecture\n[des exemples officiels](https://github.com/facebook/flux/tree/master/examples/),\nc'est que les stores doivent être des instances, et non des singletons que\nles composants récupèrent en dépendance directe.\n\nLa raison de cette nécessité, c'est la possibilité de servir une page\npre-rendue sur le serveur. En soi, vous devez impérativement amorcer votre\ndispatcher et vos stores dans le scope de la requête, ou vos utilisateurs\nse retrouveront avec des stores remplis de data ne leur appartenant pas.\n\nPuisque l'intérêt d'une solution comme react dans le cadre du server-side\nrendering est d'utiliser les mêmes composants que sur le client, il faut\nque notre approche soit convenable sur nos deux environements.\n\nLa question dès lors est «comment passer les stores à nos composants react\nmaintenant qu'ils ne sont plus des dépendances directes ?».\n\nOn va les passer via les `props` de parent à enfant ? lolnope.\nLa plupart de nos composants n'auront pas conscience de la présence de ces\nstores, et seront utilisés dans différents contextes. Et c'est justement\nl'API `context` que nous allons utiliser.\n\nCette API est assez simple, en soi, le `context` d'un composant est construit\nau fur et à mesure que ses ancêtres décident d'y ajouter de la data.\n\nExemple simple :\n\n```javascript\nimport React, {Component, PropTypes} from \"react\"\n\nclass App extends Component {\n\n  // on définit les types de ce que l'on souhaite passer dans\n  // le contexte\n  static childContextTypes = {\n    foo: PropTypes.string,\n  }\n\n  // on crée une méthode qui retourne ce contexte\n  getChildContext() {\n    return {\n      foo: this.props.foo,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"putainde-App\">\n        <Container />\n      </div>\n    )\n  }\n}\n\nclass Container extends Component {\n\n  // les contextes sont *merged*, ce qui nous permet de le construire\n  // sans se soucier du niveau auquel sera notre composant.\n  static childContextTypes = {\n    bar: PropTypes.string,\n  }\n\n  getChildContext() {\n    return {\n      bar: \"oh hai\",\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"putainde-Container\">\n        <IntermediaryComponent />\n      </div>\n    )\n  }\n\n}\n\n// ce composant n'a pas besoin de savoir que ses enfants on besoin\n// de certaines propriétés du contexte\nclass IntermediaryComponent extends Component {\n  render() {\n    return (\n      <Content />\n    )\n  }\n}\n\nclass Content extends Component {\n\n  // pour chaque composant utilisant des propriétés du contexte,\n  // on stipule ce dont on a besoin\n  static contextTypes = {\n    foo: PropTypes.string,\n    bar: PropTypes.string,\n  }\n\n  render() {\n    return (\n      <div className=\"putainde-Content\">\n        <div className=\"putainde-Content-line\">\n          <strong>foo</strong>: {this.context.foo}\n        </div>\n        <div className=\"putainde-Content-line\">\n          <strong>bar</strong>: {this.context.bar}\n        </div>\n      </div>\n    )\n  }\n\n}\n\nReact.render(\n  <App foo={Date.now()} />,\n  document.getElementById(\"App\")\n)\n```\n\nCela nous donne cet output :\n[http://jsbin.com/zitohibaze/1/](http://jsbin.com/zitohibaze/1/)\n\nGrâce à cette API, on peut créer des composants isolés, et dont les\ncomposants parents n'auront pas nécessairement besoin de connaître le\ncontexte.\n\nL'idée, pour en revenir à Flux, c'est de passer notre dispatcher dans\nce contexte, et de placer les stores dans le dispatcher au moment de\nl'amorce de l'app.\n\n```javascript\nconst dispatcher = new Dispatcher()\n\ndispatcher.registerStore(new SomeStore())\ndispatcher.registerStore(new SomeOtherStore())\n\nReact.render(\n  <App dispatcher={dispatcher} />,\n  document.getElementById(\"App\")\n)\n```\n\nDésormais, pour avoir une API décente pour récuperer les données des stores,\non a deux principales solutions:\n\n- utiliser un mixin\n- utiliser un higher-order component\n\nPuisque la direction que prend l'API de React, à terme, est de ne plus\nfournir de mixins, et de laisser au TC39 le temps de prendre la bonne\ndécision sur la façon dont JavaScript traitera la composition ; il semble\nplus adéquat d'utiliser un higher-order component. Cela aura en plus\nl'avantage de rendre le composant récupérant les données *stateless*.\n\nCe genre d'API ressemble à ça :\n\n```javascript\nclass ComponentWithData extends Component {\n  static stores = {\n    // nom du store: nom de la prop souhaitée\n    MyStore: \"my_store\",\n  }\n\n  render() {\n    return (\n      <div>\n        {/* la data est passée via les props*/}\n        {this.props.my_store.foo}\n      </div>\n    )\n  }\n}\n\n// storeReceiver wrap `ComponentWithData` dans un higher-order component\n// et se charge de récupérer le store dans le contexte pour les passer\n// dans les props de `ComponentWithData`\nexport default storeReceiver(ComponentWithData)\n```\n\nEnfin, avec cette approche, les action creators que l'on voit dans les\nexemples de flux ne peuvent plus garder la même forme, puisqu'il ne doivent\nplus avoir le dispatcher comme dépendance directe (ce dernier étant une\ninstance). Du coup, ce sont désormais des fonctions pures :\n\n```javascript\nconst PostActions = {\n  getPost(slug) {\n    return {\n      type: ActionTypes.POST_GET,\n      slug: slug,\n    }\n  },\n  receivePost(res) {\n    return {\n      type: ActionTypes.POST_RECEIVE,\n      res,\n    }\n  },\n  error(res) {\n    return {\n      type: ActionTypes.POST_ERROR,\n      res,\n    }\n  },\n}\n```\n\net nos composants utilisent :\n\n```javascript\nimport React, {Component, PropTypes} from \"react\"\nimport PostActions from \"actions/PostActions\"\n\nclass MyComponent extends Component {\n\n  static contextTypes = {\n    dispatcher: PropTypes.object,\n  }\n\n  static propTypes = {\n    slug: PropTypes.string,\n    title: PropTypes.title,\n  }\n\n  handleClick() {\n    this.context.dispatcher.dispatch(\n      PostActions.getPost(this.props.slug)\n    )\n  }\n\n  render() {\n    return (\n      <button\n        onClick={() => this.handleClick()}>\n        {this.props.title}\n      </button>\n    )\n  }\n}\n```\n\nPour résumer, les avantages de cette approche sont :\n\n- un meilleur découplage\n- une isolation solide des composants\n- la possibilité de pre-render sur le serveur\n- une testabilité accrue, puisqu'il est simple d'utiliser un mock ou des\n  instances crées pour le test dans le contexte de nos composants.\n\nBisous bisous.\n","__filename":"fr/articles/js/flux/implementer/index.md","__url":"/fr/articles/js/flux/implementer/","__resourceUrl":"/fr/articles/js/flux/implementer/index.html","__dataUrl":"/fr/articles/js/flux/implementer/index.html.b5826b990ecda5186a06ff0092ec18e4.json"}