{"head":{"layout":"Post","comments":true,"date":"2015-06-02","title":"Introducción a cssnext","tags":["css","postcss"],"authors":["Macxim"],"header":{"credit":"https://www.flickr.com/photos/frinky/620935482"},"description":"Según la página oficial: cssnext es un transpiler que permite utilizar desde hoy la sintaxis CSS del mañana y transformar las…"},"body":"<p>Según la <a href=\"http://cssnext.io/\">página oficial</a>:</p>\n<blockquote>\n<p><strong>cssnext</strong> es un <em>transpiler</em> que permite utilizar desde hoy la sintaxis CSS del mañana y transformar las especificaciones CSS que aún no están implementadas en los navegadores más populares en CSS compatible.</p>\n</blockquote>\n<h2 id=\"¿qué-significa-esto-exactamente\"><a href=\"#%C2%BFqu%C3%A9-significa-esto-exactamente\" class=\"phenomic-HeadingAnchor\">#</a>¿Qué significa esto exactamente?</h2>\n<p>Desde que apareció CSS3, quizás hayas escuchado que el CSS se divide en varios documentos independientes llamados \"módulos\". Estos módulos pueden tener diferentes niveles de estabilidad y <a href=\"http://www.w3.org/Style/CSS/current-work#legend\">estados</a>. A los navegadores les puede requirir bastante tiempo poner en práctica dichos módulos y aún más al W3C atribuirles el estado final de <a href=\"http://www.w3.org/2005/10/Process-20051014/tr#RecsW3C\">Recomendación</a>.</p>\n<p>Con <strong>cssnext</strong> se puede usar la sintaxis de los <a href=\"http://www.xanthir.com/b4Ko0\">módulos CSS Nivel 4</a>, tales como <em>propiedades personalizadas (custom properties)</em> o <em>media queries personalizados</em>. <strong>cssnext</strong> va a transformar esta nueva y curiosa sintaxis en algo que el navegador será capaz de entender.</p>\n<p>En resumen, se <strong>adelanta al futuro</strong>.</p>\n<p>No sé vosotros, pero yo me considero alguien a quien le gusta experimentar con las últimas technologías y me parece que ¡esto mola bastante!</p>\n<p>No dejéis de echar un vistazo a la <a href=\"http://cssnext.io/features/\">lista de funciones</a>.</p>\n<h3 id=\"¿y-qué-pasa-con-el-preprocesador-css-que-estoy-utilizando-ahora\"><a href=\"#%C2%BFy-qu%C3%A9-pasa-con-el-preprocesador-css-que-estoy-utilizando-ahora\" class=\"phenomic-HeadingAnchor\">#</a>¿Y qué pasa con el preprocesador CSS que estoy utilizando ahora?</h3>\n<p>No os preocupéis más por los peligros de los mixins, @extend y el <em>nesting</em> infinito, en gran parte causados por el uso indebido e innecesario de estas herramientas.</p>\n<p>¿Adivinad qué? No necesitáis nada de esto.</p>\n<p>Deberiáis probar <strong>cssnext</strong> y volver al Vanilla CSS de toda la vida. Además, con una buena pizca de <a href=\"https://github.com/sturobson/BEM-resources\">metodología BEM</a>, os sentiréis <a href=\"http://philipwalton.com/articles/side-effects-in-css/\">vivos otra vez</a>.</p>\n<h2 id=\"ejemplos\"><a href=\"#ejemplos\" class=\"phenomic-HeadingAnchor\">#</a>Ejemplos</h2>\n<p>Echemos un vistazo a las funciones que <strong>cssnext</strong> nos ofrece por el momento.</p>\n<p>Ante todo, es conveniente consultar el <a href=\"http://cssnext.io/playground/\">playground en la página oficial</a>.</p>\n<h3 id=\"prefijos-de-navegadores-vendor-prefixes-automáticos\"><a href=\"#prefijos-de-navegadores-vendor-prefixes-autom%C3%A1ticos\" class=\"phenomic-HeadingAnchor\">#</a>Prefijos de navegadores (vendor prefixes) automáticos</h3>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.h1</span> {\n  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n  <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">1s</span>;\n}</code></pre>\n<p>Esto será transformado por <strong>cssnext</strong> gracias a Autoprefixer en:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.h1</span> {\n  <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n      <span class=\"hljs-attribute\">-ms-transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n          <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n  <span class=\"hljs-attribute\">-webkit-transition</span>: -webkit-transform <span class=\"hljs-number\">1s</span>;\n          <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">1s</span>;\n}</code></pre>\n<h3 id=\"propiedades-personalizadas-y-var-limitadas-a-root\"><a href=\"#propiedades-personalizadas-y-var-limitadas-a-root\" class=\"phenomic-HeadingAnchor\">#</a>Propiedades personalizadas y var() limitadas a <code>:root</code></h3>\n<p>También conocidas como las tan esperadas <a href=\"http://www.w3.org/TR/css-variables/\">variables CSS</a>.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-pseudo\">:root</span> {\n  <span class=\"hljs-attribute\">--primary-Color</span>:                 <span class=\"hljs-number\">#E86100</span>;\n  <span class=\"hljs-attribute\">--secondary-Color</span>:               <span class=\"hljs-number\">#2c3e50</span>;\n  <span class=\"hljs-attribute\">--r-Grid-baseFontSize</span>:           <span class=\"hljs-number\">1rem</span>;\n}</code></pre>\n<p>Podéis usarlas de esta manera:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.h1</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--primary-Color);\n}\n<span class=\"hljs-selector-class\">.h1</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--secondary-Color);\n}\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">var</span>(--r-Grid-baseFontSize);\n}</code></pre>\n<h3 id=\"media-queries-personalizadas\"><a href=\"#media-queries-personalizadas\" class=\"phenomic-HeadingAnchor\">#</a>Media Queries personalizadas</h3>\n<p>Para crear alias semánticos, claros y sencillos (<a href=\"http://dev.w3.org/csswg/mediaqueries/#custom-mq\">aquí tenéis la documentación</a>).</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">custom</span>-<span class=\"hljs-keyword\">media</span> --viewport-medium (width &#x3C;= <span class=\"hljs-number\">40rem</span>);\n@<span class=\"hljs-keyword\">custom</span>-<span class=\"hljs-keyword\">media</span> --viewport-large (max-width: <span class=\"hljs-number\">50em</span>);</code></pre>\n<p>Uso:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> (--viewport-medium) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">calc</span>(var(--fontSize) * <span class=\"hljs-number\">1.2</span>); }\n}\n@<span class=\"hljs-keyword\">media</span> (--viewport-large) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">calc</span>(var(--fontSize) * <span class=\"hljs-number\">1.4</span>); }\n}</code></pre>\n<p>Por ejemplo, digamos que:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-pseudo\">:root</span> {\n  <span class=\"hljs-attribute\">--fontSize</span>: <span class=\"hljs-number\">1.2rem</span>;\n}</code></pre>\n<p>El código generado sera el siguiente:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> (max-width: <span class=\"hljs-number\">40rem</span>) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.44rem</span>; }\n}\n@<span class=\"hljs-keyword\">media</span> (max-width: <span class=\"hljs-number\">50em</span>) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.68rem</span>; }\n}</code></pre>\n<h3 id=\"selectores-personalizados\"><a href=\"#selectores-personalizados\" class=\"phenomic-HeadingAnchor\">#</a>Selectores personalizados</h3>\n<p>Primero, podéis echar un ojo a las <a href=\"http://dev.w3.org/csswg/css-extensions/#custom-selectors\">especificaciones</a>.\nPongamos que queremos aplicar estilos a todos los títulos:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">custom</span>-<span class=\"hljs-keyword\">selector</span> :--heading h1, h2, h3, h4, h5, h6;\n\n<span class=\"hljs-selector-pseudo\">:--heading</span> {\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p>Esto va a generar el código siguiente:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">h1</span>,\n<span class=\"hljs-selector-tag\">h2</span>,\n<span class=\"hljs-selector-tag\">h3</span>,\n<span class=\"hljs-selector-tag\">h4</span>,\n<span class=\"hljs-selector-tag\">h5</span>,\n<span class=\"hljs-selector-tag\">h6</span> { margin-top; 0; }</code></pre>\n<h3 id=\"color\"><a href=\"#color\" class=\"phenomic-HeadingAnchor\">#</a><code>color()</code></h3>\n<p>Una sencilla <a href=\"http://dev.w3.org/csswg/css-color/#modifying-colors\">función color</a> para aplicar unos <em>ajustes de color</em> (tono, luminosidad, saturación, entre otros) a un color base.</p>\n<p>Ejemplos:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.class</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6);\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 red(+30) <span class=\"hljs-built_in\">green</span>(-50) <span class=\"hljs-built_in\">blue</span>(6%) <span class=\"hljs-built_in\">alpha</span>(.65));\n  <span class=\"hljs-attribute\">border-top-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 saturation(-8%) <span class=\"hljs-built_in\">whiteness</span>(+50%));\n  <span class=\"hljs-attribute\">border-right-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 lightness(5%) <span class=\"hljs-built_in\">blackness</span>(-25%));\n  <span class=\"hljs-attribute\">border-bottom-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 tint(80%));\n  <span class=\"hljs-attribute\">border-left-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 shade(75%));\n}</code></pre>\n<p>Este código de arriba será transformado en:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.class</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(43, 136, 230);\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(73, 86, 15, 0.65);\n  <span class=\"hljs-attribute\">border-top-color</span>: <span class=\"hljs-built_in\">rgb</span>(181, 201, 222);\n  <span class=\"hljs-attribute\">border-right-color</span>: <span class=\"hljs-built_in\">rgb</span>(3, 45, 87);\n  <span class=\"hljs-attribute\">border-bottom-color</span>: <span class=\"hljs-built_in\">rgb</span>(213, 231, 250);\n  <span class=\"hljs-attribute\">border-left-color</span>: <span class=\"hljs-built_in\">rgb</span>(11, 34, 58);\n}</code></pre>\n<p><strong>cssnext</strong> también ofrece las siguientes funciones relacionadas con los colores:</p>\n<h4 id=\"hwb\"><a href=\"#hwb\" class=\"phenomic-HeadingAnchor\">#</a>hwb()</h4>\n<p>Según las <a href=\"http://dev.w3.org/csswg/css-color/#the-hwb-notation\">especificaciones</a>, HWB (Tono-Blancura-Negrura - <em>Hue-Whiteness-Blackness</em>) es similar a HSL, pero resulta más fácil de uso para los humanos.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.title</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">hwb</span>(125, 32%, 47%);\n}</code></pre>\n<p>Resultado:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.title</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgb</span>(33, 135, 42);\n}</code></pre>\n<h4 id=\"gray\"><a href=\"#gray\" class=\"phenomic-HeadingAnchor\">#</a>gray()</h4>\n<p>Los grises son tan <a href=\"http://dev.w3.org/csswg/css-color/#grays\">guays</a> que tienen incluso una función dedicada.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">gray</span>(120, 50%);\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-built_in\">gray</span>(17%, 25%);\n}</code></pre>\n<p>Esto dará como resultado:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(120, 120, 120, 0.5);\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-built_in\">rgba</span>(43, 43, 43, 0.25);\n}</code></pre>\n<h4 id=\"rrggbbaa\"><a href=\"#rrggbbaa\" class=\"phenomic-HeadingAnchor\">#</a>#rrggbbaa</h4>\n<p><strong>cssnext</strong> transforma la <a href=\"http://dev.w3.org/csswg/css-color/#hex-notation\">notación hexadecimal</a> #RRGGBBAA y #RGBA en rgba().</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#5c69</span>;\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#C73D5C59</span>;\n}</code></pre>\n<p>Resultado:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(85, 204, 102, 0.6);\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(199, 61, 92, 0.34902);\n}</code></pre>\n<h4 id=\"rebeccapurple\"><a href=\"#rebeccapurple\" class=\"phenomic-HeadingAnchor\">#</a>rebeccapurple</h4>\n<p>Transforma el color <a href=\"https://github.com/postcss/postcss-color-rebeccapurple#why-this-plugin-\"><code>rebeccapurple</code></a> en <code>rgb(102, 51, 153)</code>.</p>\n<h3 id=\"propiedades-de-filtros\"><a href=\"#propiedades-de-filtros\" class=\"phenomic-HeadingAnchor\">#</a>Propiedades de filtros</h3>\n<p>¡Un <em>nuevo</em> mundo de <a href=\"http://www.w3.org/TR/filter-effects/\">modificaciones de imágenes</a> se abre ante vosotros!</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.awesome-Image</span> {\n  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">sepia</span>(.7) <span class=\"hljs-built_in\">hue-rotate</span>(23deg);\n}\n\n<span class=\"hljs-selector-class\">.awesome-Picture</span> {\n  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">blur</span>(8px);\n}</code></pre>\n<p>Lo anterior será transformado en:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.awesome-Image</span> {\n  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'data:image/svg+xml;charset=utf-8,&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\">&#x3C;filter id=\"filter\">&#x3C;feColorMatrix type=\"matrix\" color-interpolation-filters=\"sRGB\" values=\"0.5751000000000001 0.5383 0.1323 0 0 0.24429999999999996 0.7802000000000001 0.11760000000000001 0 0 0.1904 0.3738 0.39170000000000005 0 0 0 0 0 1 0\" />&#x3C;feColorMatrix type=\"hueRotate\" color-interpolation-filters=\"sRGB\" values=\"23\" />&#x3C;/filter>&#x3C;/svg>#filter'</span>);\n  <span class=\"hljs-attribute\">-webkit-filter</span>: <span class=\"hljs-built_in\">sepia</span>(.7) <span class=\"hljs-built_in\">hue-rotate</span>(23deg);\n          <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">sepia</span>(.7) <span class=\"hljs-built_in\">hue-rotate</span>(23deg);\n}\n\n<span class=\"hljs-selector-class\">.awesome-Picture</span> {\n  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'data:image/svg+xml;charset=utf-8,&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\">&#x3C;filter id=\"filter\">&#x3C;feGaussianBlur stdDeviation=\"8\" />&#x3C;/filter>&#x3C;/svg>#filter'</span>);\n  <span class=\"hljs-attribute\">-webkit-filter</span>: <span class=\"hljs-built_in\">blur</span>(8px);\n          <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">blur</span>(8px);\n}</code></pre>\n<h3 id=\"unidades-rem\"><a href=\"#unidades-rem\" class=\"phenomic-HeadingAnchor\">#</a>Unidades rem</h3>\n<p>Nada extraordinario aquí, se genera un <strong><em>fallback</em> en píxeles para las unidades en rem</strong>.\nOh, ¡por favor! ¿De verdad necesitáis un ejemplo para esto? Venga, aquí tenéis.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section-Highlight</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2.5rem</span>;\n}</code></pre>\n<p>Resultado:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section-Highlight</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">40px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2.5rem</span>;\n}</code></pre>\n<h2 id=\"funciones-adicionales\"><a href=\"#funciones-adicionales\" class=\"phenomic-HeadingAnchor\">#</a>Funciones adicionales</h2>\n<p>Las dos siguientes funciones no tienen mucho que ver con las especificaciones CSS. Sin embargo, merecen ser mencionadas en esta introducción.</p>\n<h3 id=\"import\"><a href=\"#import\" class=\"phenomic-HeadingAnchor\">#</a><code>import</code></h3>\n<p>¿Y si pudiérais importar archivos locales y módulos (<code>node_modules</code> o <code>web_modules</code>) para generar un solo y único archivo CSS que los contendría todos? Sí, <a href=\"https://github.com/sass/sass/issues/193\">es a vosotros a quién estoy mirando, utilizadores de Sass</a>, ejem. Bueno pues, con <strong>cssnext</strong> es possible.</p>\n<h3 id=\"compress\"><a href=\"#compress\" class=\"phenomic-HeadingAnchor\">#</a><code>compress</code></h3>\n<p>Como ya habréis adivinado, se trata solo una opción para comprimir <em>o no</em> vuestro archivo de salida. Y esto es gracias a <a href=\"https://github.com/ben-eb/cssnano\">cssnano</a>.</p>\n<h3 id=\"uso\"><a href=\"#uso\" class=\"phenomic-HeadingAnchor\">#</a>Uso</h3>\n<p>Debajo os dejo un ejemplo básico de estas dos funciones. He usado <a href=\"https://github.com/cssnext/gulp-cssnext\">gulp-cssnext</a>, uno de los <a href=\"http://cssnext.io/setup/\">numerosos plugins</a> que os puede ayudar a empezar con <strong>cssnext</strong>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp'</span>),\n    cssnext = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-cssnext\"</span>);\n\ngulp.task(<span class=\"hljs-string\">'styles'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp.src(<span class=\"hljs-string\">\"css/index.css\"</span>)\n  .pipe(cssnext({\n    <span class=\"hljs-attr\">compress</span>: <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">// false por defecto</span>\n  }))\n  .pipe(gulp.dest(<span class=\"hljs-string\">\"./dist/\"</span>))\n});</code></pre>\n<p>Después, en mi archivo <code>index.css</code>, obtendría lo siguiente:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"normalize.css\"</span>; <span class=\"hljs-comment\">/* == @import \"./node_modules/normalize.css/index.css\"; */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"cssrecipes-defaults\"</span>; <span class=\"hljs-comment\">/* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"project-modules/partner\"</span>; <span class=\"hljs-comment\">/* relativo a css/ */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"typo\"</span>; <span class=\"hljs-comment\">/* mismo nivel que mi index.css principal, situado en css/ */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"highlight\"</span> (min-width: <span class=\"hljs-number\">25em</span>);</code></pre>\n<p>Y el resultado final es:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* contenido de ./node_modules/normalize.css/index.css */</span>\n<span class=\"hljs-comment\">/* contenido de ./node_modules/cssrecipes-defaults/index.css */</span>\n<span class=\"hljs-comment\">/* contenido de project-modules/partner.css */</span>\n<span class=\"hljs-comment\">/* contenido de typo.css */</span>\n@<span class=\"hljs-keyword\">media</span> (min-width: <span class=\"hljs-number\">25em</span>) {\n  <span class=\"hljs-comment\">/* contenido de highlight.css */</span>\n}</code></pre>\n<p>Conozco esa sensación. Vosotros también os habéis enamorado. :)</p>\n<p>Bueno, para concluir, digamos que el propósito principal de <strong>cssnext</strong> es el de poder codificar según las especificaciones del W3C, siempre teniendo en cuenta que, teóricamente, será posible quitarlo (cuando ya no sea necesario).</p>\n<p>Mientras tanto, sigue habiendo mucho trabajo. Aquí os dejo una <a href=\"https://github.com/cssnext/cssnext/issues?q=is%253Aopen+is%253Aissue+label%253Afeature+label%253Aready\">lista de futuras funciones</a>.</p>\n<p>Ahora os toca jugar a vosotros. No os olvidáis de pasaros por el <a href=\"https://github.com/cssnext/cssnext\">repository GitHub</a>, seguir a <a href=\"https://twitter.com/cssnext\">@cssnext</a> en Twitter para obtener las últimas noticias al respecto y uniros a la <a href=\"https://gitter.im/cssnext/cssnext\">room cssnext en Gitter</a> si tenéis cualquier pregunta.</p>\n<ul>\n<li><a href=\"http://cssnext.io/\">Página oficial</a></li>\n</ul>\n","rawBody":"\nSegún la [página oficial](http://cssnext.io/):\n> **cssnext** es un _transpiler_ que permite utilizar desde hoy la sintaxis CSS del mañana y transformar las especificaciones CSS que aún no están implementadas en los navegadores más populares en CSS compatible.\n\n## ¿Qué significa esto exactamente?\n\nDesde que apareció CSS3, quizás hayas escuchado que el CSS se divide en varios documentos independientes llamados \"módulos\". Estos módulos pueden tener diferentes niveles de estabilidad y [estados](http://www.w3.org/Style/CSS/current-work#legend). A los navegadores les puede requirir bastante tiempo poner en práctica dichos módulos y aún más al W3C atribuirles el estado final de [Recomendación](http://www.w3.org/2005/10/Process-20051014/tr#RecsW3C).\n\nCon **cssnext** se puede usar la sintaxis de los [módulos CSS Nivel 4](http://www.xanthir.com/b4Ko0), tales como _propiedades personalizadas (custom properties)_ o _media queries personalizados_. **cssnext** va a transformar esta nueva y curiosa sintaxis en algo que el navegador será capaz de entender.\n\nEn resumen, se **adelanta al futuro**.\n\nNo sé vosotros, pero yo me considero alguien a quien le gusta experimentar con las últimas technologías y me parece que ¡esto mola bastante!\n\nNo dejéis de echar un vistazo a la [lista de funciones](http://cssnext.io/features/).\n\n### ¿Y qué pasa con el preprocesador CSS que estoy utilizando ahora?\n\nNo os preocupéis más por los peligros de los mixins, @extend y el _nesting_ infinito, en gran parte causados por el uso indebido e innecesario de estas herramientas.\n\n¿Adivinad qué? No necesitáis nada de esto.\n\nDeberiáis probar **cssnext** y volver al Vanilla CSS de toda la vida. Además, con una buena pizca de [metodología BEM](https://github.com/sturobson/BEM-resources), os sentiréis [vivos otra vez](http://philipwalton.com/articles/side-effects-in-css/).\n\n## Ejemplos\n\nEchemos un vistazo a las funciones que **cssnext** nos ofrece por el momento.\n\nAnte todo, es conveniente consultar el [playground en la página oficial](http://cssnext.io/playground/).\n\n### Prefijos de navegadores (vendor prefixes) automáticos\n\n```css\n\n.h1 {\n  transform: skewX(25deg);\n  transition: transform 1s;\n}\n```\n\nEsto será transformado por **cssnext** gracias a Autoprefixer en:\n\n```css\n.h1 {\n  -webkit-transform: skewX(25deg);\n      -ms-transform: skewX(25deg);\n          transform: skewX(25deg);\n  -webkit-transition: -webkit-transform 1s;\n          transition: transform 1s;\n}\n```\n### Propiedades personalizadas y var() limitadas a `:root`\n\nTambién conocidas como las tan esperadas [variables CSS](http://www.w3.org/TR/css-variables/).\n\n```css\n:root {\n  --primary-Color:                 #E86100;\n  --secondary-Color:               #2c3e50;\n  --r-Grid-baseFontSize:           1rem;\n}\n```\nPodéis usarlas de esta manera:\n\n```css\n.h1 {\n  color: var(--primary-Color);\n}\n.h1:hover {\n  color: var(--secondary-Color);\n}\nbody {\n  font-size: var(--r-Grid-baseFontSize);\n}\n```\n\n### Media Queries personalizadas\n\nPara crear alias semánticos, claros y sencillos ([aquí tenéis la documentación](http://dev.w3.org/csswg/mediaqueries/#custom-mq)).\n\n```css\n@custom-media --viewport-medium (width <= 40rem);\n@custom-media --viewport-large (max-width: 50em);\n```\n\nUso:\n\n```css\n@media (--viewport-medium) {\n  body { font-size: calc(var(--fontSize) * 1.2); }\n}\n@media (--viewport-large) {\n  body { font-size: calc(var(--fontSize) * 1.4); }\n}\n```\n\nPor ejemplo, digamos que:\n\n```css\n:root {\n  --fontSize: 1.2rem;\n}\n```\n\nEl código generado sera el siguiente:\n\n```css\n@media (max-width: 40rem) {\n  body { font-size: 1.44rem; }\n}\n@media (max-width: 50em) {\n  body { font-size: 1.68rem; }\n}\n```\n\n### Selectores personalizados\n\nPrimero, podéis echar un ojo a las [especificaciones](http://dev.w3.org/csswg/css-extensions/#custom-selectors).\nPongamos que queremos aplicar estilos a todos los títulos:\n\n```css\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n\n:--heading {\n  margin-top: 0;\n}\n```\nEsto va a generar el código siguiente:\n\n```css\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 { margin-top; 0; }\n```\n\n### `color()`\n\nUna sencilla [función color](http://dev.w3.org/csswg/css-color/#modifying-colors) para aplicar unos _ajustes de color_ (tono, luminosidad, saturación, entre otros) a un color base.\n\nEjemplos:\n\n```css\n.class {\n  background-color: color(#2B88E6);\n  color: color(#2B88E6 red(+30) green(-50) blue(6%) alpha(.65));\n  border-top-color: color(#2B88E6 saturation(-8%) whiteness(+50%));\n  border-right-color: color(#2B88E6 lightness(5%) blackness(-25%));\n  border-bottom-color: color(#2B88E6 tint(80%));\n  border-left-color: color(#2B88E6 shade(75%));\n}\n```\nEste código de arriba será transformado en:\n\n```css\n.class {\n  background-color: rgb(43, 136, 230);\n  color: rgba(73, 86, 15, 0.65);\n  border-top-color: rgb(181, 201, 222);\n  border-right-color: rgb(3, 45, 87);\n  border-bottom-color: rgb(213, 231, 250);\n  border-left-color: rgb(11, 34, 58);\n}\n```\n\n**cssnext** también ofrece las siguientes funciones relacionadas con los colores:\n\n#### hwb()\n\nSegún las [especificaciones](http://dev.w3.org/csswg/css-color/#the-hwb-notation), HWB (Tono-Blancura-Negrura - _Hue-Whiteness-Blackness_) es similar a HSL, pero resulta más fácil de uso para los humanos.\n\n```css\n.title {\n  color: hwb(125, 32%, 47%);\n}\n```\n\nResultado:\n\n```css\n.title {\n  color: rgb(33, 135, 42);\n}\n```\n\n#### gray()\n\nLos grises son tan [guays](http://dev.w3.org/csswg/css-color/#grays) que tienen incluso una función dedicada.\n\n```css\n.section {\n  background-color: gray(120, 50%);\n  border-color: gray(17%, 25%);\n}\n```\n\nEsto dará como resultado:\n\n```css\n.section {\n  background-color: rgba(120, 120, 120, 0.5);\n  border-color: rgba(43, 43, 43, 0.25);\n}\n```\n\n#### #rrggbbaa\n\n**cssnext** transforma la [notación hexadecimal](http://dev.w3.org/csswg/css-color/#hex-notation) #RRGGBBAA y #RGBA en rgba().\n\n```css\nbody {\n  color: #5c69;\n  background-color: #C73D5C59;\n}\n```\n\nResultado:\n\n```css\nbody {\n  color: rgba(85, 204, 102, 0.6);\n  background-color: rgba(199, 61, 92, 0.34902);\n}\n```\n\n#### rebeccapurple\n\nTransforma el color [`rebeccapurple`](https://github.com/postcss/postcss-color-rebeccapurple#why-this-plugin-) en `rgb(102, 51, 153)`.\n\n### Propiedades de filtros\n\n¡Un _nuevo_ mundo de [modificaciones de imágenes](http://www.w3.org/TR/filter-effects/) se abre ante vosotros!\n\n```css\n.awesome-Image {\n  filter: sepia(.7) hue-rotate(23deg);\n}\n\n.awesome-Picture {\n  filter: blur(8px);\n}\n```\n\nLo anterior será transformado en:\n\n```css\n.awesome-Image {\n  filter: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"filter\"><feColorMatrix type=\"matrix\" color-interpolation-filters=\"sRGB\" values=\"0.5751000000000001 0.5383 0.1323 0 0 0.24429999999999996 0.7802000000000001 0.11760000000000001 0 0 0.1904 0.3738 0.39170000000000005 0 0 0 0 0 1 0\" /><feColorMatrix type=\"hueRotate\" color-interpolation-filters=\"sRGB\" values=\"23\" /></filter></svg>#filter');\n  -webkit-filter: sepia(.7) hue-rotate(23deg);\n          filter: sepia(.7) hue-rotate(23deg);\n}\n\n.awesome-Picture {\n  filter: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"filter\"><feGaussianBlur stdDeviation=\"8\" /></filter></svg>#filter');\n  -webkit-filter: blur(8px);\n          filter: blur(8px);\n}\n```\n\n### Unidades rem\n\nNada extraordinario aquí, se genera un **_fallback_ en píxeles para las unidades en rem**.\nOh, ¡por favor! ¿De verdad necesitáis un ejemplo para esto? Venga, aquí tenéis.\n\n```css\n.section-Highlight {\n  font-size: 2.5rem;\n}\n```\nResultado:\n\n```css\n.section-Highlight {\n  font-size: 40px;\n  font-size: 2.5rem;\n}\n```\n\n## Funciones adicionales\n\nLas dos siguientes funciones no tienen mucho que ver con las especificaciones CSS. Sin embargo, merecen ser mencionadas en esta introducción.\n\n### `import`\n\n¿Y si pudiérais importar archivos locales y módulos (`node_modules` o `web_modules`) para generar un solo y único archivo CSS que los contendría todos? Sí, [es a vosotros a quién estoy mirando, utilizadores de Sass](https://github.com/sass/sass/issues/193), ejem. Bueno pues, con **cssnext** es possible.\n\n### `compress`\n\nComo ya habréis adivinado, se trata solo una opción para comprimir _o no_ vuestro archivo de salida. Y esto es gracias a [cssnano](https://github.com/ben-eb/cssnano).\n\n### Uso\n\nDebajo os dejo un ejemplo básico de estas dos funciones. He usado [gulp-cssnext](https://github.com/cssnext/gulp-cssnext), uno de los [numerosos plugins](http://cssnext.io/setup/) que os puede ayudar a empezar con **cssnext**.\n\n```js\nvar gulp = require('gulp'),\n    cssnext = require(\"gulp-cssnext\");\n\ngulp.task('styles', function() {\n  gulp.src(\"css/index.css\")\n  .pipe(cssnext({\n    compress: true,  // false por defecto\n  }))\n  .pipe(gulp.dest(\"./dist/\"))\n});\n\n```\n\nDespués, en mi archivo `index.css`, obtendría lo siguiente:\n\n```css\n\n@import \"normalize.css\"; /* == @import \"./node_modules/normalize.css/index.css\"; */\n@import \"cssrecipes-defaults\"; /* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */\n@import \"project-modules/partner\"; /* relativo a css/ */\n@import \"typo\"; /* mismo nivel que mi index.css principal, situado en css/ */\n@import \"highlight\" (min-width: 25em);\n\n```\n\nY el resultado final es:\n\n```css\n\n/* contenido de ./node_modules/normalize.css/index.css */\n/* contenido de ./node_modules/cssrecipes-defaults/index.css */\n/* contenido de project-modules/partner.css */\n/* contenido de typo.css */\n@media (min-width: 25em) {\n  /* contenido de highlight.css */\n}\n```\n\nConozco esa sensación. Vosotros también os habéis enamorado. :)\n\nBueno, para concluir, digamos que el propósito principal de **cssnext** es el de poder codificar según las especificaciones del W3C, siempre teniendo en cuenta que, teóricamente, será posible quitarlo (cuando ya no sea necesario).\n\nMientras tanto, sigue habiendo mucho trabajo. Aquí os dejo una [lista de futuras funciones](https://github.com/cssnext/cssnext/issues?q=is%3Aopen+is%3Aissue+label%3Afeature+label%3Aready).\n\nAhora os toca jugar a vosotros. No os olvidáis de pasaros por el [repository GitHub](https://github.com/cssnext/cssnext), seguir a [@cssnext](https://twitter.com/cssnext) en Twitter para obtener las últimas noticias al respecto y uniros a la [room cssnext en Gitter](https://gitter.im/cssnext/cssnext) si tenéis cualquier pregunta.\n\n* [Página oficial](http://cssnext.io/)\n","__filename":"es/articulos/css/procesadores/cssnext/index.md","__url":"/es/articulos/css/procesadores/cssnext/","__resourceUrl":"/es/articulos/css/procesadores/cssnext/index.html","__dataUrl":"/es/articulos/css/procesadores/cssnext/index.html.0085c93b30b652c3871062cf9fc59583.json"}