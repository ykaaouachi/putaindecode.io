{"head":{"layout":"Post","comments":true,"date":"2015-06-02","title":"Introduction to cssnext","tags":["css","postcss"],"authors":["Macxim"],"header":{"credit":"https://www.flickr.com/photos/frinky/620935482"},"description":"From the official website: cssnext is a CSS transpiler that allows you to use tomorrow's CSS syntax today. It transforms CSS specs that areâ€¦"},"body":"<p>From <a href=\"http://cssnext.io/\">the official website</a>:</p>\n<blockquote>\n<p><strong>cssnext</strong> is a CSS transpiler that allows you to use tomorrow's CSS syntax today. It transforms CSS specs that are not yet implemented in popular browsers into more compatible CSS.</p>\n</blockquote>\n<h2 id=\"what-does-it-mean\"><a href=\"#what-does-it-mean\" class=\"phenomic-HeadingAnchor\">#</a>What does it mean?</h2>\n<p>Since CSS3, you may have heard that CSS is divided into several independent documents called \"modules\". Those modules can have different levels of stability and <a href=\"http://www.w3.org/Style/CSS/current-work#legend\">statuses</a>. It can take quite some time for the browsers to implement those modules and even more for the W3C to give them the ultimate status of <a href=\"http://www.w3.org/2005/10/Process-20051014/tr#RecsW3C\">Recommandation</a>.</p>\n<p>With <strong>cssnext</strong>, you can use the syntax of <a href=\"http://www.xanthir.com/b4Ko0\">CSS Module Level 4</a> such as <em>custom properties</em> or <em>custom media queries</em>. <strong>cssnext</strong> will transform this new strange syntax into something that the browser can actually understand.</p>\n<p>In short, it makes you <strong>taste the future</strong>.</p>\n<p>I don't know about you but speaking as someone who loves to experiment with cutting-edge technologies, I think this is pretty cool!</p>\n<p>You should take a look at the <a href=\"http://cssnext.io/features/\">feature list</a>.</p>\n<h3 id=\"what-about-my-current-css-preprocessor\"><a href=\"#what-about-my-current-css-preprocessor\" class=\"phenomic-HeadingAnchor\">#</a>What about my current CSS preprocessor?</h3>\n<p>Forget about the dangers of mixins, @extend and infinite nesting; mostly caused by overzealous use and/or misuse of such tools, but still.</p>\n<p>Guess what, you don't really need this.</p>\n<p>You should give <strong>cssnext</strong> a shot and go back to Vanilla CSS. And with a nice and clean touch of <a href=\"https://github.com/sturobson/BEM-resources\">BEM syntax</a>, you will <a href=\"http://philipwalton.com/articles/side-effects-in-css/\">feel alive again</a>.</p>\n<h2 id=\"examples\"><a href=\"#examples\" class=\"phenomic-HeadingAnchor\">#</a>Examples</h2>\n<p>Let's take a look at the features that <strong>cssnext</strong> offers at the moment.</p>\n<p>First of all, be sure to check out the <a href=\"http://cssnext.io/playground/\">playground on the official website</a>.</p>\n<h3 id=\"automatic-vendor-prefixes\"><a href=\"#automatic-vendor-prefixes\" class=\"phenomic-HeadingAnchor\">#</a>Automatic vendor prefixes</h3>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.h1</span> {\n  <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n  <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">1s</span>;\n}</code></pre>\n<p>This will be transformed by <strong>cssnext</strong> via Autoprefixer in:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.h1</span> {\n  <span class=\"hljs-attribute\">-webkit-transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n      <span class=\"hljs-attribute\">-ms-transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n          <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">skewX</span>(25deg);\n  <span class=\"hljs-attribute\">-webkit-transition</span>: -webkit-transform <span class=\"hljs-number\">1s</span>;\n          <span class=\"hljs-attribute\">transition</span>: transform <span class=\"hljs-number\">1s</span>;\n}</code></pre>\n<h3 id=\"custom-properties--var-limited-to-root\"><a href=\"#custom-properties--var-limited-to-root\" class=\"phenomic-HeadingAnchor\">#</a>Custom properties &#x26; var() limited to <code>:root</code></h3>\n<p>Also known as the much awaited <a href=\"http://www.w3.org/TR/css-variables/\">CSS variables</a>.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-pseudo\">:root</span> {\n  <span class=\"hljs-attribute\">--primary-Color</span>:                 <span class=\"hljs-number\">#E86100</span>;\n  <span class=\"hljs-attribute\">--secondary-Color</span>:               <span class=\"hljs-number\">#2c3e50</span>;\n  <span class=\"hljs-attribute\">--r-Grid-baseFontSize</span>:           <span class=\"hljs-number\">1rem</span>;\n}</code></pre>\n<p>You can use them this way:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.h1</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--primary-Color);\n}\n<span class=\"hljs-selector-class\">.h1</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">var</span>(--secondary-Color);\n}\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">var</span>(--r-Grid-baseFontSize);\n}</code></pre>\n<h3 id=\"custom-media-queries\"><a href=\"#custom-media-queries\" class=\"phenomic-HeadingAnchor\">#</a>Custom Media Queries</h3>\n<p>Simply-named and semantic aliases (<a href=\"http://dev.w3.org/csswg/mediaqueries/#custom-mq\">check the specs</a>).</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">custom</span>-<span class=\"hljs-keyword\">media</span> --viewport-medium (width &#x3C;= <span class=\"hljs-number\">40rem</span>);\n@<span class=\"hljs-keyword\">custom</span>-<span class=\"hljs-keyword\">media</span> --viewport-large (max-width: <span class=\"hljs-number\">50em</span>);</code></pre>\n<p>Usage:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> (--viewport-medium) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">calc</span>(var(--fontSize) * <span class=\"hljs-number\">1.2</span>); }\n}\n@<span class=\"hljs-keyword\">media</span> (--viewport-large) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-built_in\">calc</span>(var(--fontSize) * <span class=\"hljs-number\">1.4</span>); }\n}</code></pre>\n<p>For example, let's take:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-pseudo\">:root</span> {\n  <span class=\"hljs-attribute\">--fontSize</span>: <span class=\"hljs-number\">1.2rem</span>;\n}</code></pre>\n<p>The output will be:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">media</span> (max-width: <span class=\"hljs-number\">40rem</span>) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.44rem</span>; }\n}\n@<span class=\"hljs-keyword\">media</span> (max-width: <span class=\"hljs-number\">50em</span>) {\n  <span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">1.68rem</span>; }\n}</code></pre>\n<h3 id=\"custom-selectors\"><a href=\"#custom-selectors\" class=\"phenomic-HeadingAnchor\">#</a>Custom selectors</h3>\n<p>Take a look at the <a href=\"http://dev.w3.org/csswg/css-extensions/#custom-selectors\">specs</a> first.\nLet's say we want to apply some styles to all headings.</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">custom</span>-<span class=\"hljs-keyword\">selector</span> :--heading h1, h2, h3, h4, h5, h6;\n\n<span class=\"hljs-selector-pseudo\">:--heading</span> {\n  <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">0</span>;\n}</code></pre>\n<p>This will output the following:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">h1</span>,\n<span class=\"hljs-selector-tag\">h2</span>,\n<span class=\"hljs-selector-tag\">h3</span>,\n<span class=\"hljs-selector-tag\">h4</span>,\n<span class=\"hljs-selector-tag\">h5</span>,\n<span class=\"hljs-selector-tag\">h6</span> { margin-top; 0; }</code></pre>\n<h3 id=\"color\"><a href=\"#color\" class=\"phenomic-HeadingAnchor\">#</a><code>color()</code></h3>\n<p>A simple <a href=\"http://dev.w3.org/csswg/css-color/#modifying-colors\">color function</a> to apply <em>color adjusters</em> (hue, lightness, tint, and so on) to a base color.</p>\n<p>Examples:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.class</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6);\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 red(+30) <span class=\"hljs-built_in\">green</span>(-50) <span class=\"hljs-built_in\">blue</span>(6%) <span class=\"hljs-built_in\">alpha</span>(.65));\n  <span class=\"hljs-attribute\">border-top-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 saturation(-8%) <span class=\"hljs-built_in\">whiteness</span>(+50%));\n  <span class=\"hljs-attribute\">border-right-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 lightness(5%) <span class=\"hljs-built_in\">blackness</span>(-25%));\n  <span class=\"hljs-attribute\">border-bottom-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 tint(80%));\n  <span class=\"hljs-attribute\">border-left-color</span>: <span class=\"hljs-built_in\">color</span>(#2B88E6 shade(75%));\n}</code></pre>\n<p>The code above will be transformed into...</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.class</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(43, 136, 230);\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(73, 86, 15, 0.65);\n  <span class=\"hljs-attribute\">border-top-color</span>: <span class=\"hljs-built_in\">rgb</span>(181, 201, 222);\n  <span class=\"hljs-attribute\">border-right-color</span>: <span class=\"hljs-built_in\">rgb</span>(3, 45, 87);\n  <span class=\"hljs-attribute\">border-bottom-color</span>: <span class=\"hljs-built_in\">rgb</span>(213, 231, 250);\n  <span class=\"hljs-attribute\">border-left-color</span>: <span class=\"hljs-built_in\">rgb</span>(11, 34, 58);\n}</code></pre>\n<p><strong>cssnext</strong> also offers the following color-related features.</p>\n<h4 id=\"hwb\"><a href=\"#hwb\" class=\"phenomic-HeadingAnchor\">#</a>hwb()</h4>\n<p>From the <a href=\"http://dev.w3.org/csswg/css-color/#the-hwb-notation\">specifications</a>, HWB (Hue-Whiteness-Blackness) is similar to HSL but easier for humans to work with.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.title</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">hwb</span>(125, 32%, 47%);\n}</code></pre>\n<p>Output:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.title</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgb</span>(33, 135, 42);\n}</code></pre>\n<h4 id=\"gray\"><a href=\"#gray\" class=\"phenomic-HeadingAnchor\">#</a>gray()</h4>\n<p>Grays are <a href=\"http://dev.w3.org/csswg/css-color/#grays\">so cool</a> they have a function of their own.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">gray</span>(120, 50%);\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-built_in\">gray</span>(17%, 25%);\n}</code></pre>\n<p>This will output:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(120, 120, 120, 0.5);\n  <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-built_in\">rgba</span>(43, 43, 43, 0.25);\n}</code></pre>\n<h4 id=\"rrggbbaa\"><a href=\"#rrggbbaa\" class=\"phenomic-HeadingAnchor\">#</a>#rrggbbaa</h4>\n<p><strong>cssnext</strong> transforms the <a href=\"http://dev.w3.org/csswg/css-color/#hex-notation\">hexadecimal notations</a> #RRGGBBAA and #RGBA into rgba().</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#5c69</span>;\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#C73D5C59</span>;\n}</code></pre>\n<p>Output:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-built_in\">rgba</span>(85, 204, 102, 0.6);\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgba</span>(199, 61, 92, 0.34902);\n}</code></pre>\n<h4 id=\"rebeccapurple\"><a href=\"#rebeccapurple\" class=\"phenomic-HeadingAnchor\">#</a>rebeccapurple</h4>\n<p>Simply transforms the color <a href=\"https://github.com/postcss/postcss-color-rebeccapurple#why-this-plugin-\"><code>rebeccapurple</code></a> into <code>rgb(102, 51, 153)</code>.</p>\n<h3 id=\"filter-properties\"><a href=\"#filter-properties\" class=\"phenomic-HeadingAnchor\">#</a>filter properties</h3>\n<p>A whole <em>new</em> world of <a href=\"http://www.w3.org/TR/filter-effects/\">image modifications</a>!</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.awesome-Image</span> {\n  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">sepia</span>(.7) <span class=\"hljs-built_in\">hue-rotate</span>(23deg);\n}\n\n<span class=\"hljs-selector-class\">.awesome-Picture</span> {\n  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">blur</span>(8px);\n}</code></pre>\n<p>Will be transformed into:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.awesome-Image</span> {\n  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'data:image/svg+xml;charset=utf-8,&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\">&#x3C;filter id=\"filter\">&#x3C;feColorMatrix type=\"matrix\" color-interpolation-filters=\"sRGB\" values=\"0.5751000000000001 0.5383 0.1323 0 0 0.24429999999999996 0.7802000000000001 0.11760000000000001 0 0 0.1904 0.3738 0.39170000000000005 0 0 0 0 0 1 0\" />&#x3C;feColorMatrix type=\"hueRotate\" color-interpolation-filters=\"sRGB\" values=\"23\" />&#x3C;/filter>&#x3C;/svg>#filter'</span>);\n  <span class=\"hljs-attribute\">-webkit-filter</span>: <span class=\"hljs-built_in\">sepia</span>(.7) <span class=\"hljs-built_in\">hue-rotate</span>(23deg);\n          <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">sepia</span>(.7) <span class=\"hljs-built_in\">hue-rotate</span>(23deg);\n}\n\n<span class=\"hljs-selector-class\">.awesome-Picture</span> {\n  <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'data:image/svg+xml;charset=utf-8,&#x3C;svg xmlns=\"http://www.w3.org/2000/svg\">&#x3C;filter id=\"filter\">&#x3C;feGaussianBlur stdDeviation=\"8\" />&#x3C;/filter>&#x3C;/svg>#filter'</span>);\n  <span class=\"hljs-attribute\">-webkit-filter</span>: <span class=\"hljs-built_in\">blur</span>(8px);\n          <span class=\"hljs-attribute\">filter</span>: <span class=\"hljs-built_in\">blur</span>(8px);\n}</code></pre>\n<h3 id=\"rem-units\"><a href=\"#rem-units\" class=\"phenomic-HeadingAnchor\">#</a>rem units</h3>\n<p>Nothing extraordinary here, it generates <strong>pixel fallback for rem units</strong>.\nOh, come on! Do we really need an example for this one? Alright, here you go!</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section-Highlight</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2.5rem</span>;\n}</code></pre>\n<p>Output:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.section-Highlight</span> {\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">40px</span>;\n  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2.5rem</span>;\n}</code></pre>\n<h2 id=\"bonus-features\"><a href=\"#bonus-features\" class=\"phenomic-HeadingAnchor\">#</a>Bonus features</h2>\n<p>The two following features are not really related to CSS specifications. However, they are definitely worth mentioning in this introduction.</p>\n<h3 id=\"import\"><a href=\"#import\" class=\"phenomic-HeadingAnchor\">#</a><code>import</code></h3>\n<p>What if you could import inline local files and modules (<code>node_modules</code> or <code>web_modules</code>) to output a bundled CSS file? Yes, <a href=\"https://github.com/sass/sass/issues/193\">I'm looking at you Sass users</a>, ahem. Well, with <strong>cssnext</strong>, you can.</p>\n<h3 id=\"compress\"><a href=\"#compress\" class=\"phenomic-HeadingAnchor\">#</a><code>compress</code></h3>\n<p>As you may have guessed, this is just an option to compress <em>or not</em> your output file. By the way, this option uses <a href=\"https://github.com/ben-eb/cssnano\">cssnano</a>.</p>\n<h3 id=\"usage\"><a href=\"#usage\" class=\"phenomic-HeadingAnchor\">#</a>Usage</h3>\n<p>Below is a basic example of these two features. I used <a href=\"https://github.com/cssnext/gulp-cssnext\">gulp-cssnext</a>, one of the <a href=\"http://cssnext.io/setup/\">many plugins</a> to help you start with <strong>cssnext</strong>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> gulp = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'gulp'</span>),\n    cssnext = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"gulp-cssnext\"</span>);\n\ngulp.task(<span class=\"hljs-string\">'styles'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  gulp.src(<span class=\"hljs-string\">\"css/index.css\"</span>)\n  .pipe(cssnext({\n    <span class=\"hljs-attr\">compress</span>: <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">// default is false</span>\n  }))\n  .pipe(gulp.dest(<span class=\"hljs-string\">\"./dist/\"</span>))\n});</code></pre>\n<p>Then, in my <code>index.css</code> file, I will have:</p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"normalize.css\"</span>; <span class=\"hljs-comment\">/* == @import \"./node_modules/normalize.css/index.css\"; */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"cssrecipes-defaults\"</span>; <span class=\"hljs-comment\">/* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"project-modules/partner\"</span>; <span class=\"hljs-comment\">/* relative to css/ */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"typo\"</span>; <span class=\"hljs-comment\">/* same level as my main index.css located in css/ */</span>\n@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"highlight\"</span> (min-width: <span class=\"hljs-number\">25em</span>);</code></pre>\n<p>And the final output will be:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* content of ./node_modules/normalize.css/index.css */</span>\n<span class=\"hljs-comment\">/* content of ./node_modules/cssrecipes-defaults/index.css */</span>\n<span class=\"hljs-comment\">/* content of project-modules/partner.css */</span>\n<span class=\"hljs-comment\">/* content of typo.css */</span>\n@<span class=\"hljs-keyword\">media</span> (min-width: <span class=\"hljs-number\">25em</span>) {\n  <span class=\"hljs-comment\">/* content of highlight.css */</span>\n}</code></pre>\n<p>I know the feeling. Now you're in love too. :)</p>\n<p>Well, just to wrap it up here, let's say that the main purpose of <strong>cssnext</strong> is to build things according to the W3C specifications keeping in mind that, theoretically, it can be removed later on (when not needed anymore).</p>\n<p>Meanwhile, there is still work to do: here you can find a <a href=\"https://github.com/cssnext/cssnext/issues?q=is%253Aopen+is%253Aissue+label%253Afeature+label%253Aready\">list of features that are waiting to be implemented</a>.</p>\n<p>Now it's your time to play. Be sure to check the <a href=\"https://github.com/cssnext/cssnext\">GitHub repository</a>, follow <a href=\"https://twitter.com/cssnext\">@cssnext</a> on Twitter to get the latest news and join the <a href=\"https://gitter.im/cssnext/cssnext\">cssnext room on Gitter</a> if you have any questions.</p>\n<ul>\n<li><a href=\"http://cssnext.io/\">Official website</a></li>\n</ul>\n","rawBody":"\nFrom [the official website](http://cssnext.io/):\n> **cssnext** is a CSS transpiler that allows you to use tomorrow's CSS syntax today. It transforms CSS specs that are not yet implemented in popular browsers into more compatible CSS.\n\n## What does it mean?\n\nSince CSS3, you may have heard that CSS is divided into several independent documents called \"modules\". Those modules can have different levels of stability and [statuses](http://www.w3.org/Style/CSS/current-work#legend). It can take quite some time for the browsers to implement those modules and even more for the W3C to give them the ultimate status of [Recommandation](http://www.w3.org/2005/10/Process-20051014/tr#RecsW3C).\n\nWith **cssnext**, you can use the syntax of [CSS Module Level 4](http://www.xanthir.com/b4Ko0) such as _custom properties_ or _custom media queries_. **cssnext** will transform this new strange syntax into something that the browser can actually understand.\n\nIn short, it makes you **taste the future**.\n\nI don't know about you but speaking as someone who loves to experiment with cutting-edge technologies, I think this is pretty cool!\n\nYou should take a look at the [feature list](http://cssnext.io/features/).\n\n### What about my current CSS preprocessor?\n\nForget about the dangers of mixins, @extend and infinite nesting; mostly caused by overzealous use and/or misuse of such tools, but still.\n\nGuess what, you don't really need this.\n\nYou should give **cssnext** a shot and go back to Vanilla CSS. And with a nice and clean touch of [BEM syntax](https://github.com/sturobson/BEM-resources), you will [feel alive again](http://philipwalton.com/articles/side-effects-in-css/).\n\n## Examples\n\nLet's take a look at the features that **cssnext** offers at the moment.\n\nFirst of all, be sure to check out the [playground on the official website](http://cssnext.io/playground/).\n\n### Automatic vendor prefixes\n\n```css\n\n.h1 {\n  transform: skewX(25deg);\n  transition: transform 1s;\n}\n```\n\nThis will be transformed by **cssnext** via Autoprefixer in:\n\n```css\n.h1 {\n  -webkit-transform: skewX(25deg);\n      -ms-transform: skewX(25deg);\n          transform: skewX(25deg);\n  -webkit-transition: -webkit-transform 1s;\n          transition: transform 1s;\n}\n```\n### Custom properties & var() limited to `:root`\n\nAlso known as the much awaited [CSS variables](http://www.w3.org/TR/css-variables/).\n\n```css\n:root {\n  --primary-Color:                 #E86100;\n  --secondary-Color:               #2c3e50;\n  --r-Grid-baseFontSize:           1rem;\n}\n```\nYou can use them this way:\n\n```css\n.h1 {\n  color: var(--primary-Color);\n}\n.h1:hover {\n  color: var(--secondary-Color);\n}\nbody {\n  font-size: var(--r-Grid-baseFontSize);\n}\n```\n\n### Custom Media Queries\n\nSimply-named and semantic aliases ([check the specs](http://dev.w3.org/csswg/mediaqueries/#custom-mq)).\n\n```css\n@custom-media --viewport-medium (width <= 40rem);\n@custom-media --viewport-large (max-width: 50em);\n```\n\nUsage:\n\n```css\n@media (--viewport-medium) {\n  body { font-size: calc(var(--fontSize) * 1.2); }\n}\n@media (--viewport-large) {\n  body { font-size: calc(var(--fontSize) * 1.4); }\n}\n```\n\nFor example, let's take:\n\n```css\n:root {\n  --fontSize: 1.2rem;\n}\n```\n\nThe output will be:\n\n```css\n@media (max-width: 40rem) {\n  body { font-size: 1.44rem; }\n}\n@media (max-width: 50em) {\n  body { font-size: 1.68rem; }\n}\n```\n\n### Custom selectors\n\nTake a look at the [specs](http://dev.w3.org/csswg/css-extensions/#custom-selectors) first.\nLet's say we want to apply some styles to all headings.\n\n```css\n@custom-selector :--heading h1, h2, h3, h4, h5, h6;\n\n:--heading {\n  margin-top: 0;\n}\n```\nThis will output the following:\n\n```css\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 { margin-top; 0; }\n```\n\n### `color()`\n\nA simple [color function](http://dev.w3.org/csswg/css-color/#modifying-colors) to apply _color adjusters_ (hue, lightness, tint, and so on) to a base color.\n\nExamples:\n\n```css\n.class {\n  background-color: color(#2B88E6);\n  color: color(#2B88E6 red(+30) green(-50) blue(6%) alpha(.65));\n  border-top-color: color(#2B88E6 saturation(-8%) whiteness(+50%));\n  border-right-color: color(#2B88E6 lightness(5%) blackness(-25%));\n  border-bottom-color: color(#2B88E6 tint(80%));\n  border-left-color: color(#2B88E6 shade(75%));\n}\n```\nThe code above will be transformed into...\n\n```css\n.class {\n  background-color: rgb(43, 136, 230);\n  color: rgba(73, 86, 15, 0.65);\n  border-top-color: rgb(181, 201, 222);\n  border-right-color: rgb(3, 45, 87);\n  border-bottom-color: rgb(213, 231, 250);\n  border-left-color: rgb(11, 34, 58);\n}\n```\n\n**cssnext** also offers the following color-related features.\n\n#### hwb()\n\nFrom the [specifications](http://dev.w3.org/csswg/css-color/#the-hwb-notation), HWB (Hue-Whiteness-Blackness) is similar to HSL but easier for humans to work with.\n\n```css\n.title {\n  color: hwb(125, 32%, 47%);\n}\n```\n\nOutput:\n\n```css\n.title {\n  color: rgb(33, 135, 42);\n}\n```\n\n#### gray()\n\nGrays are [so cool](http://dev.w3.org/csswg/css-color/#grays) they have a function of their own.\n\n```css\n.section {\n  background-color: gray(120, 50%);\n  border-color: gray(17%, 25%);\n}\n```\n\nThis will output:\n\n```css\n.section {\n  background-color: rgba(120, 120, 120, 0.5);\n  border-color: rgba(43, 43, 43, 0.25);\n}\n```\n\n#### #rrggbbaa\n\n**cssnext** transforms the [hexadecimal notations](http://dev.w3.org/csswg/css-color/#hex-notation) #RRGGBBAA and #RGBA into rgba().\n\n```css\nbody {\n  color: #5c69;\n  background-color: #C73D5C59;\n}\n```\n\nOutput:\n\n```css\nbody {\n  color: rgba(85, 204, 102, 0.6);\n  background-color: rgba(199, 61, 92, 0.34902);\n}\n```\n\n#### rebeccapurple\n\nSimply transforms the color [`rebeccapurple`](https://github.com/postcss/postcss-color-rebeccapurple#why-this-plugin-) into `rgb(102, 51, 153)`.\n\n### filter properties\n\nA whole _new_ world of [image modifications](http://www.w3.org/TR/filter-effects/)!\n\n```css\n.awesome-Image {\n  filter: sepia(.7) hue-rotate(23deg);\n}\n\n.awesome-Picture {\n  filter: blur(8px);\n}\n```\n\nWill be transformed into:\n\n```css\n.awesome-Image {\n  filter: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"filter\"><feColorMatrix type=\"matrix\" color-interpolation-filters=\"sRGB\" values=\"0.5751000000000001 0.5383 0.1323 0 0 0.24429999999999996 0.7802000000000001 0.11760000000000001 0 0 0.1904 0.3738 0.39170000000000005 0 0 0 0 0 1 0\" /><feColorMatrix type=\"hueRotate\" color-interpolation-filters=\"sRGB\" values=\"23\" /></filter></svg>#filter');\n  -webkit-filter: sepia(.7) hue-rotate(23deg);\n          filter: sepia(.7) hue-rotate(23deg);\n}\n\n.awesome-Picture {\n  filter: url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"filter\"><feGaussianBlur stdDeviation=\"8\" /></filter></svg>#filter');\n  -webkit-filter: blur(8px);\n          filter: blur(8px);\n}\n```\n\n### rem units\n\nNothing extraordinary here, it generates **pixel fallback for rem units**.\nOh, come on! Do we really need an example for this one? Alright, here you go!\n\n```css\n.section-Highlight {\n  font-size: 2.5rem;\n}\n```\nOutput:\n\n```css\n.section-Highlight {\n  font-size: 40px;\n  font-size: 2.5rem;\n}\n```\n\n## Bonus features\n\nThe two following features are not really related to CSS specifications. However, they are definitely worth mentioning in this introduction.\n\n### `import`\n\nWhat if you could import inline local files and modules (`node_modules` or `web_modules`) to output a bundled CSS file? Yes, [I'm looking at you Sass users](https://github.com/sass/sass/issues/193), ahem. Well, with **cssnext**, you can.\n\n### `compress`\n\nAs you may have guessed, this is just an option to compress _or not_ your output file. By the way, this option uses [cssnano](https://github.com/ben-eb/cssnano).\n\n### Usage\n\nBelow is a basic example of these two features. I used [gulp-cssnext](https://github.com/cssnext/gulp-cssnext), one of the [many plugins](http://cssnext.io/setup/) to help you start with **cssnext**.\n\n```js\nvar gulp = require('gulp'),\n    cssnext = require(\"gulp-cssnext\");\n\ngulp.task('styles', function() {\n  gulp.src(\"css/index.css\")\n  .pipe(cssnext({\n    compress: true,  // default is false\n  }))\n  .pipe(gulp.dest(\"./dist/\"))\n});\n\n```\n\nThen, in my `index.css` file, I will have:\n\n```css\n\n@import \"normalize.css\"; /* == @import \"./node_modules/normalize.css/index.css\"; */\n@import \"cssrecipes-defaults\"; /* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */\n@import \"project-modules/partner\"; /* relative to css/ */\n@import \"typo\"; /* same level as my main index.css located in css/ */\n@import \"highlight\" (min-width: 25em);\n\n```\n\nAnd the final output will be:\n\n```css\n\n/* content of ./node_modules/normalize.css/index.css */\n/* content of ./node_modules/cssrecipes-defaults/index.css */\n/* content of project-modules/partner.css */\n/* content of typo.css */\n@media (min-width: 25em) {\n  /* content of highlight.css */\n}\n```\n\nI know the feeling. Now you're in love too. :)\n\nWell, just to wrap it up here, let's say that the main purpose of **cssnext** is to build things according to the W3C specifications keeping in mind that, theoretically, it can be removed later on (when not needed anymore).\n\nMeanwhile, there is still work to do: here you can find a [list of features that are waiting to be implemented](https://github.com/cssnext/cssnext/issues?q=is%3Aopen+is%3Aissue+label%3Afeature+label%3Aready).\n\nNow it's your time to play. Be sure to check the [GitHub repository](https://github.com/cssnext/cssnext), follow [@cssnext](https://twitter.com/cssnext) on Twitter to get the latest news and join the [cssnext room on Gitter](https://gitter.im/cssnext/cssnext) if you have any questions.\n\n* [Official website](http://cssnext.io/)\n","__filename":"en/articles/css/preprocessors/cssnext/index.md","__url":"/en/articles/css/preprocessors/cssnext/","__resourceUrl":"/en/articles/css/preprocessors/cssnext/index.html","__dataUrl":"/en/articles/css/preprocessors/cssnext/index.html.55bd6679249f295ad8b0be8b41ad207d.json"}