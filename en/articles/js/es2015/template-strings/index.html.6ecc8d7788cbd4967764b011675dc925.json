{"head":{"layout":"Post","comments":true,"date":"2015-12-07","title":"ES6, ES2015 : Template strings","tags":["JavaScript","ES6","ES2015"],"authors":["jbleuzen"],"translators":["MoOx"],"description":"ES2015 add a new way to write better strings that will simplify our code: the template strings. Principle To define a string in JavaScript,â€¦"},"body":"<p>ES2015 add a new way to write better strings that will simplify our code:\nthe <em>template strings</em>.</p>\n<h2 id=\"principle\"><a href=\"#principle\" class=\"phenomic-HeadingAnchor\">#</a>Principle</h2>\n<p>To define a string in JavaScript, we have single quotes or double quotes.\nNo one is really better than the other since you need to escape the quotes you\nare using in the string itself.</p>\n<p><em>Template strings</em> use <em>back-tick</em> (grave accent) to delimitate strings.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ES5</span>\n<span class=\"hljs-keyword\">var</span> myString = <span class=\"hljs-string\">'I\\'m a \"string\"'</span>\n\n<span class=\"hljs-comment\">// ES6</span>\n<span class=\"hljs-keyword\">const</span> myNewString = <span class=\"hljs-string\">`I'm a \"template string\"`</span></code></pre>\n<p>Nothing really awesome. So let's see the interesting new feature: interpolation.</p>\n<h2 id=\"interpolation\"><a href=\"#interpolation\" class=\"phenomic-HeadingAnchor\">#</a>Interpolation</h2>\n<p>Now you can directly use expression in a <em>template string</em> if you use the new\nplace holder syntax.: <code>${ expression }</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ES5</span>\n<span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">\"world\"</span>;\n<span class=\"hljs-keyword\">var</span> myStrin = <span class=\"hljs-string\">\"Hello \"</span> + name; <span class=\"hljs-comment\">// => Hello world</span>\n\n<span class=\"hljs-comment\">// ES6</span>\n<span class=\"hljs-keyword\">const</span> newName = <span class=\"hljs-string\">`developer`</span>;\n<span class=\"hljs-keyword\">const</span> myStrin = <span class=\"hljs-string\">`Hello <span class=\"hljs-subst\">${ newName }</span>`</span>; <span class=\"hljs-comment\">// => Hello developer</span></code></pre>\n<p>Here we are just using a variable, but we can use any expression:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">const</span> y = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${ x }</span> + <span class=\"hljs-subst\">${ y }</span> = <span class=\"hljs-subst\">${ x + y }</span>`</span> <span class=\"hljs-comment\">// => 1 + 2 = 3</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">square</span>(<span class=\"hljs-params\">num</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> num * num;\n}\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${square(<span class=\"hljs-number\">5</span>)}</span>`</span> <span class=\"hljs-comment\">// => 25</span></code></pre>\n<p>This is what make <em>template strings</em> awesome.</p>\n<h2 id=\"template-strings-are-multi-lines-capable\"><a href=\"#template-strings-are-multi-lines-capable\" class=\"phenomic-HeadingAnchor\">#</a><em>template strings</em> are multi-lines capable</h2>\n<p>Another cool thing is that <em>template strings</em> handle multi-lines.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// ES5</span>\n<span class=\"hljs-keyword\">var</span> multiline = <span class=\"hljs-string\">\"foo \\\n                 bar \\\n                 baz\"</span>;\n\n<span class=\"hljs-keyword\">var</span> multiline2 = <span class=\"hljs-string\">\"foo\"</span>;\nmultiline2 += <span class=\"hljs-string\">\"bar\"</span>;\nmultiline2 += <span class=\"hljs-string\">\"baz\"</span>;\n\n<span class=\"hljs-comment\">// ES6</span>\n<span class=\"hljs-keyword\">const</span> multiline = <span class=\"hljs-string\">`foo\n                   bar\n                   baz`</span>;</code></pre>\n<p><em>Note</em> keep in mind that spaces are as you write them, which can surprise you.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> str1 = <span class=\"hljs-string\">`foo\nbar`</span>;\n\n<span class=\"hljs-keyword\">const</span> str2 = <span class=\"hljs-string\">`foo\n             bar`</span>;\n\nstr1 === str2 <span class=\"hljs-comment\">// => false</span></code></pre>\n<h2 id=\"tagged-template-strings\"><a href=\"#tagged-template-strings\" class=\"phenomic-HeadingAnchor\">#</a>Tagged <em>template strings</em></h2>\n<p>Let's dive into another interesting feature of <em>template strings</em>.\nTags are functions that will use just before the <em>template string</em> and they\nallow us to enhance the string result.</p>\n<p>A tag take an array of \"literals\" (strings), and then all interpolated\n(evaluated) expressions that we can still modify.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">capitalizeVowels</span>(<span class=\"hljs-params\">strings, ...values</span>) </span>{\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">replaceVowels</span>(<span class=\"hljs-params\">string</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> string.replace(<span class=\"hljs-regexp\">/[aeiou]/g</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>)</span>{\n      <span class=\"hljs-keyword\">return</span> c.toUpperCase();\n    });\n  }\n\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-string\">\"\"</span>;\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; strings.length; ++i) {\n    <span class=\"hljs-keyword\">const</span> nextValue = values[i] || <span class=\"hljs-string\">\"\"</span>;\n    result += replaceVowels(strings[i]);\n    <span class=\"hljs-keyword\">if</span>(! <span class=\"hljs-built_in\">parseInt</span>(nextValue)) {\n      result += replaceVowels(nextValue)\n    } <span class=\"hljs-keyword\">else</span> {\n      result += nextValue;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> result;\n}\n\n\ncapitalizeVowels<span class=\"hljs-string\">`foo bar ?`</span> <span class=\"hljs-comment\">// => fOO bAr ?</span>\n<span class=\"hljs-keyword\">const</span> n = <span class=\"hljs-number\">42</span>\n<span class=\"hljs-keyword\">const</span> c = <span class=\"hljs-string\">\"f\"</span>\n<span class=\"hljs-keyword\">const</span> v = <span class=\"hljs-string\">\"o\"</span>\ncapitalizeVowels<span class=\"hljs-string\">`foo <span class=\"hljs-subst\">${ n }</span> bar <span class=\"hljs-subst\">${ c }</span><span class=\"hljs-subst\">${ v }</span><span class=\"hljs-subst\">${ v }</span> ?`</span> <span class=\"hljs-comment\">// => fOO 42 bAr fOO ?</span></code></pre>\n<p>Here is an interesting example of tagged <em>template strings</em> to handle\n<a href=\"http://jaysoo.ca/2014/03/20/i18n-with-es6-template-strings/\">i18n for strings</a>.</p>\n<h2 id=\"stringraw\"><a href=\"#stringraw\" class=\"phenomic-HeadingAnchor\">#</a>String.raw</h2>\n<p>A new function has been added to <code>String</code> prototype that allows us display raw\ncontent so you can see unescaped characters:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">String</span>.raw<span class=\"hljs-string\">`FOO\\nbar`</span> <span class=\"hljs-comment\">// => FOO\\\\nbar</span></code></pre>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" class=\"phenomic-HeadingAnchor\">#</a>Conclusion</h2>\n<p>When you will start to use <em>template strings</em>, you are likely going to like\nthem. They are clearly really useful in a daily basis.</p>\n<p>Almost all\n<a href=\"https://kangax.github.io/compat-table/es6/#test-template_strings\">modern browser handle template strings</a>\ntoday, as well as <a href=\"http://babeljs.io/\">Babel</a> and Traceur, so you do not\nhesitate to use <em>template strings</em>.</p>\n","rawBody":"\nES2015 add a new way to write better strings that will simplify our code:\nthe *template strings*.\n\n## Principle\n\nTo define a string in JavaScript, we have single quotes or double quotes.\nNo one is really better than the other since you need to escape the quotes you\nare using in the string itself.\n\n*Template strings* use _back-tick_ (grave accent) to delimitate strings.\n\n```js\n// ES5\nvar myString = 'I\\'m a \"string\"'\n\n// ES6\nconst myNewString = `I'm a \"template string\"`\n```\n\nNothing really awesome. So let's see the interesting new feature: interpolation.\n\n## Interpolation\n\nNow you can directly use expression in a *template string* if you use the new\nplace holder syntax.: `${ expression }`.\n\n```js\n// ES5\nvar name = \"world\";\nvar myStrin = \"Hello \" + name; // => Hello world\n\n// ES6\nconst newName = `developer`;\nconst myStrin = `Hello ${ newName }`; // => Hello developer\n```\n\nHere we are just using a variable, but we can use any expression:\n\n```js\nconst x = 1;\nconst y = 2;\nconst result = `${ x } + ${ y } = ${ x + y }` // => 1 + 2 = 3\n\nfunction square(num) {\n  return num * num;\n}\nconst result = `${square(5)}` // => 25\n```\n\nThis is what make *template strings* awesome.\n\n## *template strings* are multi-lines capable\n\nAnother cool thing is that *template strings* handle multi-lines.\n\n```js\n// ES5\nvar multiline = \"foo \\\n                 bar \\\n                 baz\";\n\nvar multiline2 = \"foo\";\nmultiline2 += \"bar\";\nmultiline2 += \"baz\";\n\n// ES6\nconst multiline = `foo\n                   bar\n                   baz`;\n```\n\n*Note* keep in mind that spaces are as you write them, which can surprise you.\n\n```js\nconst str1 = `foo\nbar`;\n\nconst str2 = `foo\n             bar`;\n\nstr1 === str2 // => false\n```\n\n## Tagged *template strings*\n\nLet's dive into another interesting feature of *template strings*.\nTags are functions that will use just before the *template string* and they\nallow us to enhance the string result.\n\nA tag take an array of \"literals\" (strings), and then all interpolated\n(evaluated) expressions that we can still modify.\n\n```js\nfunction capitalizeVowels(strings, ...values) {\n\n  function replaceVowels(string) {\n    return string.replace(/[aeiou]/g, function(c){\n      return c.toUpperCase();\n    });\n  }\n\n  let result = \"\";\n  for(let i = 0; i < strings.length; ++i) {\n    const nextValue = values[i] || \"\";\n    result += replaceVowels(strings[i]);\n    if(! parseInt(nextValue)) {\n      result += replaceVowels(nextValue)\n    } else {\n      result += nextValue;\n    }\n  }\n  return result;\n}\n\n\ncapitalizeVowels`foo bar ?` // => fOO bAr ?\nconst n = 42\nconst c = \"f\"\nconst v = \"o\"\ncapitalizeVowels`foo ${ n } bar ${ c }${ v }${ v } ?` // => fOO 42 bAr fOO ?\n```\n\nHere is an interesting example of tagged *template strings* to handle\n[i18n for strings](http://jaysoo.ca/2014/03/20/i18n-with-es6-template-strings/).\n\n## String.raw\n\nA new function has been added to `String` prototype that allows us display raw\ncontent so you can see unescaped characters:\n\n```js\nString.raw`FOO\\nbar` // => FOO\\\\nbar\n```\n\n## Conclusion\n\nWhen you will start to use *template strings*, you are likely going to like\nthem. They are clearly really useful in a daily basis.\n\nAlmost all\n[modern browser handle template strings](https://kangax.github.io/compat-table/es6/#test-template_strings)\ntoday, as well as [Babel](http://babeljs.io/) and Traceur, so you do not\nhesitate to use *template strings*.\n","__filename":"en/articles/js/es2015/template-strings.md","__url":"/en/articles/js/es2015/template-strings/","__resourceUrl":"/en/articles/js/es2015/template-strings/index.html","__dataUrl":"/en/articles/js/es2015/template-strings/index.html.6ecc8d7788cbd4967764b011675dc925.json"}