{"head":{"layout":"Post","comments":true,"date":"2015-12-16","title":"ES6, ES2015 : for..of loop","tags":["javascript","ES6","ES2015","for..of"],"authors":["Freezystem"],"description":"Introduction With the arrival of new iterable objects, ECMAScript had to create new ways to read through them. In the unique concern ofâ€¦"},"body":"<h2 id=\"introduction\"><a href=\"#introduction\" class=\"phenomic-HeadingAnchor\">#</a>Introduction</h2>\n<p>With the arrival of new iterable objects, ECMAScript had to create new ways to read through them.\nIn the unique concern of maintaining the backward compatibility, ES6 had to const his <code>for..in</code> loop untouched.</p>\n<blockquote>\n<p>But then, how to create a copycat of this same loop with improved capabilities ?  </p>\n</blockquote>\n<p>Solution is quite simple: \"Welcome to the <code>of</code> keyword!\"</p>\n<p>But before I tell you more, and to fully understand the usefulness of this new keyword, const review the existing.</p>\n<h2 id=\"the-good-ol-forin\"><a href=\"#the-good-ol-forin\" class=\"phenomic-HeadingAnchor\">#</a>The good ol' <code>for..in</code></h2>\n<p>All self-respecting <em>JavaScript enthousiast</em> already knows the famous <code>for..in</code> loop\nwhose first value is to iterate over the different keys of an object or an array.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> obj = { <span class=\"hljs-attr\">foo</span> : <span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-attr\">bar</span> : <span class=\"hljs-string\">'world'</span> };\n\n<span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> obj ) {\n  <span class=\"hljs-built_in\">console</span>.log( key + <span class=\"hljs-string\">'->'</span> + obj[key] );  <span class=\"hljs-comment\">// 'foo->hello', 'bar->world'</span>\n}</code></pre>\n<p>The <code>for..in</code> loop, despite its ease of use hide some pitfalls:</p>\n<ul>\n<li>\n<p>When itarating over an array, index value is parsed to string : \"0\", \"1\", \"2\", etc..\nThis behaviour can lead to potential error when index is used in computation.</p>\n</li>\n<li>\n<p>The loop iterate across all the table keys, but also over each of its properties.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-string\">'bar'</span>];\narr.oups = <span class=\"hljs-string\">'baz'</span>;\n\n<span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">in</span> arr ) {\n  <span class=\"hljs-built_in\">console</span>.log( key + <span class=\"hljs-string\">'->'</span> + arr[key] ); <span class=\"hljs-comment\">// '0->foo', '1->bar', 'oups->baz'</span>\n}</code></pre>\n</li>\n<li>\n<p>Iteration order over a given object properties may vary across depending on the code executing environment.</p>\n</li>\n</ul>\n<h2 id=\"the-alternative-foreach-method\"><a href=\"#the-alternative-foreach-method\" class=\"phenomic-HeadingAnchor\">#</a>The alternative <code>.forEach()</code> method</h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a>\nloop allow a more secure iteration, but bring other downsides as:</p>\n<ul>\n<li>Impossibility to halt the loop with the traditional <code>break;</code> and <code>return;</code> statements.</li>\n<li>Array only dedicated method.</li>\n</ul>\n<h2 id=\"forof-to-the-rescue\"><a href=\"#forof-to-the-rescue\" class=\"phenomic-HeadingAnchor\">#</a><code>for..of</code> to the rescue</h2>\n<p>ECMA consortium has so decided to proceed with establishment of a new enhanced version of the <code>for..in</code> loop.\nThus was born the <code>for..of</code> loop which, from now on, will coexist with the previous one allowing to maintain\nthe backward compatibility with former version of the standard.</p>\n<p>The principal is the same : run across any type of <em>iterable object</em>.</p>\n<p>In its simplest form, the <code>for..of</code> loop therefore allow to iterate over all values of a table keys.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'world'</span>];\narr.baz = <span class=\"hljs-string\">'and mars'</span>;\n\n<span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-keyword\">const</span> arrValue <span class=\"hljs-keyword\">of</span> arr ) {\n  <span class=\"hljs-built_in\">console</span>.log( arrValue ); <span class=\"hljs-comment\">// 'hello', 'world'</span>\n}</code></pre>\n<p>The <code>for..of</code> loop can also iterate over more complex types like:</p>\n<h3 id=\"strings\"><a href=\"#strings\" class=\"phenomic-HeadingAnchor\">#</a><em>Strings</em></h3>\n<p>In this case, each character is evaluated as a Unicode entity.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> str = <span class=\"hljs-string\">'sm00th'</span>;\n\n<span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-keyword\">const</span> chr <span class=\"hljs-keyword\">of</span> str ){\n  <span class=\"hljs-built_in\">console</span>.log(chr); <span class=\"hljs-comment\">// 's', 'm', '0', '0', 't', 'h'</span>\n}</code></pre>\n<h3 id=\"nodelist\"><a href=\"#nodelist\" class=\"phenomic-HeadingAnchor\">#</a><em>NodeList</em></h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// <span class=\"hljs-doctag\">Note:</span> This will only work in platforms that have</span>\n<span class=\"hljs-comment\">// implemented NodeList.prototype[Symbol.iterator]</span>\n\n<span class=\"hljs-comment\">// this code add a \"read\" class to each &#x3C;p> markup</span>\n<span class=\"hljs-comment\">// contained in each &#x3C;article> markup</span>\n\n<span class=\"hljs-keyword\">const</span> articleParagraphs = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">\"article > p\"</span>);\n\n<span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-keyword\">const</span> paragraph <span class=\"hljs-keyword\">of</span> articleParagraphs ) {\n  paragraph.classList.add(<span class=\"hljs-string\">\"read\"</span>);\n}</code></pre>\n<h3 id=\"maps\"><a href=\"#maps\" class=\"phenomic-HeadingAnchor\">#</a><em>Maps</em></h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-string\">'hello'</span>], [<span class=\"hljs-string\">'bar'</span>, <span class=\"hljs-string\">'world'</span>]]);\n\n<span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-keyword\">const</span> [name, value] <span class=\"hljs-keyword\">of</span> m ) {\n  <span class=\"hljs-built_in\">console</span>.log(name + <span class=\"hljs-string\">\"->\"</span> + value); <span class=\"hljs-comment\">//\"foo->hello\", \"bar->world\"</span>\n}</code></pre>\n<h3 id=\"sets\"><a href=\"#sets\" class=\"phenomic-HeadingAnchor\">#</a><em>Sets</em></h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-string\">'foo'</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-number\">42</span>]);\n\n<span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> s ) {\n  <span class=\"hljs-built_in\">console</span>.log(value); <span class=\"hljs-comment\">// 'foo', true, 42</span>\n}</code></pre>\n<h3 id=\"generators\"><a href=\"#generators\" class=\"phenomic-HeadingAnchor\">#</a><em>Generators</em></h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *<span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">'foo'</span>;\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">42</span>;\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">'bar'</span>;\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> v <span class=\"hljs-keyword\">of</span> foo() ) {\n    <span class=\"hljs-built_in\">console</span>.log( v ); <span class=\"hljs-comment\">// 'foo', false, 42, 'bar'</span>\n}</code></pre>\n<blockquote>\n<p>What about traditional object ?</p>\n</blockquote>\n<p>Suprisingly, objects can't be directly browsed by this brand new loop.\nFortunately a workaround exists such as\n<a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Object/keys\"><code>Object.keys()</code></a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> obj = { <span class=\"hljs-attr\">foo</span> : <span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-attr\">bar</span> : <span class=\"hljs-string\">'world'</span> };\n\n<span class=\"hljs-keyword\">for</span> ( <span class=\"hljs-keyword\">const</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Object</span>.keys(obj) ) {\n  <span class=\"hljs-built_in\">console</span>.log(key + <span class=\"hljs-string\">\"->\"</span> + obj[key]); <span class=\"hljs-comment\">// 'foo->hello', 'bar->world'</span>\n}</code></pre>\n<h2 id=\"in-a-nutshell\"><a href=\"#in-a-nutshell\" class=\"phenomic-HeadingAnchor\">#</a>In a nutshell</h2>\n<p><code>for..of</code> comes to address <code>for..in</code> loop gaps and allow\na simplified iteration over <em>iterable objects</em> such as:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String\">String</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Maps &#x26; WeakMaps</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\">Sets &#x26; WeakSets</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">Generators</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\">NodeList</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\">arguments</a></li>\n</ul>\n<p>Furthermore, <code>for..of</code> as of now resolve pitfalls such as unpredictable iteration order or\nautomated coercion of index to string.</p>\n<h2 id=\"to-go-further\"><a href=\"#to-go-further\" class=\"phenomic-HeadingAnchor\">#</a>To go further</h2>\n<p><code>for..of</code> loop is another added arrow to ES6 bow that\nallows to run through, in a native way, the brand new <em>iterable objects</em> of the language.</p>\n<p>For information about this feature :</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">MDN Documentation</a></li>\n<li><a href=\"https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/\">The post of Jason Orendorff</a></li>\n<li><a href=\"http://tc39wiki.calculist.org/es6/for-of/\">The post of Dave Herman</a></li>\n<li><a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-for-in-and-for-of-statements\">ECMA-262 Specification</a></li>\n</ul>\n","rawBody":"\n## Introduction\n\nWith the arrival of new iterable objects, ECMAScript had to create new ways to read through them.\nIn the unique concern of maintaining the backward compatibility, ES6 had to const his `for..in` loop untouched.\n\n> But then, how to create a copycat of this same loop with improved capabilities ?  \n\nSolution is quite simple: \"Welcome to the `of` keyword!\"\n\nBut before I tell you more, and to fully understand the usefulness of this new keyword, const review the existing.\n\n## The good ol' `for..in`\n\nAll self-respecting _JavaScript enthousiast_ already knows the famous `for..in` loop\nwhose first value is to iterate over the different keys of an object or an array.\n\n```js\nconst obj = { foo : 'hello', bar : 'world' };\n\nfor ( const key in obj ) {\n  console.log( key + '->' + obj[key] );  // 'foo->hello', 'bar->world'\n}\n```\n\nThe `for..in` loop, despite its ease of use hide some pitfalls:\n - When itarating over an array, index value is parsed to string : \"0\", \"1\", \"2\", etc..\n This behaviour can lead to potential error when index is used in computation.\n - The loop iterate across all the table keys, but also over each of its properties.\n\n    ```js\n    const arr = ['foo', 'bar'];\n    arr.oups = 'baz';\n\n    for ( const key in arr ) {\n      console.log( key + '->' + arr[key] ); // '0->foo', '1->bar', 'oups->baz'\n    }\n    ```\n - Iteration order over a given object properties may vary across depending on the code executing environment.\n\n## The alternative `.forEach()` method\n\nThe [`Array.prototype.forEach()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\nloop allow a more secure iteration, but bring other downsides as:\n\n - Impossibility to halt the loop with the traditional `break;` and `return;` statements.\n - Array only dedicated method.\n\n## `for..of` to the rescue\n\nECMA consortium has so decided to proceed with establishment of a new enhanced version of the `for..in` loop.\nThus was born the `for..of` loop which, from now on, will coexist with the previous one allowing to maintain\nthe backward compatibility with former version of the standard.\n\nThe principal is the same : run across any type of _iterable object_.\n\nIn its simplest form, the `for..of` loop therefore allow to iterate over all values of a table keys.\n\n```js\nconst arr = ['hello', 'world'];\narr.baz = 'and mars';\n\nfor ( const arrValue of arr ) {\n  console.log( arrValue ); // 'hello', 'world'\n}\n```\n\nThe `for..of` loop can also iterate over more complex types like:\n\n### _Strings_\n\nIn this case, each character is evaluated as a Unicode entity.\n\n```js\nconst str = 'sm00th';\n\nfor ( const chr of str ){\n  console.log(chr); // 's', 'm', '0', '0', 't', 'h'\n}\n```\n\n### _NodeList_\n\n```js\n// Note: This will only work in platforms that have\n// implemented NodeList.prototype[Symbol.iterator]\n\n// this code add a \"read\" class to each <p> markup\n// contained in each <article> markup\n\nconst articleParagraphs = document.querySelectorAll(\"article > p\");\n\nfor ( const paragraph of articleParagraphs ) {\n  paragraph.classList.add(\"read\");\n}\n```\n\n### _Maps_\n\n```js\nconst m = new Map([['foo', 'hello'], ['bar', 'world']]);\n\nfor ( const [name, value] of m ) {\n  console.log(name + \"->\" + value); //\"foo->hello\", \"bar->world\"\n}\n```\n\n### _Sets_\n\n```js\nconst s = new Set(['foo', true, 42]);\n\nfor ( const value of s ) {\n  console.log(value); // 'foo', true, 42\n}\n```\n\n### _Generators_\n\n```js\nfunction *foo() {\n    yield 'foo';\n    yield false;\n    yield 42;\n    yield 'bar';\n}\n\nfor (const v of foo() ) {\n    console.log( v ); // 'foo', false, 42, 'bar'\n}\n```\n\n> What about traditional object ?\n\nSuprisingly, objects can't be directly browsed by this brand new loop.\nFortunately a workaround exists such as\n[`Object.keys()`](https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Object/keys)\n\n```js\nconst obj = { foo : 'hello', bar : 'world' };\n\nfor ( const key of Object.keys(obj) ) {\n  console.log(key + \"->\" + obj[key]); // 'foo->hello', 'bar->world'\n}\n```\n\n## In a nutshell\n\n`for..of` comes to address `for..in` loop gaps and allow\na simplified iteration over _iterable objects_ such as:\n\n* [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)\n* [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)\n* [Maps & WeakMaps](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)\n* [Sets & WeakSets](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)\n* [Generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function%2A)\n* [NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList)\n* [arguments](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments)\n\nFurthermore, `for..of` as of now resolve pitfalls such as unpredictable iteration order or\nautomated coercion of index to string.\n\n## To go further\n\n`for..of` loop is another added arrow to ES6 bow that\nallows to run through, in a native way, the brand new _iterable objects_ of the language.\n\nFor information about this feature :\n\n* [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n* [The post of Jason Orendorff](https://hacks.mozilla.org/2015/04/es6-in-depth-iterators-and-the-for-of-loop/)\n* [The post of Dave Herman](http://tc39wiki.calculist.org/es6/for-of/)\n* [ECMA-262 Specification](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-for-in-and-for-of-statements)\n","__filename":"en/articles/js/es2015/for-of.md","__url":"/en/articles/js/es2015/for-of/","__resourceUrl":"/en/articles/js/es2015/for-of/index.html","__dataUrl":"/en/articles/js/es2015/for-of/index.html.538a3748b570fc0a1e8f157f023f8458.json"}