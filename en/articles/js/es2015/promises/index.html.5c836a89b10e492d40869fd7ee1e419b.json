{"head":{"layout":"Post","comments":true,"date":"2015-12-06","title":"ES6, ES2015 : Promises","tags":["JavaScript","ES6","ES2015"],"authors":["Uhsac"],"translators":["MoOx"],"description":"With ES2015, you can now very easily write asynchronous code thanks to the promises. The concept of promises exists is not new in theâ€¦"},"body":"<p>With ES2015, you can now very easily write asynchronous code thanks to the\npromises.\nThe concept of promises exists is not new in the JavaScript world, but now\nwe got an official feature!</p>\n<h2 id=\"whats-a-promise\"><a href=\"#whats-a-promise\" class=\"phenomic-HeadingAnchor\">#</a>What's a promise?</h2>\n<p>It's a promise of an incoming value, not available yet. It's a promise so it can\nbe fulfilled or not (rejected). If fulfilled, it will give us the the value we\nwere waiting for. If rejected, we will get the error so we can handle it.</p>\n<p>This mechanism allows to avoid the callback hell :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// With callbacks.</span>\n<span class=\"hljs-comment\">// Let's say that all those function are doing async tasks (like http or</span>\n<span class=\"hljs-comment\">// database request, fs read...)</span>\n<span class=\"hljs-keyword\">const</span> functionWithCallback1 = <span class=\"hljs-function\">(<span class=\"hljs-params\">callback</span>) =></span> callback(<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-literal\">undefined</span>)\n<span class=\"hljs-keyword\">const</span> functionWithCallback2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg, callback</span>) =></span> callback(arg, <span class=\"hljs-literal\">undefined</span>)\n<span class=\"hljs-keyword\">const</span> functionWithCallback3 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg, callback</span>) =></span> callback(arg, <span class=\"hljs-literal\">undefined</span>)\n<span class=\"hljs-keyword\">const</span> functionWithCallback4 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg, callback</span>) =></span> callback(arg, <span class=\"hljs-literal\">undefined</span>)\n<span class=\"hljs-keyword\">const</span> functionWithCallback5 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg, callback</span>) =></span> callback(arg, <span class=\"hljs-literal\">undefined</span>)\n<span class=\"hljs-keyword\">const</span> functionWithCallback6 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg, callback</span>) =></span> callback(arg, <span class=\"hljs-literal\">undefined</span>)\n\nfunctionWithCallback1(<span class=\"hljs-function\">(<span class=\"hljs-params\">result1, err</span>) =></span> {\n  <span class=\"hljs-keyword\">if</span> (err) {\n    <span class=\"hljs-keyword\">throw</span> err\n  }\n  functionWithCallback2(result1, (result2, err) => {\n    <span class=\"hljs-keyword\">if</span> (err) {\n      <span class=\"hljs-keyword\">throw</span> err\n    }\n    functionWithCallback3(result2, (result3, err) => {\n      <span class=\"hljs-keyword\">if</span> (err) {\n        <span class=\"hljs-keyword\">throw</span> err\n      }\n      functionWithCallback4(result3, (result4, err) => {\n        <span class=\"hljs-keyword\">if</span> (err) {\n          <span class=\"hljs-keyword\">throw</span> err\n        }\n        functionWithCallback5(result4, (result5, err) => {\n          <span class=\"hljs-keyword\">if</span> (err) {\n            <span class=\"hljs-keyword\">throw</span> err\n          }\n          functionWithCallback6(result5, (result6, err) => {\n            <span class=\"hljs-keyword\">if</span> (err) {\n              <span class=\"hljs-keyword\">throw</span> err\n            }\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Example with callbacks: <span class=\"hljs-subst\">${result6}</span>`</span>)\n          })\n        })\n      })\n    })\n  })\n})\n\n<span class=\"hljs-comment\">// Now the same thing with promises</span>\n<span class=\"hljs-keyword\">const</span> functionWithPromise1 = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-string\">'test'</span>)\n<span class=\"hljs-keyword\">const</span> functionWithPromise2 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =></span> <span class=\"hljs-built_in\">Promise</span>.resolve(arg)\n<span class=\"hljs-keyword\">const</span> functionWithPromise3 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =></span> <span class=\"hljs-built_in\">Promise</span>.resolve(arg)\n<span class=\"hljs-keyword\">const</span> functionWithPromise4 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =></span> <span class=\"hljs-built_in\">Promise</span>.resolve(arg)\n<span class=\"hljs-keyword\">const</span> functionWithPromise5 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =></span> <span class=\"hljs-built_in\">Promise</span>.resolve(arg)\n<span class=\"hljs-keyword\">const</span> functionWithPromise6 = <span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =></span> <span class=\"hljs-built_in\">Promise</span>.resolve(arg)\n\nfunctionWithPromise1()\n  .then(functionWithPromise2)\n  .then(functionWithPromise3)\n  .then(functionWithPromise4)\n  .then(functionWithPromise5)\n  .then(functionWithPromise6)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Example with promises: <span class=\"hljs-subst\">${result}</span>`</span>))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> {\n    <span class=\"hljs-keyword\">throw</span> err\n  })</code></pre>\n<p>As you can see, example with promises is clear and more concise.</p>\n<h2 id=\"thats-cool-how-can-i-use-promises\"><a href=\"#thats-cool-how-can-i-use-promises\" class=\"phenomic-HeadingAnchor\">#</a>That's cool. How can I use promises?</h2>\n<p>A promise can have different status:</p>\n<ul>\n<li>in progress: value is not ready yet</li>\n<li>resolved: value is here, we can use it</li>\n<li>rejected: an error has been thrown, we should handle it.</li>\n</ul>\n<p>A promise have 2 functions: <code>then</code> and <code>catch</code>.\nYou can use <code>then</code> to wait for the result (or handle an error), and <code>catch</code> to\ncatch all possibles errors of one promise or more.</p>\n<p>Let's see how to use promises with an example of the incoming standardized\n<a href=\"https://fetch.spec.whatwg.org\"><code>fetch</code></a> method.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// At this moment, promise is in progress</span>\n<span class=\"hljs-keyword\">const</span> fetchPromise = fetch(<span class=\"hljs-string\">'http://putaindecode.io'</span>)\n\n<span class=\"hljs-comment\">// When promise is resolved, you go a value you can work with</span>\n<span class=\"hljs-keyword\">const</span> parsePromise = fetchPromise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">fetchResult</span> =></span> {\n  <span class=\"hljs-comment\">// I can return a new result that can be used as a new promise</span>\n  <span class=\"hljs-comment\">// Here we call .text() which parse the content of the request and return</span>\n  <span class=\"hljs-comment\">// promise</span>\n  <span class=\"hljs-keyword\">return</span> fetchResult.text()\n})\n\n<span class=\"hljs-comment\">// When parsing is done, we can work with the content</span>\nparsePromise.then(<span class=\"hljs-function\"><span class=\"hljs-params\">textResult</span> =></span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Here is the text result : <span class=\"hljs-subst\">${textResult}</span>`</span>)\n})\n\n<span class=\"hljs-comment\">// If the request encounter an issue, promise might be rejected with an error</span>\nfetchPromise.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">fetchError</span> =></span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`We got an issue during the request`</span>, fetchError)\n})\n\n<span class=\"hljs-comment\">// If there is an issue during the parsing, we can handle it too</span>\nparsePromise.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">parseError</span> =></span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"We got an issue during the parsing\"</span>, parseError)\n})\n\n<span class=\"hljs-comment\">// The same can be written like this</span>\nfetch(<span class=\"hljs-string\">'http://putaindecode.io'</span>)\n  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">fetchResult</span>) =></span> fetchResult.text())\n  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">textResult</span>) =></span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Here is the text result : <span class=\"hljs-subst\">${textResult}</span>`</span>)\n  })\n  .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =></span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`We got an issue during the request or the parsing`</span>, fetchError)\n  })\n\n<span class=\"hljs-comment\">// Or like this</span>\nfetch(<span class=\"hljs-string\">'http://putaindecode.io'</span>)\n  .then(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">fetchResult</span>) =></span> {\n      <span class=\"hljs-keyword\">return</span> fetchResult.text()\n    },\n    (fetchError) => {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`We got an issue during the request`</span>, fetchError)\n    })\n  .then(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">textResult</span>) =></span> {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Here is the text result : <span class=\"hljs-subst\">${textResult}</span>`</span>)\n    },\n    (parseError) => {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"We got an issue during the parsing\"</span>, parseError)\n    }\n  )</code></pre>\n<h2 id=\"how-do-i-create-my-own-promises\"><a href=\"#how-do-i-create-my-own-promises\" class=\"phenomic-HeadingAnchor\">#</a>How do I create my own promises?</h2>\n<p>Using a promise is nice, but creating yours is even better. Let's be clear: it's\neasy.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> functionThatReturnAPromise = <span class=\"hljs-function\">(<span class=\"hljs-params\">success</span>) =></span> {\n  <span class=\"hljs-comment\">// We will need to use Promise class to use one.</span>\n  <span class=\"hljs-comment\">// constructor takes 2 arguments:</span>\n  <span class=\"hljs-comment\">// - resolve, a callback to pass the value you want to send</span>\n  <span class=\"hljs-comment\">// - reject, a callback to throw an error</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n    <span class=\"hljs-keyword\">if</span> (success) {\n      resolve(<span class=\"hljs-string\">'success'</span>)\n    }\n    <span class=\"hljs-keyword\">else</span> {\n      reject(<span class=\"hljs-string\">'failed'</span>)\n    }\n  })\n}\n\n<span class=\"hljs-comment\">// You can use this promise like this</span>\nfunctionThatReturnAPromise(success)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =></span> <span class=\"hljs-built_in\">console</span>.log(res))\n  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> <span class=\"hljs-built_in\">console</span>.log(error))\n\n<span class=\"hljs-comment\">// In our case, the previous example can be also written</span>\nfunctionThatReturnAPromise(success)\n  .then(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =></span> <span class=\"hljs-built_in\">console</span>.log(res),\n    (error) => <span class=\"hljs-built_in\">console</span>.log(error)\n  )</code></pre>\n<h2 id=\"whats-next\"><a href=\"#whats-next\" class=\"phenomic-HeadingAnchor\">#</a>What's next?</h2>\n<p>A new way to write asynchronous will land in JavaScript with <code>async</code> and <code>await</code>\nkeywords, but we will need to way another ES year (or two) for it !</p>\n","rawBody":"\nWith ES2015, you can now very easily write asynchronous code thanks to the\npromises.\nThe concept of promises exists is not new in the JavaScript world, but now\nwe got an official feature!\n\n## What's a promise?\n\nIt's a promise of an incoming value, not available yet. It's a promise so it can\nbe fulfilled or not (rejected). If fulfilled, it will give us the the value we\nwere waiting for. If rejected, we will get the error so we can handle it.\n\nThis mechanism allows to avoid the callback hell :\n\n```js\n// With callbacks.\n// Let's say that all those function are doing async tasks (like http or\n// database request, fs read...)\nconst functionWithCallback1 = (callback) => callback('test', undefined)\nconst functionWithCallback2 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback3 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback4 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback5 = (arg, callback) => callback(arg, undefined)\nconst functionWithCallback6 = (arg, callback) => callback(arg, undefined)\n\nfunctionWithCallback1((result1, err) => {\n  if (err) {\n    throw err\n  }\n  functionWithCallback2(result1, (result2, err) => {\n    if (err) {\n      throw err\n    }\n    functionWithCallback3(result2, (result3, err) => {\n      if (err) {\n        throw err\n      }\n      functionWithCallback4(result3, (result4, err) => {\n        if (err) {\n          throw err\n        }\n        functionWithCallback5(result4, (result5, err) => {\n          if (err) {\n            throw err\n          }\n          functionWithCallback6(result5, (result6, err) => {\n            if (err) {\n              throw err\n            }\n            console.log(`Example with callbacks: ${result6}`)\n          })\n        })\n      })\n    })\n  })\n})\n\n// Now the same thing with promises\nconst functionWithPromise1 = () => Promise.resolve('test')\nconst functionWithPromise2 = (arg) => Promise.resolve(arg)\nconst functionWithPromise3 = (arg) => Promise.resolve(arg)\nconst functionWithPromise4 = (arg) => Promise.resolve(arg)\nconst functionWithPromise5 = (arg) => Promise.resolve(arg)\nconst functionWithPromise6 = (arg) => Promise.resolve(arg)\n\nfunctionWithPromise1()\n  .then(functionWithPromise2)\n  .then(functionWithPromise3)\n  .then(functionWithPromise4)\n  .then(functionWithPromise5)\n  .then(functionWithPromise6)\n  .then(result => console.log(`Example with promises: ${result}`))\n  .catch(err => {\n    throw err\n  })\n```\n\nAs you can see, example with promises is clear and more concise.\n\n## That's cool. How can I use promises?\n\nA promise can have different status:\n- in progress: value is not ready yet\n- resolved: value is here, we can use it\n- rejected: an error has been thrown, we should handle it.\n\nA promise have 2 functions: `then` and `catch`.\nYou can use `then` to wait for the result (or handle an error), and `catch` to\ncatch all possibles errors of one promise or more.\n\nLet's see how to use promises with an example of the incoming standardized\n[`fetch`](https://fetch.spec.whatwg.org) method.\n\n```js\n// At this moment, promise is in progress\nconst fetchPromise = fetch('http://putaindecode.io')\n\n// When promise is resolved, you go a value you can work with\nconst parsePromise = fetchPromise.then(fetchResult => {\n  // I can return a new result that can be used as a new promise\n  // Here we call .text() which parse the content of the request and return\n  // promise\n  return fetchResult.text()\n})\n\n// When parsing is done, we can work with the content\nparsePromise.then(textResult => {\n  console.log(`Here is the text result : ${textResult}`)\n})\n\n// If the request encounter an issue, promise might be rejected with an error\nfetchPromise.catch(fetchError => {\n  console.log(`We got an issue during the request`, fetchError)\n})\n\n// If there is an issue during the parsing, we can handle it too\nparsePromise.catch(parseError => {\n  console.log(\"We got an issue during the parsing\", parseError)\n})\n\n// The same can be written like this\nfetch('http://putaindecode.io')\n  .then((fetchResult) => fetchResult.text())\n  .then((textResult) => {\n    console.log(`Here is the text result : ${textResult}`)\n  })\n  .catch((error) => {\n    console.log(`We got an issue during the request or the parsing`, fetchError)\n  })\n\n// Or like this\nfetch('http://putaindecode.io')\n  .then(\n    (fetchResult) => {\n      return fetchResult.text()\n    },\n    (fetchError) => {\n      console.log(`We got an issue during the request`, fetchError)\n    })\n  .then(\n    (textResult) => {\n      console.log(`Here is the text result : ${textResult}`)\n    },\n    (parseError) => {\n      console.log(\"We got an issue during the parsing\", parseError)\n    }\n  )\n```\n\n## How do I create my own promises?\n\nUsing a promise is nice, but creating yours is even better. Let's be clear: it's\neasy.\n\n```js\nconst functionThatReturnAPromise = (success) => {\n  // We will need to use Promise class to use one.\n  // constructor takes 2 arguments:\n  // - resolve, a callback to pass the value you want to send\n  // - reject, a callback to throw an error\n  return new Promise((resolve, reject) => {\n    if (success) {\n      resolve('success')\n    }\n    else {\n      reject('failed')\n    }\n  })\n}\n\n// You can use this promise like this\nfunctionThatReturnAPromise(success)\n  .then(res => console.log(res))\n  .catch(error => console.log(error))\n\n// In our case, the previous example can be also written\nfunctionThatReturnAPromise(success)\n  .then(\n    (res) => console.log(res),\n    (error) => console.log(error)\n  )\n```\n\n## What's next?\n\nA new way to write asynchronous will land in JavaScript with `async` and `await`\nkeywords, but we will need to way another ES year (or two) for it !\n","__filename":"en/articles/js/es2015/promises.md","__url":"/en/articles/js/es2015/promises/","__resourceUrl":"/en/articles/js/es2015/promises/index.html","__dataUrl":"/en/articles/js/es2015/promises/index.html.5c836a89b10e492d40869fd7ee1e419b.json"}