{"head":{"layout":"Post","comments":true,"date":"2015-11-24","title":"Unit testing React components","tags":["js","react","tests"],"authors":["MoOx"],"header":{"image":"https://farm6.staticflickr.com/5159/7112879347_9e0da289ca_z.jpg","credit":"https://www.flickr.com/photos/dvids/7112879347","linearGradient":"160deg, rgba(0,0,0, .9), rgba(97, 218, 251, .7)"},"description":"The React team has implemented a feature called shallow rendering, which lets you render a component \"one level deep\" and assert facts‚Ä¶"},"body":"<p>The React team has implemented a feature called\n<a href=\"http://facebook.github.io/react/docs/test-utils.html#shallow-rendering\">shallow rendering</a>,\nwhich</p>\n<blockquote>\n<p>lets you render a component \"one level deep\" and assert facts about\nwhat its render method returns, without worrying about the behavior of child\ncomponents, which are not instantiated or rendered.\nThis does not require a DOM.</p>\n</blockquote>\n<p>Sounds good, right? And guess what, shallow rendering is currently the\n<a href=\"https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26\">preferred way to test your React components</a>.</p>\n<p>As you can see in the post mentioned at the end of this one, the\nactual code to test some components might seem a bit longer that what you might\nexpect.</p>\n<p>Thankfully, <a href=\"https://github.com/vvo\">someone</a> created something pretty cool:\n<a href=\"https://github.com/algolia/react-element-to-jsx-string\">react-element-to-jsx-string</a>.\nAs the name of the package says, this library helps to render a react component\ninto a JSX string.</p>\n<p>Now things start to become interesting:\nwith those two things in mind (shallow render and react components as JSX strings),\nwe can easily add some basic unit tests for some components.</p>\n<p><em>There are others techniques to test React components, and most of those\ninvolve the DOM. This means you will need to run your tests in the browser (or\nusing jsdom): your tests will be slower than the following method\n(which is more real unit testing since you execute less code and do not require\na huge environment).</em></p>\n<h2 id=\"easy-unit-testing-react-components-without-a-dom\"><a href=\"#easy-unit-testing-react-components-without-a-dom\" class=\"phenomic-HeadingAnchor\">#</a>Easy unit testing React components (without a DOM)</h2>\n<p>Let's do this with the following (dumb) component:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// web_modules/Picture/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> { PropTypes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n\n<span class=\"hljs-keyword\">const</span> Component = ({\n  img,\n  title,\n  Loader,\n  Title,\n}) => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n    {\n      (!img || !img.src) &#x26;&#x26; Loader &#x26;&#x26;\n      </span>&#x3C;Loader /><span class=\"xml\">\n    }\n    {\n      img &#x26;&#x26; img.src &#x26;&#x26;\n      </span>&#x3C;img src={ img.src } alt={ img.alt }/>\n    }\n    {\n      title &#x26;&#x26; Title &#x26;&#x26;\n      &#x3C;Title text={ title } />\n    }\n  &#x3C;/div>\n)\n\nComponent.propTypes = {\n  img: PropTypes.object,\n  title: PropTypes.string,\n  Loader: PropTypes.func.isRequired,\n  Title: PropTypes.func.isRequired,\n}\n\nComponent.displayName = \"Picture\"\n\nexport default Component</code></pre>\n<p>This component displays an image with a title component.\nIf the image data is not ready yet, it can display a loader component.</p>\n<p>Now let's write a simple test for it. For the example we will use\n<a href=\"https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4\">tape</a>\nwith the help of <a href=\"https://github.com/atabel/tape-jsx-equals\">tape-jsx-equals</a>,\nbut you will find\n<a href=\"https://www.npmjs.com/search?q=expect+jsx\">all kind of flavors on npm</a>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// web_modules/Picture/__tests__/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> tape <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"tape\"</span>\n<span class=\"hljs-keyword\">import</span> addAssertions <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"extend-tape\"</span>\n<span class=\"hljs-keyword\">import</span> jsxEquals <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"tape-jsx-equals\"</span>\n<span class=\"hljs-keyword\">const</span> test = addAssertions(tape, { jsxEquals })\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> { createRenderer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-addons-test-utils\"</span>\n\n<span class=\"hljs-keyword\">import</span> Picture <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"..\"</span>\n\n<span class=\"hljs-comment\">// fixtures (empty and stateless react components)</span>\n<span class=\"hljs-keyword\">const</span> Loader = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> {}\n<span class=\"hljs-keyword\">const</span> Title = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =></span> {}\n\ntest(<span class=\"hljs-string\">\"PageContainer is properly rendered\"</span>, (t) => {\n  <span class=\"hljs-keyword\">const</span> renderer = createRenderer()\n\n  renderer.render(\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Picture</span>\n      <span class=\"hljs-attr\">Loader</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">Loader</span> }\n      <span class=\"hljs-attr\">Title</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">Title</span> }\n    /></span>\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    </span>&#x3C;div>\n      &#x3C;Loader />\n    &#x3C;/div><span class=\"xml\">,\n    \"can render a Loader component if no image data are passed\"\n  )\n\n  renderer.render(\n    </span>&#x3C;Picture\n      Loader={ Loader }\n      Title={ Title }\n      img={ {\n        src: \"SRC\",\n        alt: \"ALT\",\n      } }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    &#x3C;div>\n      &#x3C;img src=\"SRC\" alt=\"ALT\" />\n    &#x3C;/div>,\n    \"should render an image if data are passed\"\n  )\n\n  renderer.render(\n    &#x3C;Picture\n      Loader={ Loader }\n      Title={ Title }\n      img={ {\n        src: \"SRC\",\n        alt: \"ALT\",\n      } }\n      title={ \"TITLE\" }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    &#x3C;div>\n      &#x3C;img src=\"SRC\" alt=\"ALT\" />\n      &#x3C;Title text=\"TITLE\" />\n    &#x3C;/div>,\n    \"can render a Title if data are passed\"\n  )\n\n  t.end()\n})</code></pre>\n<p>These tests are the minimum coverage to ensure you don't break anything when you work\non your component.</p>\n<p>As you can see, the tests here are pretty easy to write &#x26; straightforward.<br>\n<strong>The interesting part is that you don't compare using strings.\nYou can use real React components.</strong></p>\n<p>You can easily run this full example by getting it from this repository:</p>\n<p><a href=\"https://github.com/MoOx/react-component-unit-testing-example\">github.com/MoOx/react-component-unit-testing-example</a></p>\n<p>This example contains all the commands and dependencies\n(defined in the <code>package.json</code>)\nthat you might need.</p>\n<h1 id=\"what-about-testing-events-like-onclick\"><a href=\"#what-about-testing-events-like-onclick\" class=\"phenomic-HeadingAnchor\">#</a>What about testing events like <code>onClick</code>?</h1>\n<p>You don't need to reproduce the entire click.</p>\n<p><strong>Your tests don't need to check that your <code>onClick</code> prop will be executed when\nyou click on a DOM element.</strong>\n<em>React probably have tests to cover this.</em>  </p>\n<p>You only need to test that the <code>onClick</code> prop value will do what you want.\nSo if you have something like <code>onClick={ yourCallback }</code>,\njust call directly <code>yourCallback()</code> in your test just before your comparison.\nThat's enough!</p>\n<p>If you want to go deeper, you might also read:</p>\n<ul>\n<li><a href=\"http://simonsmith.io/unit-testing-react-components-without-a-dom/\"><em>Unit testing React components without a DOM</em></a>,\nby Simon Smith, that covers the same topic without the simplicity of the JSX\ncomparisons,</li>\n<li><a href=\"https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/\"><em>How we unit test React components using expect-jsx</em></a>\non Algolia blog, that explains why they choose and create tools for this approach.</li>\n</ul>\n<p>With all those examples, we hope you will stop being afraid to test your code\nand will not hesitate to cover all your React components with tests üòç.</p>\n","rawBody":"\nThe React team has implemented a feature called\n[shallow rendering](http://facebook.github.io/react/docs/test-utils.html#shallow-rendering),\nwhich\n\n>lets you render a component \"one level deep\" and assert facts about\nwhat its render method returns, without worrying about the behavior of child\ncomponents, which are not instantiated or rendered.\nThis does not require a DOM.\n\nSounds good, right? And guess what, shallow rendering is currently the\n[preferred way to test your React components](https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26).\n\nAs you can see in the post mentioned at the end of this one, the\nactual code to test some components might seem a bit longer that what you might\nexpect.\n\nThankfully, [someone](https://github.com/vvo) created something pretty cool:\n[react-element-to-jsx-string](https://github.com/algolia/react-element-to-jsx-string).\nAs the name of the package says, this library helps to render a react component\ninto a JSX string.\n\nNow things start to become interesting:\nwith those two things in mind (shallow render and react components as JSX strings),\nwe can easily add some basic unit tests for some components.\n\n_There are others techniques to test React components, and most of those\ninvolve the DOM. This means you will need to run your tests in the browser (or\nusing jsdom): your tests will be slower than the following method\n(which is more real unit testing since you execute less code and do not require\na huge environment)._\n\n## Easy unit testing React components (without a DOM)\n\nLet's do this with the following (dumb) component:\n\n```js\n// web_modules/Picture/index.js\n\nimport React from \"react\"\nimport { PropTypes } from \"react\"\n\nconst Component = ({\n  img,\n  title,\n  Loader,\n  Title,\n}) => (\n  <div>\n    {\n      (!img || !img.src) && Loader &&\n      <Loader />\n    }\n    {\n      img && img.src &&\n      <img src={ img.src } alt={ img.alt }/>\n    }\n    {\n      title && Title &&\n      <Title text={ title } />\n    }\n  </div>\n)\n\nComponent.propTypes = {\n  img: PropTypes.object,\n  title: PropTypes.string,\n  Loader: PropTypes.func.isRequired,\n  Title: PropTypes.func.isRequired,\n}\n\nComponent.displayName = \"Picture\"\n\nexport default Component\n```\n\nThis component displays an image with a title component.\nIf the image data is not ready yet, it can display a loader component.\n\nNow let's write a simple test for it. For the example we will use\n[tape](https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4)\nwith the help of [tape-jsx-equals](https://github.com/atabel/tape-jsx-equals),\nbut you will find\n[all kind of flavors on npm](https://www.npmjs.com/search?q=expect+jsx).\n\n```js\n// web_modules/Picture/__tests__/index.js\n\nimport tape from \"tape\"\nimport addAssertions from \"extend-tape\"\nimport jsxEquals from \"tape-jsx-equals\"\nconst test = addAssertions(tape, { jsxEquals })\n\nimport React from \"react\"\nimport { createRenderer } from \"react-addons-test-utils\"\n\nimport Picture from \"..\"\n\n// fixtures (empty and stateless react components)\nconst Loader = () => {}\nconst Title = () => {}\n\ntest(\"PageContainer is properly rendered\", (t) => {\n  const renderer = createRenderer()\n\n  renderer.render(\n    <Picture\n      Loader={ Loader }\n      Title={ Title }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <Loader />\n    </div>,\n    \"can render a Loader component if no image data are passed\"\n  )\n\n  renderer.render(\n    <Picture\n      Loader={ Loader }\n      Title={ Title }\n      img={ {\n        src: \"SRC\",\n        alt: \"ALT\",\n      } }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <img src=\"SRC\" alt=\"ALT\" />\n    </div>,\n    \"should render an image if data are passed\"\n  )\n\n  renderer.render(\n    <Picture\n      Loader={ Loader }\n      Title={ Title }\n      img={ {\n        src: \"SRC\",\n        alt: \"ALT\",\n      } }\n      title={ \"TITLE\" }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <img src=\"SRC\" alt=\"ALT\" />\n      <Title text=\"TITLE\" />\n    </div>,\n    \"can render a Title if data are passed\"\n  )\n\n  t.end()\n})\n```\n\nThese tests are the minimum coverage to ensure you don't break anything when you work\non your component.\n\nAs you can see, the tests here are pretty easy to write & straightforward.  \n**The interesting part is that you don't compare using strings.\nYou can use real React components.**\n\nYou can easily run this full example by getting it from this repository:\n\n[github.com/MoOx/react-component-unit-testing-example](https://github.com/MoOx/react-component-unit-testing-example)\n\nThis example contains all the commands and dependencies\n(defined in the `package.json`)\nthat you might need.\n\n# What about testing events like `onClick`?\n\nYou don't need to reproduce the entire click.\n\n**Your tests don't need to check that your `onClick` prop will be executed when\nyou click on a DOM element.**\n_React probably have tests to cover this._  \n\nYou only need to test that the `onClick` prop value will do what you want.\nSo if you have something like `onClick={ yourCallback }`,\njust call directly `yourCallback()` in your test just before your comparison.\nThat's enough!\n\nIf you want to go deeper, you might also read:\n- [_Unit testing React components without a DOM_](http://simonsmith.io/unit-testing-react-components-without-a-dom/),\nby Simon Smith, that covers the same topic without the simplicity of the JSX\ncomparisons,\n- [_How we unit test React components using expect-jsx_](https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/)\non Algolia blog, that explains why they choose and create tools for this approach.\n\nWith all those examples, we hope you will stop being afraid to test your code\nand will not hesitate to cover all your React components with tests üòç.\n","__filename":"en/articles/js/react/unit-testing.md","__url":"/en/articles/js/react/unit-testing/","__resourceUrl":"/en/articles/js/react/unit-testing/index.html","__dataUrl":"/en/articles/js/react/unit-testing/index.html.b22c34ab1850bacf982dcd6b22c3e41a.json"}